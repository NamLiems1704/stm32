
bai1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000039c8  080001f0  080001f0  000011f0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  08003bb8  08003bb8  00004bb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003c44  08003c44  00005010  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08003c44  08003c44  00005010  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08003c44  08003c44  00005010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003c44  08003c44  00004c44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003c48  08003c48  00004c48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08003c4c  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001048  20000010  08003c5c  00005010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001058  08003c5c  00005058  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00005010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a042  00000000  00000000  00005039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000259c  00000000  00000000  0000f07b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a90  00000000  00000000  00011618  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007e1  00000000  00000000  000120a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a1bd  00000000  00000000  00012889  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cead  00000000  00000000  0002ca46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009ba2a  00000000  00000000  000398f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d531d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000286c  00000000  00000000  000d5360  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  000d7bcc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f0 <__do_global_dtors_aux>:
 80001f0:	b510      	push	{r4, lr}
 80001f2:	4c05      	ldr	r4, [pc, #20]	@ (8000208 <__do_global_dtors_aux+0x18>)
 80001f4:	7823      	ldrb	r3, [r4, #0]
 80001f6:	b933      	cbnz	r3, 8000206 <__do_global_dtors_aux+0x16>
 80001f8:	4b04      	ldr	r3, [pc, #16]	@ (800020c <__do_global_dtors_aux+0x1c>)
 80001fa:	b113      	cbz	r3, 8000202 <__do_global_dtors_aux+0x12>
 80001fc:	4804      	ldr	r0, [pc, #16]	@ (8000210 <__do_global_dtors_aux+0x20>)
 80001fe:	f3af 8000 	nop.w
 8000202:	2301      	movs	r3, #1
 8000204:	7023      	strb	r3, [r4, #0]
 8000206:	bd10      	pop	{r4, pc}
 8000208:	20000010 	.word	0x20000010
 800020c:	00000000 	.word	0x00000000
 8000210:	08003ba0 	.word	0x08003ba0

08000214 <frame_dummy>:
 8000214:	b508      	push	{r3, lr}
 8000216:	4b03      	ldr	r3, [pc, #12]	@ (8000224 <frame_dummy+0x10>)
 8000218:	b11b      	cbz	r3, 8000222 <frame_dummy+0xe>
 800021a:	4903      	ldr	r1, [pc, #12]	@ (8000228 <frame_dummy+0x14>)
 800021c:	4803      	ldr	r0, [pc, #12]	@ (800022c <frame_dummy+0x18>)
 800021e:	f3af 8000 	nop.w
 8000222:	bd08      	pop	{r3, pc}
 8000224:	00000000 	.word	0x00000000
 8000228:	20000014 	.word	0x20000014
 800022c:	08003ba0 	.word	0x08003ba0

08000230 <Delay>:
#include "main.h"
#include "LED7SEG.h"

void Delay(uint16_t D)
{
 8000230:	b480      	push	{r7}
 8000232:	b085      	sub	sp, #20
 8000234:	af00      	add	r7, sp, #0
 8000236:	4603      	mov	r3, r0
 8000238:	80fb      	strh	r3, [r7, #6]
	uint16_t i;
	for (i=0;i<D;i++);
 800023a:	2300      	movs	r3, #0
 800023c:	81fb      	strh	r3, [r7, #14]
 800023e:	e002      	b.n	8000246 <Delay+0x16>
 8000240:	89fb      	ldrh	r3, [r7, #14]
 8000242:	3301      	adds	r3, #1
 8000244:	81fb      	strh	r3, [r7, #14]
 8000246:	89fa      	ldrh	r2, [r7, #14]
 8000248:	88fb      	ldrh	r3, [r7, #6]
 800024a:	429a      	cmp	r2, r3
 800024c:	d3f8      	bcc.n	8000240 <Delay+0x10>
	return;
 800024e:	bf00      	nop
}
 8000250:	3714      	adds	r7, #20
 8000252:	46bd      	mov	sp, r7
 8000254:	bc80      	pop	{r7}
 8000256:	4770      	bx	lr

08000258 <ShiftingLatch>:
////////////////////////////////////////////
void ShiftingLatch()
{
 8000258:	b580      	push	{r7, lr}
 800025a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED7SEG_Port, STR, GPIO_PIN_SET);
 800025c:	2201      	movs	r2, #1
 800025e:	2102      	movs	r1, #2
 8000260:	4806      	ldr	r0, [pc, #24]	@ (800027c <ShiftingLatch+0x24>)
 8000262:	f001 fdab 	bl	8001dbc <HAL_GPIO_WritePin>
	Delay(2);
 8000266:	2002      	movs	r0, #2
 8000268:	f7ff ffe2 	bl	8000230 <Delay>
	HAL_GPIO_WritePin(LED7SEG_Port, STR, GPIO_PIN_RESET);
 800026c:	2200      	movs	r2, #0
 800026e:	2102      	movs	r1, #2
 8000270:	4802      	ldr	r0, [pc, #8]	@ (800027c <ShiftingLatch+0x24>)
 8000272:	f001 fda3 	bl	8001dbc <HAL_GPIO_WritePin>
	return;
 8000276:	bf00      	nop
}
 8000278:	bd80      	pop	{r7, pc}
 800027a:	bf00      	nop
 800027c:	40010c00 	.word	0x40010c00

08000280 <ShiftingOut>:
///////////////////////////////////////////////
void ShiftingOut(unsigned char sdata)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b084      	sub	sp, #16
 8000284:	af00      	add	r7, sp, #0
 8000286:	4603      	mov	r3, r0
 8000288:	71fb      	strb	r3, [r7, #7]
	unsigned char i, buffer, tmp;
	for (i=0;i<8;i++){
 800028a:	2300      	movs	r3, #0
 800028c:	73fb      	strb	r3, [r7, #15]
 800028e:	e028      	b.n	80002e2 <ShiftingOut+0x62>
		buffer = sdata;
 8000290:	79fb      	ldrb	r3, [r7, #7]
 8000292:	73bb      	strb	r3, [r7, #14]
		sdata = sdata << 1;
 8000294:	79fb      	ldrb	r3, [r7, #7]
 8000296:	005b      	lsls	r3, r3, #1
 8000298:	71fb      	strb	r3, [r7, #7]
		tmp = buffer & 0x80;
 800029a:	7bbb      	ldrb	r3, [r7, #14]
 800029c:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80002a0:	737b      	strb	r3, [r7, #13]
		if (tmp) {
 80002a2:	7b7b      	ldrb	r3, [r7, #13]
 80002a4:	2b00      	cmp	r3, #0
 80002a6:	d006      	beq.n	80002b6 <ShiftingOut+0x36>
			HAL_GPIO_WritePin(LED7SEG_Port, Data, GPIO_PIN_SET);
 80002a8:	2201      	movs	r2, #1
 80002aa:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80002ae:	4810      	ldr	r0, [pc, #64]	@ (80002f0 <ShiftingOut+0x70>)
 80002b0:	f001 fd84 	bl	8001dbc <HAL_GPIO_WritePin>
 80002b4:	e005      	b.n	80002c2 <ShiftingOut+0x42>
		}
		else
		{
			HAL_GPIO_WritePin(LED7SEG_Port, Data, GPIO_PIN_RESET);
 80002b6:	2200      	movs	r2, #0
 80002b8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80002bc:	480c      	ldr	r0, [pc, #48]	@ (80002f0 <ShiftingOut+0x70>)
 80002be:	f001 fd7d 	bl	8001dbc <HAL_GPIO_WritePin>
		}
		HAL_GPIO_WritePin(LED7SEG_Port, SCK, GPIO_PIN_SET);
 80002c2:	2201      	movs	r2, #1
 80002c4:	2101      	movs	r1, #1
 80002c6:	480a      	ldr	r0, [pc, #40]	@ (80002f0 <ShiftingOut+0x70>)
 80002c8:	f001 fd78 	bl	8001dbc <HAL_GPIO_WritePin>
		Delay(2);
 80002cc:	2002      	movs	r0, #2
 80002ce:	f7ff ffaf 	bl	8000230 <Delay>
		HAL_GPIO_WritePin(LED7SEG_Port, SCK, GPIO_PIN_RESET);
 80002d2:	2200      	movs	r2, #0
 80002d4:	2101      	movs	r1, #1
 80002d6:	4806      	ldr	r0, [pc, #24]	@ (80002f0 <ShiftingOut+0x70>)
 80002d8:	f001 fd70 	bl	8001dbc <HAL_GPIO_WritePin>
	for (i=0;i<8;i++){
 80002dc:	7bfb      	ldrb	r3, [r7, #15]
 80002de:	3301      	adds	r3, #1
 80002e0:	73fb      	strb	r3, [r7, #15]
 80002e2:	7bfb      	ldrb	r3, [r7, #15]
 80002e4:	2b07      	cmp	r3, #7
 80002e6:	d9d3      	bls.n	8000290 <ShiftingOut+0x10>
	}
	return;
 80002e8:	bf00      	nop
}
 80002ea:	3710      	adds	r7, #16
 80002ec:	46bd      	mov	sp, r7
 80002ee:	bd80      	pop	{r7, pc}
 80002f0:	40010c00 	.word	0x40010c00

080002f4 <Display_7_SEG>:
void Display_7_SEG(uint16_t value)
{
 80002f4:	b580      	push	{r7, lr}
 80002f6:	b086      	sub	sp, #24
 80002f8:	af00      	add	r7, sp, #0
 80002fa:	4603      	mov	r3, r0
 80002fc:	80fb      	strh	r3, [r7, #6]
	unsigned char ledcode[10] = {0xc0,0xf9,0xa4,0xb0,0x99,0x92,0x82,0xf8,0x80,0x90};
 80002fe:	4a53      	ldr	r2, [pc, #332]	@ (800044c <Display_7_SEG+0x158>)
 8000300:	f107 0308 	add.w	r3, r7, #8
 8000304:	ca07      	ldmia	r2, {r0, r1, r2}
 8000306:	c303      	stmia	r3!, {r0, r1}
 8000308:	801a      	strh	r2, [r3, #0]
	//unsigned char ledcode[10] = {0x3f, 0x06, 0x5b, 0x4f, 0x66, 0x6d, 0x7d, 0x07, 0x7f, 0x6f};
	unsigned char ch0, ch1, ch2, ch3, ch4, ch5;
	HAL_GPIO_WritePin(LED7SEG_Port, OE, GPIO_PIN_RESET);
 800030a:	2200      	movs	r2, #0
 800030c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000310:	484f      	ldr	r0, [pc, #316]	@ (8000450 <Display_7_SEG+0x15c>)
 8000312:	f001 fd53 	bl	8001dbc <HAL_GPIO_WritePin>
	ch5 = (value/100000)%10;
 8000316:	88fb      	ldrh	r3, [r7, #6]
 8000318:	4a4e      	ldr	r2, [pc, #312]	@ (8000454 <Display_7_SEG+0x160>)
 800031a:	fb82 1203 	smull	r1, r2, r2, r3
 800031e:	1352      	asrs	r2, r2, #13
 8000320:	17db      	asrs	r3, r3, #31
 8000322:	1ad2      	subs	r2, r2, r3
 8000324:	4b4c      	ldr	r3, [pc, #304]	@ (8000458 <Display_7_SEG+0x164>)
 8000326:	fb83 1302 	smull	r1, r3, r3, r2
 800032a:	1099      	asrs	r1, r3, #2
 800032c:	17d3      	asrs	r3, r2, #31
 800032e:	1ac9      	subs	r1, r1, r3
 8000330:	460b      	mov	r3, r1
 8000332:	009b      	lsls	r3, r3, #2
 8000334:	440b      	add	r3, r1
 8000336:	005b      	lsls	r3, r3, #1
 8000338:	1ad1      	subs	r1, r2, r3
 800033a:	460b      	mov	r3, r1
 800033c:	75fb      	strb	r3, [r7, #23]
	ch4 = (value%100000)/10000;
 800033e:	88fa      	ldrh	r2, [r7, #6]
 8000340:	4b44      	ldr	r3, [pc, #272]	@ (8000454 <Display_7_SEG+0x160>)
 8000342:	fb83 1302 	smull	r1, r3, r3, r2
 8000346:	1359      	asrs	r1, r3, #13
 8000348:	17d3      	asrs	r3, r2, #31
 800034a:	1acb      	subs	r3, r1, r3
 800034c:	4943      	ldr	r1, [pc, #268]	@ (800045c <Display_7_SEG+0x168>)
 800034e:	fb01 f303 	mul.w	r3, r1, r3
 8000352:	1ad3      	subs	r3, r2, r3
 8000354:	4a42      	ldr	r2, [pc, #264]	@ (8000460 <Display_7_SEG+0x16c>)
 8000356:	fb82 1203 	smull	r1, r2, r2, r3
 800035a:	1312      	asrs	r2, r2, #12
 800035c:	17db      	asrs	r3, r3, #31
 800035e:	1ad3      	subs	r3, r2, r3
 8000360:	75bb      	strb	r3, [r7, #22]
	ch3 = (value%10000)/1000;
 8000362:	88fb      	ldrh	r3, [r7, #6]
 8000364:	4a3f      	ldr	r2, [pc, #252]	@ (8000464 <Display_7_SEG+0x170>)
 8000366:	fba2 1203 	umull	r1, r2, r2, r3
 800036a:	0b52      	lsrs	r2, r2, #13
 800036c:	f242 7110 	movw	r1, #10000	@ 0x2710
 8000370:	fb01 f202 	mul.w	r2, r1, r2
 8000374:	1a9b      	subs	r3, r3, r2
 8000376:	b29b      	uxth	r3, r3
 8000378:	4a3b      	ldr	r2, [pc, #236]	@ (8000468 <Display_7_SEG+0x174>)
 800037a:	fba2 2303 	umull	r2, r3, r2, r3
 800037e:	099b      	lsrs	r3, r3, #6
 8000380:	b29b      	uxth	r3, r3
 8000382:	757b      	strb	r3, [r7, #21]
	ch2 = (value%1000)/100;
 8000384:	88fb      	ldrh	r3, [r7, #6]
 8000386:	4a38      	ldr	r2, [pc, #224]	@ (8000468 <Display_7_SEG+0x174>)
 8000388:	fba2 1203 	umull	r1, r2, r2, r3
 800038c:	0992      	lsrs	r2, r2, #6
 800038e:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000392:	fb01 f202 	mul.w	r2, r1, r2
 8000396:	1a9b      	subs	r3, r3, r2
 8000398:	b29b      	uxth	r3, r3
 800039a:	4a34      	ldr	r2, [pc, #208]	@ (800046c <Display_7_SEG+0x178>)
 800039c:	fba2 2303 	umull	r2, r3, r2, r3
 80003a0:	095b      	lsrs	r3, r3, #5
 80003a2:	b29b      	uxth	r3, r3
 80003a4:	753b      	strb	r3, [r7, #20]
	ch1 = (value%100)/10;
 80003a6:	88fb      	ldrh	r3, [r7, #6]
 80003a8:	4a30      	ldr	r2, [pc, #192]	@ (800046c <Display_7_SEG+0x178>)
 80003aa:	fba2 1203 	umull	r1, r2, r2, r3
 80003ae:	0952      	lsrs	r2, r2, #5
 80003b0:	2164      	movs	r1, #100	@ 0x64
 80003b2:	fb01 f202 	mul.w	r2, r1, r2
 80003b6:	1a9b      	subs	r3, r3, r2
 80003b8:	b29b      	uxth	r3, r3
 80003ba:	4a2d      	ldr	r2, [pc, #180]	@ (8000470 <Display_7_SEG+0x17c>)
 80003bc:	fba2 2303 	umull	r2, r3, r2, r3
 80003c0:	08db      	lsrs	r3, r3, #3
 80003c2:	b29b      	uxth	r3, r3
 80003c4:	74fb      	strb	r3, [r7, #19]
	ch0 = value%10;
 80003c6:	88fa      	ldrh	r2, [r7, #6]
 80003c8:	4b29      	ldr	r3, [pc, #164]	@ (8000470 <Display_7_SEG+0x17c>)
 80003ca:	fba3 1302 	umull	r1, r3, r3, r2
 80003ce:	08d9      	lsrs	r1, r3, #3
 80003d0:	460b      	mov	r3, r1
 80003d2:	009b      	lsls	r3, r3, #2
 80003d4:	440b      	add	r3, r1
 80003d6:	005b      	lsls	r3, r3, #1
 80003d8:	1ad3      	subs	r3, r2, r3
 80003da:	b29b      	uxth	r3, r3
 80003dc:	74bb      	strb	r3, [r7, #18]
	ShiftingOut(ledcode[ch0]);
 80003de:	7cbb      	ldrb	r3, [r7, #18]
 80003e0:	3318      	adds	r3, #24
 80003e2:	443b      	add	r3, r7
 80003e4:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80003e8:	4618      	mov	r0, r3
 80003ea:	f7ff ff49 	bl	8000280 <ShiftingOut>
	ShiftingOut(ledcode[ch1]);
 80003ee:	7cfb      	ldrb	r3, [r7, #19]
 80003f0:	3318      	adds	r3, #24
 80003f2:	443b      	add	r3, r7
 80003f4:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80003f8:	4618      	mov	r0, r3
 80003fa:	f7ff ff41 	bl	8000280 <ShiftingOut>
	ShiftingOut(ledcode[ch2]);
 80003fe:	7d3b      	ldrb	r3, [r7, #20]
 8000400:	3318      	adds	r3, #24
 8000402:	443b      	add	r3, r7
 8000404:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8000408:	4618      	mov	r0, r3
 800040a:	f7ff ff39 	bl	8000280 <ShiftingOut>
	ShiftingOut(ledcode[ch3]);
 800040e:	7d7b      	ldrb	r3, [r7, #21]
 8000410:	3318      	adds	r3, #24
 8000412:	443b      	add	r3, r7
 8000414:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8000418:	4618      	mov	r0, r3
 800041a:	f7ff ff31 	bl	8000280 <ShiftingOut>
	ShiftingOut(ledcode[ch4]);
 800041e:	7dbb      	ldrb	r3, [r7, #22]
 8000420:	3318      	adds	r3, #24
 8000422:	443b      	add	r3, r7
 8000424:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8000428:	4618      	mov	r0, r3
 800042a:	f7ff ff29 	bl	8000280 <ShiftingOut>
	ShiftingOut(ledcode[ch5]);
 800042e:	7dfb      	ldrb	r3, [r7, #23]
 8000430:	3318      	adds	r3, #24
 8000432:	443b      	add	r3, r7
 8000434:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8000438:	4618      	mov	r0, r3
 800043a:	f7ff ff21 	bl	8000280 <ShiftingOut>
	ShiftingLatch();
 800043e:	f7ff ff0b 	bl	8000258 <ShiftingLatch>
}
 8000442:	bf00      	nop
 8000444:	3718      	adds	r7, #24
 8000446:	46bd      	mov	sp, r7
 8000448:	bd80      	pop	{r7, pc}
 800044a:	bf00      	nop
 800044c:	08003bb8 	.word	0x08003bb8
 8000450:	40010c00 	.word	0x40010c00
 8000454:	14f8b589 	.word	0x14f8b589
 8000458:	66666667 	.word	0x66666667
 800045c:	000186a0 	.word	0x000186a0
 8000460:	68db8bad 	.word	0x68db8bad
 8000464:	d1b71759 	.word	0xd1b71759
 8000468:	10624dd3 	.word	0x10624dd3
 800046c:	51eb851f 	.word	0x51eb851f
 8000470:	cccccccd 	.word	0xcccccccd

08000474 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000474:	b480      	push	{r7}
 8000476:	b085      	sub	sp, #20
 8000478:	af00      	add	r7, sp, #0
 800047a:	60f8      	str	r0, [r7, #12]
 800047c:	60b9      	str	r1, [r7, #8]
 800047e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000480:	68fb      	ldr	r3, [r7, #12]
 8000482:	4a06      	ldr	r2, [pc, #24]	@ (800049c <vApplicationGetIdleTaskMemory+0x28>)
 8000484:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000486:	68bb      	ldr	r3, [r7, #8]
 8000488:	4a05      	ldr	r2, [pc, #20]	@ (80004a0 <vApplicationGetIdleTaskMemory+0x2c>)
 800048a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	2280      	movs	r2, #128	@ 0x80
 8000490:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000492:	bf00      	nop
 8000494:	3714      	adds	r7, #20
 8000496:	46bd      	mov	sp, r7
 8000498:	bc80      	pop	{r7}
 800049a:	4770      	bx	lr
 800049c:	2000002c 	.word	0x2000002c
 80004a0:	20000080 	.word	0x20000080

080004a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004a4:	b5b0      	push	{r4, r5, r7, lr}
 80004a6:	b08e      	sub	sp, #56	@ 0x38
 80004a8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004aa:	f000 fa65 	bl	8000978 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004ae:	f000 f837 	bl	8000520 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004b2:	f000 f8f3 	bl	800069c <MX_GPIO_Init>
  MX_DMA_Init();
 80004b6:	f000 f8d3 	bl	8000660 <MX_DMA_Init>
  MX_ADC1_Init();
 80004ba:	f000 f883 	bl	80005c4 <MX_ADC1_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of ADC_Task */
  osThreadDef(ADC_Task, StartDefaultTask, osPriorityNormal, 0, 128);
 80004be:	4b14      	ldr	r3, [pc, #80]	@ (8000510 <main+0x6c>)
 80004c0:	f107 041c 	add.w	r4, r7, #28
 80004c4:	461d      	mov	r5, r3
 80004c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80004c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80004ca:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80004ce:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ADC_TaskHandle = osThreadCreate(osThread(ADC_Task), NULL);
 80004d2:	f107 031c 	add.w	r3, r7, #28
 80004d6:	2100      	movs	r1, #0
 80004d8:	4618      	mov	r0, r3
 80004da:	f002 f939 	bl	8002750 <osThreadCreate>
 80004de:	4603      	mov	r3, r0
 80004e0:	4a0c      	ldr	r2, [pc, #48]	@ (8000514 <main+0x70>)
 80004e2:	6013      	str	r3, [r2, #0]

  /* definition and creation of Display_Task */
  osThreadDef(Display_Task, StartTask02, osPriorityNormal, 0, 128);
 80004e4:	4b0c      	ldr	r3, [pc, #48]	@ (8000518 <main+0x74>)
 80004e6:	463c      	mov	r4, r7
 80004e8:	461d      	mov	r5, r3
 80004ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80004ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80004ee:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80004f2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Display_TaskHandle = osThreadCreate(osThread(Display_Task), NULL);
 80004f6:	463b      	mov	r3, r7
 80004f8:	2100      	movs	r1, #0
 80004fa:	4618      	mov	r0, r3
 80004fc:	f002 f928 	bl	8002750 <osThreadCreate>
 8000500:	4603      	mov	r3, r0
 8000502:	4a06      	ldr	r2, [pc, #24]	@ (800051c <main+0x78>)
 8000504:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000506:	f002 f91c 	bl	8002742 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800050a:	bf00      	nop
 800050c:	e7fd      	b.n	800050a <main+0x66>
 800050e:	bf00      	nop
 8000510:	08003bd0 	.word	0x08003bd0
 8000514:	200002f4 	.word	0x200002f4
 8000518:	08003bfc 	.word	0x08003bfc
 800051c:	200002f8 	.word	0x200002f8

08000520 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b096      	sub	sp, #88	@ 0x58
 8000524:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000526:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800052a:	2228      	movs	r2, #40	@ 0x28
 800052c:	2100      	movs	r1, #0
 800052e:	4618      	mov	r0, r3
 8000530:	f003 fb0a 	bl	8003b48 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000534:	f107 031c 	add.w	r3, r7, #28
 8000538:	2200      	movs	r2, #0
 800053a:	601a      	str	r2, [r3, #0]
 800053c:	605a      	str	r2, [r3, #4]
 800053e:	609a      	str	r2, [r3, #8]
 8000540:	60da      	str	r2, [r3, #12]
 8000542:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000544:	1d3b      	adds	r3, r7, #4
 8000546:	2200      	movs	r2, #0
 8000548:	601a      	str	r2, [r3, #0]
 800054a:	605a      	str	r2, [r3, #4]
 800054c:	609a      	str	r2, [r3, #8]
 800054e:	60da      	str	r2, [r3, #12]
 8000550:	611a      	str	r2, [r3, #16]
 8000552:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000554:	2302      	movs	r3, #2
 8000556:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000558:	2301      	movs	r3, #1
 800055a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800055c:	2310      	movs	r3, #16
 800055e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000560:	2300      	movs	r3, #0
 8000562:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000564:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000568:	4618      	mov	r0, r3
 800056a:	f001 fc3f 	bl	8001dec <HAL_RCC_OscConfig>
 800056e:	4603      	mov	r3, r0
 8000570:	2b00      	cmp	r3, #0
 8000572:	d001      	beq.n	8000578 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000574:	f000 f8fa 	bl	800076c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000578:	230f      	movs	r3, #15
 800057a:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800057c:	2300      	movs	r3, #0
 800057e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000580:	2300      	movs	r3, #0
 8000582:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000584:	2300      	movs	r3, #0
 8000586:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000588:	2300      	movs	r3, #0
 800058a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800058c:	f107 031c 	add.w	r3, r7, #28
 8000590:	2100      	movs	r1, #0
 8000592:	4618      	mov	r0, r3
 8000594:	f001 feac 	bl	80022f0 <HAL_RCC_ClockConfig>
 8000598:	4603      	mov	r3, r0
 800059a:	2b00      	cmp	r3, #0
 800059c:	d001      	beq.n	80005a2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800059e:	f000 f8e5 	bl	800076c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80005a2:	2302      	movs	r3, #2
 80005a4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 80005a6:	2300      	movs	r3, #0
 80005a8:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005aa:	1d3b      	adds	r3, r7, #4
 80005ac:	4618      	mov	r0, r3
 80005ae:	f001 fffb 	bl	80025a8 <HAL_RCCEx_PeriphCLKConfig>
 80005b2:	4603      	mov	r3, r0
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d001      	beq.n	80005bc <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80005b8:	f000 f8d8 	bl	800076c <Error_Handler>
  }
}
 80005bc:	bf00      	nop
 80005be:	3758      	adds	r7, #88	@ 0x58
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bd80      	pop	{r7, pc}

080005c4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b084      	sub	sp, #16
 80005c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005ca:	1d3b      	adds	r3, r7, #4
 80005cc:	2200      	movs	r2, #0
 80005ce:	601a      	str	r2, [r3, #0]
 80005d0:	605a      	str	r2, [r3, #4]
 80005d2:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80005d4:	4b20      	ldr	r3, [pc, #128]	@ (8000658 <MX_ADC1_Init+0x94>)
 80005d6:	4a21      	ldr	r2, [pc, #132]	@ (800065c <MX_ADC1_Init+0x98>)
 80005d8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80005da:	4b1f      	ldr	r3, [pc, #124]	@ (8000658 <MX_ADC1_Init+0x94>)
 80005dc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80005e0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80005e2:	4b1d      	ldr	r3, [pc, #116]	@ (8000658 <MX_ADC1_Init+0x94>)
 80005e4:	2201      	movs	r2, #1
 80005e6:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005e8:	4b1b      	ldr	r3, [pc, #108]	@ (8000658 <MX_ADC1_Init+0x94>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005ee:	4b1a      	ldr	r3, [pc, #104]	@ (8000658 <MX_ADC1_Init+0x94>)
 80005f0:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 80005f4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005f6:	4b18      	ldr	r3, [pc, #96]	@ (8000658 <MX_ADC1_Init+0x94>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 2;
 80005fc:	4b16      	ldr	r3, [pc, #88]	@ (8000658 <MX_ADC1_Init+0x94>)
 80005fe:	2202      	movs	r2, #2
 8000600:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000602:	4815      	ldr	r0, [pc, #84]	@ (8000658 <MX_ADC1_Init+0x94>)
 8000604:	f000 fa1a 	bl	8000a3c <HAL_ADC_Init>
 8000608:	4603      	mov	r3, r0
 800060a:	2b00      	cmp	r3, #0
 800060c:	d001      	beq.n	8000612 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 800060e:	f000 f8ad 	bl	800076c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000612:	2308      	movs	r3, #8
 8000614:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000616:	2301      	movs	r3, #1
 8000618:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800061a:	2300      	movs	r3, #0
 800061c:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800061e:	1d3b      	adds	r3, r7, #4
 8000620:	4619      	mov	r1, r3
 8000622:	480d      	ldr	r0, [pc, #52]	@ (8000658 <MX_ADC1_Init+0x94>)
 8000624:	f000 fbee 	bl	8000e04 <HAL_ADC_ConfigChannel>
 8000628:	4603      	mov	r3, r0
 800062a:	2b00      	cmp	r3, #0
 800062c:	d001      	beq.n	8000632 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800062e:	f000 f89d 	bl	800076c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000632:	2309      	movs	r3, #9
 8000634:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000636:	2302      	movs	r3, #2
 8000638:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800063a:	1d3b      	adds	r3, r7, #4
 800063c:	4619      	mov	r1, r3
 800063e:	4806      	ldr	r0, [pc, #24]	@ (8000658 <MX_ADC1_Init+0x94>)
 8000640:	f000 fbe0 	bl	8000e04 <HAL_ADC_ConfigChannel>
 8000644:	4603      	mov	r3, r0
 8000646:	2b00      	cmp	r3, #0
 8000648:	d001      	beq.n	800064e <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 800064a:	f000 f88f 	bl	800076c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800064e:	bf00      	nop
 8000650:	3710      	adds	r7, #16
 8000652:	46bd      	mov	sp, r7
 8000654:	bd80      	pop	{r7, pc}
 8000656:	bf00      	nop
 8000658:	20000280 	.word	0x20000280
 800065c:	40012400 	.word	0x40012400

08000660 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b082      	sub	sp, #8
 8000664:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000666:	4b0c      	ldr	r3, [pc, #48]	@ (8000698 <MX_DMA_Init+0x38>)
 8000668:	695b      	ldr	r3, [r3, #20]
 800066a:	4a0b      	ldr	r2, [pc, #44]	@ (8000698 <MX_DMA_Init+0x38>)
 800066c:	f043 0301 	orr.w	r3, r3, #1
 8000670:	6153      	str	r3, [r2, #20]
 8000672:	4b09      	ldr	r3, [pc, #36]	@ (8000698 <MX_DMA_Init+0x38>)
 8000674:	695b      	ldr	r3, [r3, #20]
 8000676:	f003 0301 	and.w	r3, r3, #1
 800067a:	607b      	str	r3, [r7, #4]
 800067c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 800067e:	2200      	movs	r2, #0
 8000680:	2105      	movs	r1, #5
 8000682:	200b      	movs	r0, #11
 8000684:	f000 fe8f 	bl	80013a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000688:	200b      	movs	r0, #11
 800068a:	f000 fea8 	bl	80013de <HAL_NVIC_EnableIRQ>

}
 800068e:	bf00      	nop
 8000690:	3708      	adds	r7, #8
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	40021000 	.word	0x40021000

0800069c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b086      	sub	sp, #24
 80006a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006a2:	f107 0308 	add.w	r3, r7, #8
 80006a6:	2200      	movs	r2, #0
 80006a8:	601a      	str	r2, [r3, #0]
 80006aa:	605a      	str	r2, [r3, #4]
 80006ac:	609a      	str	r2, [r3, #8]
 80006ae:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006b0:	4b18      	ldr	r3, [pc, #96]	@ (8000714 <MX_GPIO_Init+0x78>)
 80006b2:	699b      	ldr	r3, [r3, #24]
 80006b4:	4a17      	ldr	r2, [pc, #92]	@ (8000714 <MX_GPIO_Init+0x78>)
 80006b6:	f043 0308 	orr.w	r3, r3, #8
 80006ba:	6193      	str	r3, [r2, #24]
 80006bc:	4b15      	ldr	r3, [pc, #84]	@ (8000714 <MX_GPIO_Init+0x78>)
 80006be:	699b      	ldr	r3, [r3, #24]
 80006c0:	f003 0308 	and.w	r3, r3, #8
 80006c4:	607b      	str	r3, [r7, #4]
 80006c6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006c8:	4b12      	ldr	r3, [pc, #72]	@ (8000714 <MX_GPIO_Init+0x78>)
 80006ca:	699b      	ldr	r3, [r3, #24]
 80006cc:	4a11      	ldr	r2, [pc, #68]	@ (8000714 <MX_GPIO_Init+0x78>)
 80006ce:	f043 0304 	orr.w	r3, r3, #4
 80006d2:	6193      	str	r3, [r2, #24]
 80006d4:	4b0f      	ldr	r3, [pc, #60]	@ (8000714 <MX_GPIO_Init+0x78>)
 80006d6:	699b      	ldr	r3, [r3, #24]
 80006d8:	f003 0304 	and.w	r3, r3, #4
 80006dc:	603b      	str	r3, [r7, #0]
 80006de:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 80006e0:	2200      	movs	r2, #0
 80006e2:	f44f 7140 	mov.w	r1, #768	@ 0x300
 80006e6:	480c      	ldr	r0, [pc, #48]	@ (8000718 <MX_GPIO_Init+0x7c>)
 80006e8:	f001 fb68 	bl	8001dbc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80006ec:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80006f0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006f2:	2301      	movs	r3, #1
 80006f4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f6:	2300      	movs	r3, #0
 80006f8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006fa:	2302      	movs	r3, #2
 80006fc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006fe:	f107 0308 	add.w	r3, r7, #8
 8000702:	4619      	mov	r1, r3
 8000704:	4804      	ldr	r0, [pc, #16]	@ (8000718 <MX_GPIO_Init+0x7c>)
 8000706:	f001 f9c5 	bl	8001a94 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800070a:	bf00      	nop
 800070c:	3718      	adds	r7, #24
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	40021000 	.word	0x40021000
 8000718:	40010c00 	.word	0x40010c00

0800071c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b082      	sub	sp, #8
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */

	  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buf, 2);  // <-- thêm dòng này
 8000724:	2202      	movs	r2, #2
 8000726:	4906      	ldr	r1, [pc, #24]	@ (8000740 <StartDefaultTask+0x24>)
 8000728:	4806      	ldr	r0, [pc, #24]	@ (8000744 <StartDefaultTask+0x28>)
 800072a:	f000 fa71 	bl	8000c10 <HAL_ADC_Start_DMA>
  /* Infinite loop */
  for(;;)
  {
	  display_value = adc_buf[0]; // giá trị 0–4095
 800072e:	4b04      	ldr	r3, [pc, #16]	@ (8000740 <StartDefaultTask+0x24>)
 8000730:	881a      	ldrh	r2, [r3, #0]
 8000732:	4b05      	ldr	r3, [pc, #20]	@ (8000748 <StartDefaultTask+0x2c>)
 8000734:	801a      	strh	r2, [r3, #0]
	     osDelay(50);
 8000736:	2032      	movs	r0, #50	@ 0x32
 8000738:	f002 f856 	bl	80027e8 <osDelay>
	  display_value = adc_buf[0]; // giá trị 0–4095
 800073c:	bf00      	nop
 800073e:	e7f6      	b.n	800072e <StartDefaultTask+0x12>
 8000740:	200002fc 	.word	0x200002fc
 8000744:	20000280 	.word	0x20000280
 8000748:	200002fe 	.word	0x200002fe

0800074c <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b082      	sub	sp, #8
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
	  Display_7_SEG(display_value);  // Gọi hàm của mày
 8000754:	4b04      	ldr	r3, [pc, #16]	@ (8000768 <StartTask02+0x1c>)
 8000756:	881b      	ldrh	r3, [r3, #0]
 8000758:	4618      	mov	r0, r3
 800075a:	f7ff fdcb 	bl	80002f4 <Display_7_SEG>
	      osDelay(5);
 800075e:	2005      	movs	r0, #5
 8000760:	f002 f842 	bl	80027e8 <osDelay>
	  Display_7_SEG(display_value);  // Gọi hàm của mày
 8000764:	bf00      	nop
 8000766:	e7f5      	b.n	8000754 <StartTask02+0x8>
 8000768:	200002fe 	.word	0x200002fe

0800076c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800076c:	b480      	push	{r7}
 800076e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000770:	b672      	cpsid	i
}
 8000772:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000774:	bf00      	nop
 8000776:	e7fd      	b.n	8000774 <Error_Handler+0x8>

08000778 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b084      	sub	sp, #16
 800077c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800077e:	4b18      	ldr	r3, [pc, #96]	@ (80007e0 <HAL_MspInit+0x68>)
 8000780:	699b      	ldr	r3, [r3, #24]
 8000782:	4a17      	ldr	r2, [pc, #92]	@ (80007e0 <HAL_MspInit+0x68>)
 8000784:	f043 0301 	orr.w	r3, r3, #1
 8000788:	6193      	str	r3, [r2, #24]
 800078a:	4b15      	ldr	r3, [pc, #84]	@ (80007e0 <HAL_MspInit+0x68>)
 800078c:	699b      	ldr	r3, [r3, #24]
 800078e:	f003 0301 	and.w	r3, r3, #1
 8000792:	60bb      	str	r3, [r7, #8]
 8000794:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000796:	4b12      	ldr	r3, [pc, #72]	@ (80007e0 <HAL_MspInit+0x68>)
 8000798:	69db      	ldr	r3, [r3, #28]
 800079a:	4a11      	ldr	r2, [pc, #68]	@ (80007e0 <HAL_MspInit+0x68>)
 800079c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007a0:	61d3      	str	r3, [r2, #28]
 80007a2:	4b0f      	ldr	r3, [pc, #60]	@ (80007e0 <HAL_MspInit+0x68>)
 80007a4:	69db      	ldr	r3, [r3, #28]
 80007a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007aa:	607b      	str	r3, [r7, #4]
 80007ac:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80007ae:	2200      	movs	r2, #0
 80007b0:	210f      	movs	r1, #15
 80007b2:	f06f 0001 	mvn.w	r0, #1
 80007b6:	f000 fdf6 	bl	80013a6 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80007ba:	4b0a      	ldr	r3, [pc, #40]	@ (80007e4 <HAL_MspInit+0x6c>)
 80007bc:	685b      	ldr	r3, [r3, #4]
 80007be:	60fb      	str	r3, [r7, #12]
 80007c0:	68fb      	ldr	r3, [r7, #12]
 80007c2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80007c6:	60fb      	str	r3, [r7, #12]
 80007c8:	68fb      	ldr	r3, [r7, #12]
 80007ca:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80007ce:	60fb      	str	r3, [r7, #12]
 80007d0:	4a04      	ldr	r2, [pc, #16]	@ (80007e4 <HAL_MspInit+0x6c>)
 80007d2:	68fb      	ldr	r3, [r7, #12]
 80007d4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007d6:	bf00      	nop
 80007d8:	3710      	adds	r7, #16
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	40021000 	.word	0x40021000
 80007e4:	40010000 	.word	0x40010000

080007e8 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b088      	sub	sp, #32
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007f0:	f107 0310 	add.w	r3, r7, #16
 80007f4:	2200      	movs	r2, #0
 80007f6:	601a      	str	r2, [r3, #0]
 80007f8:	605a      	str	r2, [r3, #4]
 80007fa:	609a      	str	r2, [r3, #8]
 80007fc:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	4a29      	ldr	r2, [pc, #164]	@ (80008a8 <HAL_ADC_MspInit+0xc0>)
 8000804:	4293      	cmp	r3, r2
 8000806:	d14a      	bne.n	800089e <HAL_ADC_MspInit+0xb6>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000808:	4b28      	ldr	r3, [pc, #160]	@ (80008ac <HAL_ADC_MspInit+0xc4>)
 800080a:	699b      	ldr	r3, [r3, #24]
 800080c:	4a27      	ldr	r2, [pc, #156]	@ (80008ac <HAL_ADC_MspInit+0xc4>)
 800080e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000812:	6193      	str	r3, [r2, #24]
 8000814:	4b25      	ldr	r3, [pc, #148]	@ (80008ac <HAL_ADC_MspInit+0xc4>)
 8000816:	699b      	ldr	r3, [r3, #24]
 8000818:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800081c:	60fb      	str	r3, [r7, #12]
 800081e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000820:	4b22      	ldr	r3, [pc, #136]	@ (80008ac <HAL_ADC_MspInit+0xc4>)
 8000822:	699b      	ldr	r3, [r3, #24]
 8000824:	4a21      	ldr	r2, [pc, #132]	@ (80008ac <HAL_ADC_MspInit+0xc4>)
 8000826:	f043 0308 	orr.w	r3, r3, #8
 800082a:	6193      	str	r3, [r2, #24]
 800082c:	4b1f      	ldr	r3, [pc, #124]	@ (80008ac <HAL_ADC_MspInit+0xc4>)
 800082e:	699b      	ldr	r3, [r3, #24]
 8000830:	f003 0308 	and.w	r3, r3, #8
 8000834:	60bb      	str	r3, [r7, #8]
 8000836:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000838:	2303      	movs	r3, #3
 800083a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800083c:	2303      	movs	r3, #3
 800083e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000840:	f107 0310 	add.w	r3, r7, #16
 8000844:	4619      	mov	r1, r3
 8000846:	481a      	ldr	r0, [pc, #104]	@ (80008b0 <HAL_ADC_MspInit+0xc8>)
 8000848:	f001 f924 	bl	8001a94 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800084c:	4b19      	ldr	r3, [pc, #100]	@ (80008b4 <HAL_ADC_MspInit+0xcc>)
 800084e:	4a1a      	ldr	r2, [pc, #104]	@ (80008b8 <HAL_ADC_MspInit+0xd0>)
 8000850:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000852:	4b18      	ldr	r3, [pc, #96]	@ (80008b4 <HAL_ADC_MspInit+0xcc>)
 8000854:	2200      	movs	r2, #0
 8000856:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000858:	4b16      	ldr	r3, [pc, #88]	@ (80008b4 <HAL_ADC_MspInit+0xcc>)
 800085a:	2200      	movs	r2, #0
 800085c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800085e:	4b15      	ldr	r3, [pc, #84]	@ (80008b4 <HAL_ADC_MspInit+0xcc>)
 8000860:	2280      	movs	r2, #128	@ 0x80
 8000862:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000864:	4b13      	ldr	r3, [pc, #76]	@ (80008b4 <HAL_ADC_MspInit+0xcc>)
 8000866:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800086a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800086c:	4b11      	ldr	r3, [pc, #68]	@ (80008b4 <HAL_ADC_MspInit+0xcc>)
 800086e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000872:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000874:	4b0f      	ldr	r3, [pc, #60]	@ (80008b4 <HAL_ADC_MspInit+0xcc>)
 8000876:	2220      	movs	r2, #32
 8000878:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 800087a:	4b0e      	ldr	r3, [pc, #56]	@ (80008b4 <HAL_ADC_MspInit+0xcc>)
 800087c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000880:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000882:	480c      	ldr	r0, [pc, #48]	@ (80008b4 <HAL_ADC_MspInit+0xcc>)
 8000884:	f000 fdc6 	bl	8001414 <HAL_DMA_Init>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d001      	beq.n	8000892 <HAL_ADC_MspInit+0xaa>
    {
      Error_Handler();
 800088e:	f7ff ff6d 	bl	800076c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	4a07      	ldr	r2, [pc, #28]	@ (80008b4 <HAL_ADC_MspInit+0xcc>)
 8000896:	621a      	str	r2, [r3, #32]
 8000898:	4a06      	ldr	r2, [pc, #24]	@ (80008b4 <HAL_ADC_MspInit+0xcc>)
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 800089e:	bf00      	nop
 80008a0:	3720      	adds	r7, #32
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	40012400 	.word	0x40012400
 80008ac:	40021000 	.word	0x40021000
 80008b0:	40010c00 	.word	0x40010c00
 80008b4:	200002b0 	.word	0x200002b0
 80008b8:	40020008 	.word	0x40020008

080008bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008c0:	bf00      	nop
 80008c2:	e7fd      	b.n	80008c0 <NMI_Handler+0x4>

080008c4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008c8:	bf00      	nop
 80008ca:	e7fd      	b.n	80008c8 <HardFault_Handler+0x4>

080008cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008cc:	b480      	push	{r7}
 80008ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008d0:	bf00      	nop
 80008d2:	e7fd      	b.n	80008d0 <MemManage_Handler+0x4>

080008d4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008d8:	bf00      	nop
 80008da:	e7fd      	b.n	80008d8 <BusFault_Handler+0x4>

080008dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008e0:	bf00      	nop
 80008e2:	e7fd      	b.n	80008e0 <UsageFault_Handler+0x4>

080008e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008e8:	bf00      	nop
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bc80      	pop	{r7}
 80008ee:	4770      	bx	lr

080008f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008f4:	f000 f886 	bl	8000a04 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80008f8:	f002 fd00 	bl	80032fc <xTaskGetSchedulerState>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b01      	cmp	r3, #1
 8000900:	d001      	beq.n	8000906 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000902:	f002 fef1 	bl	80036e8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000906:	bf00      	nop
 8000908:	bd80      	pop	{r7, pc}
	...

0800090c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000910:	4802      	ldr	r0, [pc, #8]	@ (800091c <DMA1_Channel1_IRQHandler+0x10>)
 8000912:	f000 fe55 	bl	80015c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000916:	bf00      	nop
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	200002b0 	.word	0x200002b0

08000920 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000924:	bf00      	nop
 8000926:	46bd      	mov	sp, r7
 8000928:	bc80      	pop	{r7}
 800092a:	4770      	bx	lr

0800092c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800092c:	f7ff fff8 	bl	8000920 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000930:	480b      	ldr	r0, [pc, #44]	@ (8000960 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000932:	490c      	ldr	r1, [pc, #48]	@ (8000964 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000934:	4a0c      	ldr	r2, [pc, #48]	@ (8000968 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000936:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000938:	e002      	b.n	8000940 <LoopCopyDataInit>

0800093a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800093a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800093c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800093e:	3304      	adds	r3, #4

08000940 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000940:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000942:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000944:	d3f9      	bcc.n	800093a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000946:	4a09      	ldr	r2, [pc, #36]	@ (800096c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000948:	4c09      	ldr	r4, [pc, #36]	@ (8000970 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800094a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800094c:	e001      	b.n	8000952 <LoopFillZerobss>

0800094e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800094e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000950:	3204      	adds	r2, #4

08000952 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000952:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000954:	d3fb      	bcc.n	800094e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000956:	f003 f8ff 	bl	8003b58 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800095a:	f7ff fda3 	bl	80004a4 <main>
  bx lr
 800095e:	4770      	bx	lr
  ldr r0, =_sdata
 8000960:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000964:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000968:	08003c4c 	.word	0x08003c4c
  ldr r2, =_sbss
 800096c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000970:	20001058 	.word	0x20001058

08000974 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000974:	e7fe      	b.n	8000974 <ADC1_2_IRQHandler>
	...

08000978 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800097c:	4b08      	ldr	r3, [pc, #32]	@ (80009a0 <HAL_Init+0x28>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	4a07      	ldr	r2, [pc, #28]	@ (80009a0 <HAL_Init+0x28>)
 8000982:	f043 0310 	orr.w	r3, r3, #16
 8000986:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000988:	2003      	movs	r0, #3
 800098a:	f000 fd01 	bl	8001390 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800098e:	200f      	movs	r0, #15
 8000990:	f000 f808 	bl	80009a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000994:	f7ff fef0 	bl	8000778 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000998:	2300      	movs	r3, #0
}
 800099a:	4618      	mov	r0, r3
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	40022000 	.word	0x40022000

080009a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b082      	sub	sp, #8
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009ac:	4b12      	ldr	r3, [pc, #72]	@ (80009f8 <HAL_InitTick+0x54>)
 80009ae:	681a      	ldr	r2, [r3, #0]
 80009b0:	4b12      	ldr	r3, [pc, #72]	@ (80009fc <HAL_InitTick+0x58>)
 80009b2:	781b      	ldrb	r3, [r3, #0]
 80009b4:	4619      	mov	r1, r3
 80009b6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80009ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80009be:	fbb2 f3f3 	udiv	r3, r2, r3
 80009c2:	4618      	mov	r0, r3
 80009c4:	f000 fd19 	bl	80013fa <HAL_SYSTICK_Config>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d001      	beq.n	80009d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009ce:	2301      	movs	r3, #1
 80009d0:	e00e      	b.n	80009f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	2b0f      	cmp	r3, #15
 80009d6:	d80a      	bhi.n	80009ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009d8:	2200      	movs	r2, #0
 80009da:	6879      	ldr	r1, [r7, #4]
 80009dc:	f04f 30ff 	mov.w	r0, #4294967295
 80009e0:	f000 fce1 	bl	80013a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009e4:	4a06      	ldr	r2, [pc, #24]	@ (8000a00 <HAL_InitTick+0x5c>)
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009ea:	2300      	movs	r3, #0
 80009ec:	e000      	b.n	80009f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009ee:	2301      	movs	r3, #1
}
 80009f0:	4618      	mov	r0, r3
 80009f2:	3708      	adds	r7, #8
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bd80      	pop	{r7, pc}
 80009f8:	20000000 	.word	0x20000000
 80009fc:	20000008 	.word	0x20000008
 8000a00:	20000004 	.word	0x20000004

08000a04 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a08:	4b05      	ldr	r3, [pc, #20]	@ (8000a20 <HAL_IncTick+0x1c>)
 8000a0a:	781b      	ldrb	r3, [r3, #0]
 8000a0c:	461a      	mov	r2, r3
 8000a0e:	4b05      	ldr	r3, [pc, #20]	@ (8000a24 <HAL_IncTick+0x20>)
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	4413      	add	r3, r2
 8000a14:	4a03      	ldr	r2, [pc, #12]	@ (8000a24 <HAL_IncTick+0x20>)
 8000a16:	6013      	str	r3, [r2, #0]
}
 8000a18:	bf00      	nop
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bc80      	pop	{r7}
 8000a1e:	4770      	bx	lr
 8000a20:	20000008 	.word	0x20000008
 8000a24:	20000300 	.word	0x20000300

08000a28 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0
  return uwTick;
 8000a2c:	4b02      	ldr	r3, [pc, #8]	@ (8000a38 <HAL_GetTick+0x10>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
}
 8000a30:	4618      	mov	r0, r3
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bc80      	pop	{r7}
 8000a36:	4770      	bx	lr
 8000a38:	20000300 	.word	0x20000300

08000a3c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b086      	sub	sp, #24
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000a44:	2300      	movs	r3, #0
 8000a46:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000a50:	2300      	movs	r3, #0
 8000a52:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d101      	bne.n	8000a5e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000a5a:	2301      	movs	r3, #1
 8000a5c:	e0ce      	b.n	8000bfc <HAL_ADC_Init+0x1c0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	689b      	ldr	r3, [r3, #8]
 8000a62:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d109      	bne.n	8000a80 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	2200      	movs	r2, #0
 8000a70:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	2200      	movs	r2, #0
 8000a76:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000a7a:	6878      	ldr	r0, [r7, #4]
 8000a7c:	f7ff feb4 	bl	80007e8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000a80:	6878      	ldr	r0, [r7, #4]
 8000a82:	f000 fb11 	bl	80010a8 <ADC_ConversionStop_Disable>
 8000a86:	4603      	mov	r3, r0
 8000a88:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000a8e:	f003 0310 	and.w	r3, r3, #16
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	f040 80a9 	bne.w	8000bea <HAL_ADC_Init+0x1ae>
 8000a98:	7dfb      	ldrb	r3, [r7, #23]
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	f040 80a5 	bne.w	8000bea <HAL_ADC_Init+0x1ae>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000aa4:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000aa8:	f023 0302 	bic.w	r3, r3, #2
 8000aac:	f043 0202 	orr.w	r2, r3, #2
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	4951      	ldr	r1, [pc, #324]	@ (8000c04 <HAL_ADC_Init+0x1c8>)
 8000abe:	428b      	cmp	r3, r1
 8000ac0:	d10a      	bne.n	8000ad8 <HAL_ADC_Init+0x9c>
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	69db      	ldr	r3, [r3, #28]
 8000ac6:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8000aca:	d002      	beq.n	8000ad2 <HAL_ADC_Init+0x96>
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	69db      	ldr	r3, [r3, #28]
 8000ad0:	e004      	b.n	8000adc <HAL_ADC_Init+0xa0>
 8000ad2:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8000ad6:	e001      	b.n	8000adc <HAL_ADC_Init+0xa0>
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000adc:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	7b1b      	ldrb	r3, [r3, #12]
 8000ae2:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000ae4:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000ae6:	68ba      	ldr	r2, [r7, #8]
 8000ae8:	4313      	orrs	r3, r2
 8000aea:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	689b      	ldr	r3, [r3, #8]
 8000af0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000af4:	d003      	beq.n	8000afe <HAL_ADC_Init+0xc2>
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	689b      	ldr	r3, [r3, #8]
 8000afa:	2b01      	cmp	r3, #1
 8000afc:	d102      	bne.n	8000b04 <HAL_ADC_Init+0xc8>
 8000afe:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000b02:	e000      	b.n	8000b06 <HAL_ADC_Init+0xca>
 8000b04:	2300      	movs	r3, #0
 8000b06:	693a      	ldr	r2, [r7, #16]
 8000b08:	4313      	orrs	r3, r2
 8000b0a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	7d1b      	ldrb	r3, [r3, #20]
 8000b10:	2b01      	cmp	r3, #1
 8000b12:	d119      	bne.n	8000b48 <HAL_ADC_Init+0x10c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	7b1b      	ldrb	r3, [r3, #12]
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d109      	bne.n	8000b30 <HAL_ADC_Init+0xf4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	699b      	ldr	r3, [r3, #24]
 8000b20:	3b01      	subs	r3, #1
 8000b22:	035a      	lsls	r2, r3, #13
 8000b24:	693b      	ldr	r3, [r7, #16]
 8000b26:	4313      	orrs	r3, r2
 8000b28:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000b2c:	613b      	str	r3, [r7, #16]
 8000b2e:	e00b      	b.n	8000b48 <HAL_ADC_Init+0x10c>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000b34:	f043 0220 	orr.w	r2, r3, #32
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000b40:	f043 0201 	orr.w	r2, r3, #1
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	685b      	ldr	r3, [r3, #4]
 8000b4e:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	693a      	ldr	r2, [r7, #16]
 8000b58:	430a      	orrs	r2, r1
 8000b5a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	689a      	ldr	r2, [r3, #8]
 8000b62:	4b29      	ldr	r3, [pc, #164]	@ (8000c08 <HAL_ADC_Init+0x1cc>)
 8000b64:	4013      	ands	r3, r2
 8000b66:	687a      	ldr	r2, [r7, #4]
 8000b68:	6812      	ldr	r2, [r2, #0]
 8000b6a:	68b9      	ldr	r1, [r7, #8]
 8000b6c:	430b      	orrs	r3, r1
 8000b6e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	689b      	ldr	r3, [r3, #8]
 8000b74:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000b78:	d003      	beq.n	8000b82 <HAL_ADC_Init+0x146>
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	689b      	ldr	r3, [r3, #8]
 8000b7e:	2b01      	cmp	r3, #1
 8000b80:	d104      	bne.n	8000b8c <HAL_ADC_Init+0x150>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	691b      	ldr	r3, [r3, #16]
 8000b86:	3b01      	subs	r3, #1
 8000b88:	051b      	lsls	r3, r3, #20
 8000b8a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000b92:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	68fa      	ldr	r2, [r7, #12]
 8000b9c:	430a      	orrs	r2, r1
 8000b9e:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	689a      	ldr	r2, [r3, #8]
 8000ba6:	4b19      	ldr	r3, [pc, #100]	@ (8000c0c <HAL_ADC_Init+0x1d0>)
 8000ba8:	4013      	ands	r3, r2
 8000baa:	68ba      	ldr	r2, [r7, #8]
 8000bac:	429a      	cmp	r2, r3
 8000bae:	d10b      	bne.n	8000bc8 <HAL_ADC_Init+0x18c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000bba:	f023 0303 	bic.w	r3, r3, #3
 8000bbe:	f043 0201 	orr.w	r2, r3, #1
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000bc6:	e018      	b.n	8000bfa <HAL_ADC_Init+0x1be>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000bcc:	f023 0312 	bic.w	r3, r3, #18
 8000bd0:	f043 0210 	orr.w	r2, r3, #16
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000bdc:	f043 0201 	orr.w	r2, r3, #1
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000be4:	2301      	movs	r3, #1
 8000be6:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000be8:	e007      	b.n	8000bfa <HAL_ADC_Init+0x1be>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000bee:	f043 0210 	orr.w	r2, r3, #16
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000bfa:	7dfb      	ldrb	r3, [r7, #23]
}
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	3718      	adds	r7, #24
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	40013c00 	.word	0x40013c00
 8000c08:	ffe1f7fd 	.word	0xffe1f7fd
 8000c0c:	ff1f0efe 	.word	0xff1f0efe

08000c10 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b086      	sub	sp, #24
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	60f8      	str	r0, [r7, #12]
 8000c18:	60b9      	str	r1, [r7, #8]
 8000c1a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	4a64      	ldr	r2, [pc, #400]	@ (8000db8 <HAL_ADC_Start_DMA+0x1a8>)
 8000c26:	4293      	cmp	r3, r2
 8000c28:	d004      	beq.n	8000c34 <HAL_ADC_Start_DMA+0x24>
 8000c2a:	68fb      	ldr	r3, [r7, #12]
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	4a63      	ldr	r2, [pc, #396]	@ (8000dbc <HAL_ADC_Start_DMA+0x1ac>)
 8000c30:	4293      	cmp	r3, r2
 8000c32:	d106      	bne.n	8000c42 <HAL_ADC_Start_DMA+0x32>
 8000c34:	4b60      	ldr	r3, [pc, #384]	@ (8000db8 <HAL_ADC_Start_DMA+0x1a8>)
 8000c36:	685b      	ldr	r3, [r3, #4]
 8000c38:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	f040 80b3 	bne.w	8000da8 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000c42:	68fb      	ldr	r3, [r7, #12]
 8000c44:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000c48:	2b01      	cmp	r3, #1
 8000c4a:	d101      	bne.n	8000c50 <HAL_ADC_Start_DMA+0x40>
 8000c4c:	2302      	movs	r3, #2
 8000c4e:	e0ae      	b.n	8000dae <HAL_ADC_Start_DMA+0x19e>
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	2201      	movs	r2, #1
 8000c54:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8000c58:	68f8      	ldr	r0, [r7, #12]
 8000c5a:	f000 f9cb 	bl	8000ff4 <ADC_Enable>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000c62:	7dfb      	ldrb	r3, [r7, #23]
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	f040 809a 	bne.w	8000d9e <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000c6a:	68fb      	ldr	r3, [r7, #12]
 8000c6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c6e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8000c72:	f023 0301 	bic.w	r3, r3, #1
 8000c76:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000c7a:	68fb      	ldr	r3, [r7, #12]
 8000c7c:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000c7e:	68fb      	ldr	r3, [r7, #12]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	4a4e      	ldr	r2, [pc, #312]	@ (8000dbc <HAL_ADC_Start_DMA+0x1ac>)
 8000c84:	4293      	cmp	r3, r2
 8000c86:	d105      	bne.n	8000c94 <HAL_ADC_Start_DMA+0x84>
 8000c88:	4b4b      	ldr	r3, [pc, #300]	@ (8000db8 <HAL_ADC_Start_DMA+0x1a8>)
 8000c8a:	685b      	ldr	r3, [r3, #4]
 8000c8c:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d115      	bne.n	8000cc0 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c98:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	685b      	ldr	r3, [r3, #4]
 8000ca6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d026      	beq.n	8000cfc <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000cae:	68fb      	ldr	r3, [r7, #12]
 8000cb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000cb2:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000cb6:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8000cba:	68fb      	ldr	r3, [r7, #12]
 8000cbc:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000cbe:	e01d      	b.n	8000cfc <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000cc4:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	4a39      	ldr	r2, [pc, #228]	@ (8000db8 <HAL_ADC_Start_DMA+0x1a8>)
 8000cd2:	4293      	cmp	r3, r2
 8000cd4:	d004      	beq.n	8000ce0 <HAL_ADC_Start_DMA+0xd0>
 8000cd6:	68fb      	ldr	r3, [r7, #12]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	4a38      	ldr	r2, [pc, #224]	@ (8000dbc <HAL_ADC_Start_DMA+0x1ac>)
 8000cdc:	4293      	cmp	r3, r2
 8000cde:	d10d      	bne.n	8000cfc <HAL_ADC_Start_DMA+0xec>
 8000ce0:	4b35      	ldr	r3, [pc, #212]	@ (8000db8 <HAL_ADC_Start_DMA+0x1a8>)
 8000ce2:	685b      	ldr	r3, [r3, #4]
 8000ce4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d007      	beq.n	8000cfc <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000cf0:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000cf4:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d00:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d006      	beq.n	8000d16 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d0c:	f023 0206 	bic.w	r2, r3, #6
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000d14:	e002      	b.n	8000d1c <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8000d16:	68fb      	ldr	r3, [r7, #12]
 8000d18:	2200      	movs	r2, #0
 8000d1a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	2200      	movs	r2, #0
 8000d20:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	6a1b      	ldr	r3, [r3, #32]
 8000d28:	4a25      	ldr	r2, [pc, #148]	@ (8000dc0 <HAL_ADC_Start_DMA+0x1b0>)
 8000d2a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	6a1b      	ldr	r3, [r3, #32]
 8000d30:	4a24      	ldr	r2, [pc, #144]	@ (8000dc4 <HAL_ADC_Start_DMA+0x1b4>)
 8000d32:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	6a1b      	ldr	r3, [r3, #32]
 8000d38:	4a23      	ldr	r2, [pc, #140]	@ (8000dc8 <HAL_ADC_Start_DMA+0x1b8>)
 8000d3a:	631a      	str	r2, [r3, #48]	@ 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	f06f 0202 	mvn.w	r2, #2
 8000d44:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8000d46:	68fb      	ldr	r3, [r7, #12]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	689a      	ldr	r2, [r3, #8]
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8000d54:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000d56:	68fb      	ldr	r3, [r7, #12]
 8000d58:	6a18      	ldr	r0, [r3, #32]
 8000d5a:	68fb      	ldr	r3, [r7, #12]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	334c      	adds	r3, #76	@ 0x4c
 8000d60:	4619      	mov	r1, r3
 8000d62:	68ba      	ldr	r2, [r7, #8]
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	f000 fbcb 	bl	8001500 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8000d6a:	68fb      	ldr	r3, [r7, #12]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	689b      	ldr	r3, [r3, #8]
 8000d70:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8000d74:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8000d78:	d108      	bne.n	8000d8c <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000d7a:	68fb      	ldr	r3, [r7, #12]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	689a      	ldr	r2, [r3, #8]
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8000d88:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8000d8a:	e00f      	b.n	8000dac <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	689a      	ldr	r2, [r3, #8]
 8000d92:	68fb      	ldr	r3, [r7, #12]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8000d9a:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8000d9c:	e006      	b.n	8000dac <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	2200      	movs	r2, #0
 8000da2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    if (tmp_hal_status == HAL_OK)
 8000da6:	e001      	b.n	8000dac <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000da8:	2301      	movs	r3, #1
 8000daa:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000dac:	7dfb      	ldrb	r3, [r7, #23]
}
 8000dae:	4618      	mov	r0, r3
 8000db0:	3718      	adds	r7, #24
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	40012400 	.word	0x40012400
 8000dbc:	40012800 	.word	0x40012800
 8000dc0:	0800112b 	.word	0x0800112b
 8000dc4:	080011a7 	.word	0x080011a7
 8000dc8:	080011c3 	.word	0x080011c3

08000dcc <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	b083      	sub	sp, #12
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8000dd4:	bf00      	nop
 8000dd6:	370c      	adds	r7, #12
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bc80      	pop	{r7}
 8000ddc:	4770      	bx	lr

08000dde <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000dde:	b480      	push	{r7}
 8000de0:	b083      	sub	sp, #12
 8000de2:	af00      	add	r7, sp, #0
 8000de4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8000de6:	bf00      	nop
 8000de8:	370c      	adds	r7, #12
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bc80      	pop	{r7}
 8000dee:	4770      	bx	lr

08000df0 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000df0:	b480      	push	{r7}
 8000df2:	b083      	sub	sp, #12
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8000df8:	bf00      	nop
 8000dfa:	370c      	adds	r7, #12
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bc80      	pop	{r7}
 8000e00:	4770      	bx	lr
	...

08000e04 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000e04:	b480      	push	{r7}
 8000e06:	b085      	sub	sp, #20
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
 8000e0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000e12:	2300      	movs	r3, #0
 8000e14:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000e1c:	2b01      	cmp	r3, #1
 8000e1e:	d101      	bne.n	8000e24 <HAL_ADC_ConfigChannel+0x20>
 8000e20:	2302      	movs	r3, #2
 8000e22:	e0dc      	b.n	8000fde <HAL_ADC_ConfigChannel+0x1da>
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	2201      	movs	r2, #1
 8000e28:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	685b      	ldr	r3, [r3, #4]
 8000e30:	2b06      	cmp	r3, #6
 8000e32:	d81c      	bhi.n	8000e6e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	685a      	ldr	r2, [r3, #4]
 8000e3e:	4613      	mov	r3, r2
 8000e40:	009b      	lsls	r3, r3, #2
 8000e42:	4413      	add	r3, r2
 8000e44:	3b05      	subs	r3, #5
 8000e46:	221f      	movs	r2, #31
 8000e48:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4c:	43db      	mvns	r3, r3
 8000e4e:	4019      	ands	r1, r3
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	6818      	ldr	r0, [r3, #0]
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	685a      	ldr	r2, [r3, #4]
 8000e58:	4613      	mov	r3, r2
 8000e5a:	009b      	lsls	r3, r3, #2
 8000e5c:	4413      	add	r3, r2
 8000e5e:	3b05      	subs	r3, #5
 8000e60:	fa00 f203 	lsl.w	r2, r0, r3
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	430a      	orrs	r2, r1
 8000e6a:	635a      	str	r2, [r3, #52]	@ 0x34
 8000e6c:	e03c      	b.n	8000ee8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	685b      	ldr	r3, [r3, #4]
 8000e72:	2b0c      	cmp	r3, #12
 8000e74:	d81c      	bhi.n	8000eb0 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	685a      	ldr	r2, [r3, #4]
 8000e80:	4613      	mov	r3, r2
 8000e82:	009b      	lsls	r3, r3, #2
 8000e84:	4413      	add	r3, r2
 8000e86:	3b23      	subs	r3, #35	@ 0x23
 8000e88:	221f      	movs	r2, #31
 8000e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8e:	43db      	mvns	r3, r3
 8000e90:	4019      	ands	r1, r3
 8000e92:	683b      	ldr	r3, [r7, #0]
 8000e94:	6818      	ldr	r0, [r3, #0]
 8000e96:	683b      	ldr	r3, [r7, #0]
 8000e98:	685a      	ldr	r2, [r3, #4]
 8000e9a:	4613      	mov	r3, r2
 8000e9c:	009b      	lsls	r3, r3, #2
 8000e9e:	4413      	add	r3, r2
 8000ea0:	3b23      	subs	r3, #35	@ 0x23
 8000ea2:	fa00 f203 	lsl.w	r2, r0, r3
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	430a      	orrs	r2, r1
 8000eac:	631a      	str	r2, [r3, #48]	@ 0x30
 8000eae:	e01b      	b.n	8000ee8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8000eb6:	683b      	ldr	r3, [r7, #0]
 8000eb8:	685a      	ldr	r2, [r3, #4]
 8000eba:	4613      	mov	r3, r2
 8000ebc:	009b      	lsls	r3, r3, #2
 8000ebe:	4413      	add	r3, r2
 8000ec0:	3b41      	subs	r3, #65	@ 0x41
 8000ec2:	221f      	movs	r2, #31
 8000ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec8:	43db      	mvns	r3, r3
 8000eca:	4019      	ands	r1, r3
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	6818      	ldr	r0, [r3, #0]
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	685a      	ldr	r2, [r3, #4]
 8000ed4:	4613      	mov	r3, r2
 8000ed6:	009b      	lsls	r3, r3, #2
 8000ed8:	4413      	add	r3, r2
 8000eda:	3b41      	subs	r3, #65	@ 0x41
 8000edc:	fa00 f203 	lsl.w	r2, r0, r3
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	430a      	orrs	r2, r1
 8000ee6:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	2b09      	cmp	r3, #9
 8000eee:	d91c      	bls.n	8000f2a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	68d9      	ldr	r1, [r3, #12]
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	681a      	ldr	r2, [r3, #0]
 8000efa:	4613      	mov	r3, r2
 8000efc:	005b      	lsls	r3, r3, #1
 8000efe:	4413      	add	r3, r2
 8000f00:	3b1e      	subs	r3, #30
 8000f02:	2207      	movs	r2, #7
 8000f04:	fa02 f303 	lsl.w	r3, r2, r3
 8000f08:	43db      	mvns	r3, r3
 8000f0a:	4019      	ands	r1, r3
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	6898      	ldr	r0, [r3, #8]
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	681a      	ldr	r2, [r3, #0]
 8000f14:	4613      	mov	r3, r2
 8000f16:	005b      	lsls	r3, r3, #1
 8000f18:	4413      	add	r3, r2
 8000f1a:	3b1e      	subs	r3, #30
 8000f1c:	fa00 f203 	lsl.w	r2, r0, r3
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	430a      	orrs	r2, r1
 8000f26:	60da      	str	r2, [r3, #12]
 8000f28:	e019      	b.n	8000f5e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	6919      	ldr	r1, [r3, #16]
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	681a      	ldr	r2, [r3, #0]
 8000f34:	4613      	mov	r3, r2
 8000f36:	005b      	lsls	r3, r3, #1
 8000f38:	4413      	add	r3, r2
 8000f3a:	2207      	movs	r2, #7
 8000f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f40:	43db      	mvns	r3, r3
 8000f42:	4019      	ands	r1, r3
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	6898      	ldr	r0, [r3, #8]
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	681a      	ldr	r2, [r3, #0]
 8000f4c:	4613      	mov	r3, r2
 8000f4e:	005b      	lsls	r3, r3, #1
 8000f50:	4413      	add	r3, r2
 8000f52:	fa00 f203 	lsl.w	r2, r0, r3
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	430a      	orrs	r2, r1
 8000f5c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	2b10      	cmp	r3, #16
 8000f64:	d003      	beq.n	8000f6e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000f6a:	2b11      	cmp	r3, #17
 8000f6c:	d132      	bne.n	8000fd4 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	4a1d      	ldr	r2, [pc, #116]	@ (8000fe8 <HAL_ADC_ConfigChannel+0x1e4>)
 8000f74:	4293      	cmp	r3, r2
 8000f76:	d125      	bne.n	8000fc4 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	689b      	ldr	r3, [r3, #8]
 8000f7e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d126      	bne.n	8000fd4 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	689a      	ldr	r2, [r3, #8]
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8000f94:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	2b10      	cmp	r3, #16
 8000f9c:	d11a      	bne.n	8000fd4 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000f9e:	4b13      	ldr	r3, [pc, #76]	@ (8000fec <HAL_ADC_ConfigChannel+0x1e8>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	4a13      	ldr	r2, [pc, #76]	@ (8000ff0 <HAL_ADC_ConfigChannel+0x1ec>)
 8000fa4:	fba2 2303 	umull	r2, r3, r2, r3
 8000fa8:	0c9a      	lsrs	r2, r3, #18
 8000faa:	4613      	mov	r3, r2
 8000fac:	009b      	lsls	r3, r3, #2
 8000fae:	4413      	add	r3, r2
 8000fb0:	005b      	lsls	r3, r3, #1
 8000fb2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000fb4:	e002      	b.n	8000fbc <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8000fb6:	68bb      	ldr	r3, [r7, #8]
 8000fb8:	3b01      	subs	r3, #1
 8000fba:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000fbc:	68bb      	ldr	r3, [r7, #8]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d1f9      	bne.n	8000fb6 <HAL_ADC_ConfigChannel+0x1b2>
 8000fc2:	e007      	b.n	8000fd4 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000fc8:	f043 0220 	orr.w	r2, r3, #32
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000fdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fde:	4618      	mov	r0, r3
 8000fe0:	3714      	adds	r7, #20
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bc80      	pop	{r7}
 8000fe6:	4770      	bx	lr
 8000fe8:	40012400 	.word	0x40012400
 8000fec:	20000000 	.word	0x20000000
 8000ff0:	431bde83 	.word	0x431bde83

08000ff4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b084      	sub	sp, #16
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001000:	2300      	movs	r3, #0
 8001002:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	689b      	ldr	r3, [r3, #8]
 800100a:	f003 0301 	and.w	r3, r3, #1
 800100e:	2b01      	cmp	r3, #1
 8001010:	d040      	beq.n	8001094 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	689a      	ldr	r2, [r3, #8]
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	f042 0201 	orr.w	r2, r2, #1
 8001020:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001022:	4b1f      	ldr	r3, [pc, #124]	@ (80010a0 <ADC_Enable+0xac>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	4a1f      	ldr	r2, [pc, #124]	@ (80010a4 <ADC_Enable+0xb0>)
 8001028:	fba2 2303 	umull	r2, r3, r2, r3
 800102c:	0c9b      	lsrs	r3, r3, #18
 800102e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001030:	e002      	b.n	8001038 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001032:	68bb      	ldr	r3, [r7, #8]
 8001034:	3b01      	subs	r3, #1
 8001036:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001038:	68bb      	ldr	r3, [r7, #8]
 800103a:	2b00      	cmp	r3, #0
 800103c:	d1f9      	bne.n	8001032 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800103e:	f7ff fcf3 	bl	8000a28 <HAL_GetTick>
 8001042:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001044:	e01f      	b.n	8001086 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001046:	f7ff fcef 	bl	8000a28 <HAL_GetTick>
 800104a:	4602      	mov	r2, r0
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	1ad3      	subs	r3, r2, r3
 8001050:	2b02      	cmp	r3, #2
 8001052:	d918      	bls.n	8001086 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	689b      	ldr	r3, [r3, #8]
 800105a:	f003 0301 	and.w	r3, r3, #1
 800105e:	2b01      	cmp	r3, #1
 8001060:	d011      	beq.n	8001086 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001066:	f043 0210 	orr.w	r2, r3, #16
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001072:	f043 0201 	orr.w	r2, r3, #1
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	2200      	movs	r2, #0
 800107e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8001082:	2301      	movs	r3, #1
 8001084:	e007      	b.n	8001096 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	689b      	ldr	r3, [r3, #8]
 800108c:	f003 0301 	and.w	r3, r3, #1
 8001090:	2b01      	cmp	r3, #1
 8001092:	d1d8      	bne.n	8001046 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001094:	2300      	movs	r3, #0
}
 8001096:	4618      	mov	r0, r3
 8001098:	3710      	adds	r7, #16
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	20000000 	.word	0x20000000
 80010a4:	431bde83 	.word	0x431bde83

080010a8 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b084      	sub	sp, #16
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80010b0:	2300      	movs	r3, #0
 80010b2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	689b      	ldr	r3, [r3, #8]
 80010ba:	f003 0301 	and.w	r3, r3, #1
 80010be:	2b01      	cmp	r3, #1
 80010c0:	d12e      	bne.n	8001120 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	689a      	ldr	r2, [r3, #8]
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	f022 0201 	bic.w	r2, r2, #1
 80010d0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80010d2:	f7ff fca9 	bl	8000a28 <HAL_GetTick>
 80010d6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80010d8:	e01b      	b.n	8001112 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80010da:	f7ff fca5 	bl	8000a28 <HAL_GetTick>
 80010de:	4602      	mov	r2, r0
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	1ad3      	subs	r3, r2, r3
 80010e4:	2b02      	cmp	r3, #2
 80010e6:	d914      	bls.n	8001112 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	689b      	ldr	r3, [r3, #8]
 80010ee:	f003 0301 	and.w	r3, r3, #1
 80010f2:	2b01      	cmp	r3, #1
 80010f4:	d10d      	bne.n	8001112 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80010fa:	f043 0210 	orr.w	r2, r3, #16
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001106:	f043 0201 	orr.w	r2, r3, #1
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 800110e:	2301      	movs	r3, #1
 8001110:	e007      	b.n	8001122 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	689b      	ldr	r3, [r3, #8]
 8001118:	f003 0301 	and.w	r3, r3, #1
 800111c:	2b01      	cmp	r3, #1
 800111e:	d0dc      	beq.n	80010da <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001120:	2300      	movs	r3, #0
}
 8001122:	4618      	mov	r0, r3
 8001124:	3710      	adds	r7, #16
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}

0800112a <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800112a:	b580      	push	{r7, lr}
 800112c:	b084      	sub	sp, #16
 800112e:	af00      	add	r7, sp, #0
 8001130:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001136:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800113c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8001140:	2b00      	cmp	r3, #0
 8001142:	d127      	bne.n	8001194 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001148:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	629a      	str	r2, [r3, #40]	@ 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	689b      	ldr	r3, [r3, #8]
 8001156:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800115a:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 800115e:	d115      	bne.n	800118c <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001164:	2b00      	cmp	r3, #0
 8001166:	d111      	bne.n	800118c <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800116c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	629a      	str	r2, [r3, #40]	@ 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001178:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800117c:	2b00      	cmp	r3, #0
 800117e:	d105      	bne.n	800118c <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001184:	f043 0201 	orr.w	r2, r3, #1
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800118c:	68f8      	ldr	r0, [r7, #12]
 800118e:	f7ff fe1d 	bl	8000dcc <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8001192:	e004      	b.n	800119e <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	6a1b      	ldr	r3, [r3, #32]
 8001198:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800119a:	6878      	ldr	r0, [r7, #4]
 800119c:	4798      	blx	r3
}
 800119e:	bf00      	nop
 80011a0:	3710      	adds	r7, #16
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}

080011a6 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80011a6:	b580      	push	{r7, lr}
 80011a8:	b084      	sub	sp, #16
 80011aa:	af00      	add	r7, sp, #0
 80011ac:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011b2:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80011b4:	68f8      	ldr	r0, [r7, #12]
 80011b6:	f7ff fe12 	bl	8000dde <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80011ba:	bf00      	nop
 80011bc:	3710      	adds	r7, #16
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}

080011c2 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80011c2:	b580      	push	{r7, lr}
 80011c4:	b084      	sub	sp, #16
 80011c6:	af00      	add	r7, sp, #0
 80011c8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011ce:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011d4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	629a      	str	r2, [r3, #40]	@ 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80011e0:	f043 0204 	orr.w	r2, r3, #4
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80011e8:	68f8      	ldr	r0, [r7, #12]
 80011ea:	f7ff fe01 	bl	8000df0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80011ee:	bf00      	nop
 80011f0:	3710      	adds	r7, #16
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
	...

080011f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b085      	sub	sp, #20
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	f003 0307 	and.w	r3, r3, #7
 8001206:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001208:	4b0c      	ldr	r3, [pc, #48]	@ (800123c <__NVIC_SetPriorityGrouping+0x44>)
 800120a:	68db      	ldr	r3, [r3, #12]
 800120c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800120e:	68ba      	ldr	r2, [r7, #8]
 8001210:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001214:	4013      	ands	r3, r2
 8001216:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800121c:	68bb      	ldr	r3, [r7, #8]
 800121e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001220:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001224:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001228:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800122a:	4a04      	ldr	r2, [pc, #16]	@ (800123c <__NVIC_SetPriorityGrouping+0x44>)
 800122c:	68bb      	ldr	r3, [r7, #8]
 800122e:	60d3      	str	r3, [r2, #12]
}
 8001230:	bf00      	nop
 8001232:	3714      	adds	r7, #20
 8001234:	46bd      	mov	sp, r7
 8001236:	bc80      	pop	{r7}
 8001238:	4770      	bx	lr
 800123a:	bf00      	nop
 800123c:	e000ed00 	.word	0xe000ed00

08001240 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001240:	b480      	push	{r7}
 8001242:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001244:	4b04      	ldr	r3, [pc, #16]	@ (8001258 <__NVIC_GetPriorityGrouping+0x18>)
 8001246:	68db      	ldr	r3, [r3, #12]
 8001248:	0a1b      	lsrs	r3, r3, #8
 800124a:	f003 0307 	and.w	r3, r3, #7
}
 800124e:	4618      	mov	r0, r3
 8001250:	46bd      	mov	sp, r7
 8001252:	bc80      	pop	{r7}
 8001254:	4770      	bx	lr
 8001256:	bf00      	nop
 8001258:	e000ed00 	.word	0xe000ed00

0800125c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800125c:	b480      	push	{r7}
 800125e:	b083      	sub	sp, #12
 8001260:	af00      	add	r7, sp, #0
 8001262:	4603      	mov	r3, r0
 8001264:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001266:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800126a:	2b00      	cmp	r3, #0
 800126c:	db0b      	blt.n	8001286 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800126e:	79fb      	ldrb	r3, [r7, #7]
 8001270:	f003 021f 	and.w	r2, r3, #31
 8001274:	4906      	ldr	r1, [pc, #24]	@ (8001290 <__NVIC_EnableIRQ+0x34>)
 8001276:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800127a:	095b      	lsrs	r3, r3, #5
 800127c:	2001      	movs	r0, #1
 800127e:	fa00 f202 	lsl.w	r2, r0, r2
 8001282:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001286:	bf00      	nop
 8001288:	370c      	adds	r7, #12
 800128a:	46bd      	mov	sp, r7
 800128c:	bc80      	pop	{r7}
 800128e:	4770      	bx	lr
 8001290:	e000e100 	.word	0xe000e100

08001294 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001294:	b480      	push	{r7}
 8001296:	b083      	sub	sp, #12
 8001298:	af00      	add	r7, sp, #0
 800129a:	4603      	mov	r3, r0
 800129c:	6039      	str	r1, [r7, #0]
 800129e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	db0a      	blt.n	80012be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	b2da      	uxtb	r2, r3
 80012ac:	490c      	ldr	r1, [pc, #48]	@ (80012e0 <__NVIC_SetPriority+0x4c>)
 80012ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012b2:	0112      	lsls	r2, r2, #4
 80012b4:	b2d2      	uxtb	r2, r2
 80012b6:	440b      	add	r3, r1
 80012b8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012bc:	e00a      	b.n	80012d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	b2da      	uxtb	r2, r3
 80012c2:	4908      	ldr	r1, [pc, #32]	@ (80012e4 <__NVIC_SetPriority+0x50>)
 80012c4:	79fb      	ldrb	r3, [r7, #7]
 80012c6:	f003 030f 	and.w	r3, r3, #15
 80012ca:	3b04      	subs	r3, #4
 80012cc:	0112      	lsls	r2, r2, #4
 80012ce:	b2d2      	uxtb	r2, r2
 80012d0:	440b      	add	r3, r1
 80012d2:	761a      	strb	r2, [r3, #24]
}
 80012d4:	bf00      	nop
 80012d6:	370c      	adds	r7, #12
 80012d8:	46bd      	mov	sp, r7
 80012da:	bc80      	pop	{r7}
 80012dc:	4770      	bx	lr
 80012de:	bf00      	nop
 80012e0:	e000e100 	.word	0xe000e100
 80012e4:	e000ed00 	.word	0xe000ed00

080012e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b089      	sub	sp, #36	@ 0x24
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	60f8      	str	r0, [r7, #12]
 80012f0:	60b9      	str	r1, [r7, #8]
 80012f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	f003 0307 	and.w	r3, r3, #7
 80012fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012fc:	69fb      	ldr	r3, [r7, #28]
 80012fe:	f1c3 0307 	rsb	r3, r3, #7
 8001302:	2b04      	cmp	r3, #4
 8001304:	bf28      	it	cs
 8001306:	2304      	movcs	r3, #4
 8001308:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800130a:	69fb      	ldr	r3, [r7, #28]
 800130c:	3304      	adds	r3, #4
 800130e:	2b06      	cmp	r3, #6
 8001310:	d902      	bls.n	8001318 <NVIC_EncodePriority+0x30>
 8001312:	69fb      	ldr	r3, [r7, #28]
 8001314:	3b03      	subs	r3, #3
 8001316:	e000      	b.n	800131a <NVIC_EncodePriority+0x32>
 8001318:	2300      	movs	r3, #0
 800131a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800131c:	f04f 32ff 	mov.w	r2, #4294967295
 8001320:	69bb      	ldr	r3, [r7, #24]
 8001322:	fa02 f303 	lsl.w	r3, r2, r3
 8001326:	43da      	mvns	r2, r3
 8001328:	68bb      	ldr	r3, [r7, #8]
 800132a:	401a      	ands	r2, r3
 800132c:	697b      	ldr	r3, [r7, #20]
 800132e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001330:	f04f 31ff 	mov.w	r1, #4294967295
 8001334:	697b      	ldr	r3, [r7, #20]
 8001336:	fa01 f303 	lsl.w	r3, r1, r3
 800133a:	43d9      	mvns	r1, r3
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001340:	4313      	orrs	r3, r2
         );
}
 8001342:	4618      	mov	r0, r3
 8001344:	3724      	adds	r7, #36	@ 0x24
 8001346:	46bd      	mov	sp, r7
 8001348:	bc80      	pop	{r7}
 800134a:	4770      	bx	lr

0800134c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b082      	sub	sp, #8
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	3b01      	subs	r3, #1
 8001358:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800135c:	d301      	bcc.n	8001362 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800135e:	2301      	movs	r3, #1
 8001360:	e00f      	b.n	8001382 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001362:	4a0a      	ldr	r2, [pc, #40]	@ (800138c <SysTick_Config+0x40>)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	3b01      	subs	r3, #1
 8001368:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800136a:	210f      	movs	r1, #15
 800136c:	f04f 30ff 	mov.w	r0, #4294967295
 8001370:	f7ff ff90 	bl	8001294 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001374:	4b05      	ldr	r3, [pc, #20]	@ (800138c <SysTick_Config+0x40>)
 8001376:	2200      	movs	r2, #0
 8001378:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800137a:	4b04      	ldr	r3, [pc, #16]	@ (800138c <SysTick_Config+0x40>)
 800137c:	2207      	movs	r2, #7
 800137e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001380:	2300      	movs	r3, #0
}
 8001382:	4618      	mov	r0, r3
 8001384:	3708      	adds	r7, #8
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	e000e010 	.word	0xe000e010

08001390 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b082      	sub	sp, #8
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001398:	6878      	ldr	r0, [r7, #4]
 800139a:	f7ff ff2d 	bl	80011f8 <__NVIC_SetPriorityGrouping>
}
 800139e:	bf00      	nop
 80013a0:	3708      	adds	r7, #8
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}

080013a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013a6:	b580      	push	{r7, lr}
 80013a8:	b086      	sub	sp, #24
 80013aa:	af00      	add	r7, sp, #0
 80013ac:	4603      	mov	r3, r0
 80013ae:	60b9      	str	r1, [r7, #8]
 80013b0:	607a      	str	r2, [r7, #4]
 80013b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013b4:	2300      	movs	r3, #0
 80013b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013b8:	f7ff ff42 	bl	8001240 <__NVIC_GetPriorityGrouping>
 80013bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013be:	687a      	ldr	r2, [r7, #4]
 80013c0:	68b9      	ldr	r1, [r7, #8]
 80013c2:	6978      	ldr	r0, [r7, #20]
 80013c4:	f7ff ff90 	bl	80012e8 <NVIC_EncodePriority>
 80013c8:	4602      	mov	r2, r0
 80013ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013ce:	4611      	mov	r1, r2
 80013d0:	4618      	mov	r0, r3
 80013d2:	f7ff ff5f 	bl	8001294 <__NVIC_SetPriority>
}
 80013d6:	bf00      	nop
 80013d8:	3718      	adds	r7, #24
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}

080013de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013de:	b580      	push	{r7, lr}
 80013e0:	b082      	sub	sp, #8
 80013e2:	af00      	add	r7, sp, #0
 80013e4:	4603      	mov	r3, r0
 80013e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ec:	4618      	mov	r0, r3
 80013ee:	f7ff ff35 	bl	800125c <__NVIC_EnableIRQ>
}
 80013f2:	bf00      	nop
 80013f4:	3708      	adds	r7, #8
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}

080013fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013fa:	b580      	push	{r7, lr}
 80013fc:	b082      	sub	sp, #8
 80013fe:	af00      	add	r7, sp, #0
 8001400:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001402:	6878      	ldr	r0, [r7, #4]
 8001404:	f7ff ffa2 	bl	800134c <SysTick_Config>
 8001408:	4603      	mov	r3, r0
}
 800140a:	4618      	mov	r0, r3
 800140c:	3708      	adds	r7, #8
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
	...

08001414 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001414:	b480      	push	{r7}
 8001416:	b085      	sub	sp, #20
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800141c:	2300      	movs	r3, #0
 800141e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d101      	bne.n	800142a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001426:	2301      	movs	r3, #1
 8001428:	e059      	b.n	80014de <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	461a      	mov	r2, r3
 8001430:	4b2d      	ldr	r3, [pc, #180]	@ (80014e8 <HAL_DMA_Init+0xd4>)
 8001432:	429a      	cmp	r2, r3
 8001434:	d80f      	bhi.n	8001456 <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	461a      	mov	r2, r3
 800143c:	4b2b      	ldr	r3, [pc, #172]	@ (80014ec <HAL_DMA_Init+0xd8>)
 800143e:	4413      	add	r3, r2
 8001440:	4a2b      	ldr	r2, [pc, #172]	@ (80014f0 <HAL_DMA_Init+0xdc>)
 8001442:	fba2 2303 	umull	r2, r3, r2, r3
 8001446:	091b      	lsrs	r3, r3, #4
 8001448:	009a      	lsls	r2, r3, #2
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA1;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	4a28      	ldr	r2, [pc, #160]	@ (80014f4 <HAL_DMA_Init+0xe0>)
 8001452:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001454:	e00e      	b.n	8001474 <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	461a      	mov	r2, r3
 800145c:	4b26      	ldr	r3, [pc, #152]	@ (80014f8 <HAL_DMA_Init+0xe4>)
 800145e:	4413      	add	r3, r2
 8001460:	4a23      	ldr	r2, [pc, #140]	@ (80014f0 <HAL_DMA_Init+0xdc>)
 8001462:	fba2 2303 	umull	r2, r3, r2, r3
 8001466:	091b      	lsrs	r3, r3, #4
 8001468:	009a      	lsls	r2, r3, #2
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA2;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	4a22      	ldr	r2, [pc, #136]	@ (80014fc <HAL_DMA_Init+0xe8>)
 8001472:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	2202      	movs	r2, #2
 8001478:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800148a:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800148e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001498:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	68db      	ldr	r3, [r3, #12]
 800149e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	695b      	ldr	r3, [r3, #20]
 80014aa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014b0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	69db      	ldr	r3, [r3, #28]
 80014b6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80014b8:	68fa      	ldr	r2, [r7, #12]
 80014ba:	4313      	orrs	r3, r2
 80014bc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	68fa      	ldr	r2, [r7, #12]
 80014c4:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	2200      	movs	r2, #0
 80014ca:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	2201      	movs	r2, #1
 80014d0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	2200      	movs	r2, #0
 80014d8:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80014dc:	2300      	movs	r3, #0
}
 80014de:	4618      	mov	r0, r3
 80014e0:	3714      	adds	r7, #20
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bc80      	pop	{r7}
 80014e6:	4770      	bx	lr
 80014e8:	40020407 	.word	0x40020407
 80014ec:	bffdfff8 	.word	0xbffdfff8
 80014f0:	cccccccd 	.word	0xcccccccd
 80014f4:	40020000 	.word	0x40020000
 80014f8:	bffdfbf8 	.word	0xbffdfbf8
 80014fc:	40020400 	.word	0x40020400

08001500 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b086      	sub	sp, #24
 8001504:	af00      	add	r7, sp, #0
 8001506:	60f8      	str	r0, [r7, #12]
 8001508:	60b9      	str	r1, [r7, #8]
 800150a:	607a      	str	r2, [r7, #4]
 800150c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800150e:	2300      	movs	r3, #0
 8001510:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001518:	2b01      	cmp	r3, #1
 800151a:	d101      	bne.n	8001520 <HAL_DMA_Start_IT+0x20>
 800151c:	2302      	movs	r3, #2
 800151e:	e04b      	b.n	80015b8 <HAL_DMA_Start_IT+0xb8>
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	2201      	movs	r2, #1
 8001524:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800152e:	b2db      	uxtb	r3, r3
 8001530:	2b01      	cmp	r3, #1
 8001532:	d13a      	bne.n	80015aa <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	2202      	movs	r2, #2
 8001538:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	2200      	movs	r2, #0
 8001540:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	681a      	ldr	r2, [r3, #0]
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f022 0201 	bic.w	r2, r2, #1
 8001550:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	687a      	ldr	r2, [r7, #4]
 8001556:	68b9      	ldr	r1, [r7, #8]
 8001558:	68f8      	ldr	r0, [r7, #12]
 800155a:	f000 fa6d 	bl	8001a38 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001562:	2b00      	cmp	r3, #0
 8001564:	d008      	beq.n	8001578 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	681a      	ldr	r2, [r3, #0]
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f042 020e 	orr.w	r2, r2, #14
 8001574:	601a      	str	r2, [r3, #0]
 8001576:	e00f      	b.n	8001598 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	681a      	ldr	r2, [r3, #0]
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f022 0204 	bic.w	r2, r2, #4
 8001586:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	681a      	ldr	r2, [r3, #0]
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f042 020a 	orr.w	r2, r2, #10
 8001596:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	681a      	ldr	r2, [r3, #0]
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f042 0201 	orr.w	r2, r2, #1
 80015a6:	601a      	str	r2, [r3, #0]
 80015a8:	e005      	b.n	80015b6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	2200      	movs	r2, #0
 80015ae:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80015b2:	2302      	movs	r3, #2
 80015b4:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80015b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80015b8:	4618      	mov	r0, r3
 80015ba:	3718      	adds	r7, #24
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd80      	pop	{r7, pc}

080015c0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b084      	sub	sp, #16
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015dc:	2204      	movs	r2, #4
 80015de:	409a      	lsls	r2, r3
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	4013      	ands	r3, r2
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	f000 80f1 	beq.w	80017cc <HAL_DMA_IRQHandler+0x20c>
 80015ea:	68bb      	ldr	r3, [r7, #8]
 80015ec:	f003 0304 	and.w	r3, r3, #4
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	f000 80eb 	beq.w	80017cc <HAL_DMA_IRQHandler+0x20c>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f003 0320 	and.w	r3, r3, #32
 8001600:	2b00      	cmp	r3, #0
 8001602:	d107      	bne.n	8001614 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	681a      	ldr	r2, [r3, #0]
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f022 0204 	bic.w	r2, r2, #4
 8001612:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	461a      	mov	r2, r3
 800161a:	4b5f      	ldr	r3, [pc, #380]	@ (8001798 <HAL_DMA_IRQHandler+0x1d8>)
 800161c:	429a      	cmp	r2, r3
 800161e:	d958      	bls.n	80016d2 <HAL_DMA_IRQHandler+0x112>
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4a5d      	ldr	r2, [pc, #372]	@ (800179c <HAL_DMA_IRQHandler+0x1dc>)
 8001626:	4293      	cmp	r3, r2
 8001628:	d04f      	beq.n	80016ca <HAL_DMA_IRQHandler+0x10a>
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	4a5c      	ldr	r2, [pc, #368]	@ (80017a0 <HAL_DMA_IRQHandler+0x1e0>)
 8001630:	4293      	cmp	r3, r2
 8001632:	d048      	beq.n	80016c6 <HAL_DMA_IRQHandler+0x106>
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4a5a      	ldr	r2, [pc, #360]	@ (80017a4 <HAL_DMA_IRQHandler+0x1e4>)
 800163a:	4293      	cmp	r3, r2
 800163c:	d040      	beq.n	80016c0 <HAL_DMA_IRQHandler+0x100>
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4a59      	ldr	r2, [pc, #356]	@ (80017a8 <HAL_DMA_IRQHandler+0x1e8>)
 8001644:	4293      	cmp	r3, r2
 8001646:	d038      	beq.n	80016ba <HAL_DMA_IRQHandler+0xfa>
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4a57      	ldr	r2, [pc, #348]	@ (80017ac <HAL_DMA_IRQHandler+0x1ec>)
 800164e:	4293      	cmp	r3, r2
 8001650:	d030      	beq.n	80016b4 <HAL_DMA_IRQHandler+0xf4>
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4a56      	ldr	r2, [pc, #344]	@ (80017b0 <HAL_DMA_IRQHandler+0x1f0>)
 8001658:	4293      	cmp	r3, r2
 800165a:	d028      	beq.n	80016ae <HAL_DMA_IRQHandler+0xee>
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4a4d      	ldr	r2, [pc, #308]	@ (8001798 <HAL_DMA_IRQHandler+0x1d8>)
 8001662:	4293      	cmp	r3, r2
 8001664:	d020      	beq.n	80016a8 <HAL_DMA_IRQHandler+0xe8>
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	4a52      	ldr	r2, [pc, #328]	@ (80017b4 <HAL_DMA_IRQHandler+0x1f4>)
 800166c:	4293      	cmp	r3, r2
 800166e:	d019      	beq.n	80016a4 <HAL_DMA_IRQHandler+0xe4>
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4a50      	ldr	r2, [pc, #320]	@ (80017b8 <HAL_DMA_IRQHandler+0x1f8>)
 8001676:	4293      	cmp	r3, r2
 8001678:	d012      	beq.n	80016a0 <HAL_DMA_IRQHandler+0xe0>
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4a4f      	ldr	r2, [pc, #316]	@ (80017bc <HAL_DMA_IRQHandler+0x1fc>)
 8001680:	4293      	cmp	r3, r2
 8001682:	d00a      	beq.n	800169a <HAL_DMA_IRQHandler+0xda>
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4a4d      	ldr	r2, [pc, #308]	@ (80017c0 <HAL_DMA_IRQHandler+0x200>)
 800168a:	4293      	cmp	r3, r2
 800168c:	d102      	bne.n	8001694 <HAL_DMA_IRQHandler+0xd4>
 800168e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001692:	e01b      	b.n	80016cc <HAL_DMA_IRQHandler+0x10c>
 8001694:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8001698:	e018      	b.n	80016cc <HAL_DMA_IRQHandler+0x10c>
 800169a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800169e:	e015      	b.n	80016cc <HAL_DMA_IRQHandler+0x10c>
 80016a0:	2340      	movs	r3, #64	@ 0x40
 80016a2:	e013      	b.n	80016cc <HAL_DMA_IRQHandler+0x10c>
 80016a4:	2304      	movs	r3, #4
 80016a6:	e011      	b.n	80016cc <HAL_DMA_IRQHandler+0x10c>
 80016a8:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80016ac:	e00e      	b.n	80016cc <HAL_DMA_IRQHandler+0x10c>
 80016ae:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80016b2:	e00b      	b.n	80016cc <HAL_DMA_IRQHandler+0x10c>
 80016b4:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80016b8:	e008      	b.n	80016cc <HAL_DMA_IRQHandler+0x10c>
 80016ba:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80016be:	e005      	b.n	80016cc <HAL_DMA_IRQHandler+0x10c>
 80016c0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80016c4:	e002      	b.n	80016cc <HAL_DMA_IRQHandler+0x10c>
 80016c6:	2340      	movs	r3, #64	@ 0x40
 80016c8:	e000      	b.n	80016cc <HAL_DMA_IRQHandler+0x10c>
 80016ca:	2304      	movs	r3, #4
 80016cc:	4a3d      	ldr	r2, [pc, #244]	@ (80017c4 <HAL_DMA_IRQHandler+0x204>)
 80016ce:	6053      	str	r3, [r2, #4]
 80016d0:	e057      	b.n	8001782 <HAL_DMA_IRQHandler+0x1c2>
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4a31      	ldr	r2, [pc, #196]	@ (800179c <HAL_DMA_IRQHandler+0x1dc>)
 80016d8:	4293      	cmp	r3, r2
 80016da:	d04f      	beq.n	800177c <HAL_DMA_IRQHandler+0x1bc>
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4a2f      	ldr	r2, [pc, #188]	@ (80017a0 <HAL_DMA_IRQHandler+0x1e0>)
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d048      	beq.n	8001778 <HAL_DMA_IRQHandler+0x1b8>
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4a2e      	ldr	r2, [pc, #184]	@ (80017a4 <HAL_DMA_IRQHandler+0x1e4>)
 80016ec:	4293      	cmp	r3, r2
 80016ee:	d040      	beq.n	8001772 <HAL_DMA_IRQHandler+0x1b2>
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4a2c      	ldr	r2, [pc, #176]	@ (80017a8 <HAL_DMA_IRQHandler+0x1e8>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d038      	beq.n	800176c <HAL_DMA_IRQHandler+0x1ac>
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	4a2b      	ldr	r2, [pc, #172]	@ (80017ac <HAL_DMA_IRQHandler+0x1ec>)
 8001700:	4293      	cmp	r3, r2
 8001702:	d030      	beq.n	8001766 <HAL_DMA_IRQHandler+0x1a6>
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4a29      	ldr	r2, [pc, #164]	@ (80017b0 <HAL_DMA_IRQHandler+0x1f0>)
 800170a:	4293      	cmp	r3, r2
 800170c:	d028      	beq.n	8001760 <HAL_DMA_IRQHandler+0x1a0>
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4a21      	ldr	r2, [pc, #132]	@ (8001798 <HAL_DMA_IRQHandler+0x1d8>)
 8001714:	4293      	cmp	r3, r2
 8001716:	d020      	beq.n	800175a <HAL_DMA_IRQHandler+0x19a>
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4a25      	ldr	r2, [pc, #148]	@ (80017b4 <HAL_DMA_IRQHandler+0x1f4>)
 800171e:	4293      	cmp	r3, r2
 8001720:	d019      	beq.n	8001756 <HAL_DMA_IRQHandler+0x196>
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4a24      	ldr	r2, [pc, #144]	@ (80017b8 <HAL_DMA_IRQHandler+0x1f8>)
 8001728:	4293      	cmp	r3, r2
 800172a:	d012      	beq.n	8001752 <HAL_DMA_IRQHandler+0x192>
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4a22      	ldr	r2, [pc, #136]	@ (80017bc <HAL_DMA_IRQHandler+0x1fc>)
 8001732:	4293      	cmp	r3, r2
 8001734:	d00a      	beq.n	800174c <HAL_DMA_IRQHandler+0x18c>
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4a21      	ldr	r2, [pc, #132]	@ (80017c0 <HAL_DMA_IRQHandler+0x200>)
 800173c:	4293      	cmp	r3, r2
 800173e:	d102      	bne.n	8001746 <HAL_DMA_IRQHandler+0x186>
 8001740:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001744:	e01b      	b.n	800177e <HAL_DMA_IRQHandler+0x1be>
 8001746:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800174a:	e018      	b.n	800177e <HAL_DMA_IRQHandler+0x1be>
 800174c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001750:	e015      	b.n	800177e <HAL_DMA_IRQHandler+0x1be>
 8001752:	2340      	movs	r3, #64	@ 0x40
 8001754:	e013      	b.n	800177e <HAL_DMA_IRQHandler+0x1be>
 8001756:	2304      	movs	r3, #4
 8001758:	e011      	b.n	800177e <HAL_DMA_IRQHandler+0x1be>
 800175a:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800175e:	e00e      	b.n	800177e <HAL_DMA_IRQHandler+0x1be>
 8001760:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001764:	e00b      	b.n	800177e <HAL_DMA_IRQHandler+0x1be>
 8001766:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800176a:	e008      	b.n	800177e <HAL_DMA_IRQHandler+0x1be>
 800176c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001770:	e005      	b.n	800177e <HAL_DMA_IRQHandler+0x1be>
 8001772:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001776:	e002      	b.n	800177e <HAL_DMA_IRQHandler+0x1be>
 8001778:	2340      	movs	r3, #64	@ 0x40
 800177a:	e000      	b.n	800177e <HAL_DMA_IRQHandler+0x1be>
 800177c:	2304      	movs	r3, #4
 800177e:	4a12      	ldr	r2, [pc, #72]	@ (80017c8 <HAL_DMA_IRQHandler+0x208>)
 8001780:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001786:	2b00      	cmp	r3, #0
 8001788:	f000 8136 	beq.w	80019f8 <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001790:	6878      	ldr	r0, [r7, #4]
 8001792:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001794:	e130      	b.n	80019f8 <HAL_DMA_IRQHandler+0x438>
 8001796:	bf00      	nop
 8001798:	40020080 	.word	0x40020080
 800179c:	40020008 	.word	0x40020008
 80017a0:	4002001c 	.word	0x4002001c
 80017a4:	40020030 	.word	0x40020030
 80017a8:	40020044 	.word	0x40020044
 80017ac:	40020058 	.word	0x40020058
 80017b0:	4002006c 	.word	0x4002006c
 80017b4:	40020408 	.word	0x40020408
 80017b8:	4002041c 	.word	0x4002041c
 80017bc:	40020430 	.word	0x40020430
 80017c0:	40020444 	.word	0x40020444
 80017c4:	40020400 	.word	0x40020400
 80017c8:	40020000 	.word	0x40020000
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017d0:	2202      	movs	r2, #2
 80017d2:	409a      	lsls	r2, r3
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	4013      	ands	r3, r2
 80017d8:	2b00      	cmp	r3, #0
 80017da:	f000 80dd 	beq.w	8001998 <HAL_DMA_IRQHandler+0x3d8>
 80017de:	68bb      	ldr	r3, [r7, #8]
 80017e0:	f003 0302 	and.w	r3, r3, #2
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	f000 80d7 	beq.w	8001998 <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f003 0320 	and.w	r3, r3, #32
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d10b      	bne.n	8001810 <HAL_DMA_IRQHandler+0x250>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	681a      	ldr	r2, [r3, #0]
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f022 020a 	bic.w	r2, r2, #10
 8001806:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2201      	movs	r2, #1
 800180c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	461a      	mov	r2, r3
 8001816:	4b7b      	ldr	r3, [pc, #492]	@ (8001a04 <HAL_DMA_IRQHandler+0x444>)
 8001818:	429a      	cmp	r2, r3
 800181a:	d958      	bls.n	80018ce <HAL_DMA_IRQHandler+0x30e>
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4a79      	ldr	r2, [pc, #484]	@ (8001a08 <HAL_DMA_IRQHandler+0x448>)
 8001822:	4293      	cmp	r3, r2
 8001824:	d04f      	beq.n	80018c6 <HAL_DMA_IRQHandler+0x306>
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4a78      	ldr	r2, [pc, #480]	@ (8001a0c <HAL_DMA_IRQHandler+0x44c>)
 800182c:	4293      	cmp	r3, r2
 800182e:	d048      	beq.n	80018c2 <HAL_DMA_IRQHandler+0x302>
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4a76      	ldr	r2, [pc, #472]	@ (8001a10 <HAL_DMA_IRQHandler+0x450>)
 8001836:	4293      	cmp	r3, r2
 8001838:	d040      	beq.n	80018bc <HAL_DMA_IRQHandler+0x2fc>
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4a75      	ldr	r2, [pc, #468]	@ (8001a14 <HAL_DMA_IRQHandler+0x454>)
 8001840:	4293      	cmp	r3, r2
 8001842:	d038      	beq.n	80018b6 <HAL_DMA_IRQHandler+0x2f6>
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a73      	ldr	r2, [pc, #460]	@ (8001a18 <HAL_DMA_IRQHandler+0x458>)
 800184a:	4293      	cmp	r3, r2
 800184c:	d030      	beq.n	80018b0 <HAL_DMA_IRQHandler+0x2f0>
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	4a72      	ldr	r2, [pc, #456]	@ (8001a1c <HAL_DMA_IRQHandler+0x45c>)
 8001854:	4293      	cmp	r3, r2
 8001856:	d028      	beq.n	80018aa <HAL_DMA_IRQHandler+0x2ea>
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4a69      	ldr	r2, [pc, #420]	@ (8001a04 <HAL_DMA_IRQHandler+0x444>)
 800185e:	4293      	cmp	r3, r2
 8001860:	d020      	beq.n	80018a4 <HAL_DMA_IRQHandler+0x2e4>
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4a6e      	ldr	r2, [pc, #440]	@ (8001a20 <HAL_DMA_IRQHandler+0x460>)
 8001868:	4293      	cmp	r3, r2
 800186a:	d019      	beq.n	80018a0 <HAL_DMA_IRQHandler+0x2e0>
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4a6c      	ldr	r2, [pc, #432]	@ (8001a24 <HAL_DMA_IRQHandler+0x464>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d012      	beq.n	800189c <HAL_DMA_IRQHandler+0x2dc>
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4a6b      	ldr	r2, [pc, #428]	@ (8001a28 <HAL_DMA_IRQHandler+0x468>)
 800187c:	4293      	cmp	r3, r2
 800187e:	d00a      	beq.n	8001896 <HAL_DMA_IRQHandler+0x2d6>
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4a69      	ldr	r2, [pc, #420]	@ (8001a2c <HAL_DMA_IRQHandler+0x46c>)
 8001886:	4293      	cmp	r3, r2
 8001888:	d102      	bne.n	8001890 <HAL_DMA_IRQHandler+0x2d0>
 800188a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800188e:	e01b      	b.n	80018c8 <HAL_DMA_IRQHandler+0x308>
 8001890:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001894:	e018      	b.n	80018c8 <HAL_DMA_IRQHandler+0x308>
 8001896:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800189a:	e015      	b.n	80018c8 <HAL_DMA_IRQHandler+0x308>
 800189c:	2320      	movs	r3, #32
 800189e:	e013      	b.n	80018c8 <HAL_DMA_IRQHandler+0x308>
 80018a0:	2302      	movs	r3, #2
 80018a2:	e011      	b.n	80018c8 <HAL_DMA_IRQHandler+0x308>
 80018a4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80018a8:	e00e      	b.n	80018c8 <HAL_DMA_IRQHandler+0x308>
 80018aa:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80018ae:	e00b      	b.n	80018c8 <HAL_DMA_IRQHandler+0x308>
 80018b0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80018b4:	e008      	b.n	80018c8 <HAL_DMA_IRQHandler+0x308>
 80018b6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80018ba:	e005      	b.n	80018c8 <HAL_DMA_IRQHandler+0x308>
 80018bc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80018c0:	e002      	b.n	80018c8 <HAL_DMA_IRQHandler+0x308>
 80018c2:	2320      	movs	r3, #32
 80018c4:	e000      	b.n	80018c8 <HAL_DMA_IRQHandler+0x308>
 80018c6:	2302      	movs	r3, #2
 80018c8:	4a59      	ldr	r2, [pc, #356]	@ (8001a30 <HAL_DMA_IRQHandler+0x470>)
 80018ca:	6053      	str	r3, [r2, #4]
 80018cc:	e057      	b.n	800197e <HAL_DMA_IRQHandler+0x3be>
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4a4d      	ldr	r2, [pc, #308]	@ (8001a08 <HAL_DMA_IRQHandler+0x448>)
 80018d4:	4293      	cmp	r3, r2
 80018d6:	d04f      	beq.n	8001978 <HAL_DMA_IRQHandler+0x3b8>
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a4b      	ldr	r2, [pc, #300]	@ (8001a0c <HAL_DMA_IRQHandler+0x44c>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d048      	beq.n	8001974 <HAL_DMA_IRQHandler+0x3b4>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4a4a      	ldr	r2, [pc, #296]	@ (8001a10 <HAL_DMA_IRQHandler+0x450>)
 80018e8:	4293      	cmp	r3, r2
 80018ea:	d040      	beq.n	800196e <HAL_DMA_IRQHandler+0x3ae>
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a48      	ldr	r2, [pc, #288]	@ (8001a14 <HAL_DMA_IRQHandler+0x454>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d038      	beq.n	8001968 <HAL_DMA_IRQHandler+0x3a8>
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4a47      	ldr	r2, [pc, #284]	@ (8001a18 <HAL_DMA_IRQHandler+0x458>)
 80018fc:	4293      	cmp	r3, r2
 80018fe:	d030      	beq.n	8001962 <HAL_DMA_IRQHandler+0x3a2>
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a45      	ldr	r2, [pc, #276]	@ (8001a1c <HAL_DMA_IRQHandler+0x45c>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d028      	beq.n	800195c <HAL_DMA_IRQHandler+0x39c>
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4a3d      	ldr	r2, [pc, #244]	@ (8001a04 <HAL_DMA_IRQHandler+0x444>)
 8001910:	4293      	cmp	r3, r2
 8001912:	d020      	beq.n	8001956 <HAL_DMA_IRQHandler+0x396>
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a41      	ldr	r2, [pc, #260]	@ (8001a20 <HAL_DMA_IRQHandler+0x460>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d019      	beq.n	8001952 <HAL_DMA_IRQHandler+0x392>
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4a40      	ldr	r2, [pc, #256]	@ (8001a24 <HAL_DMA_IRQHandler+0x464>)
 8001924:	4293      	cmp	r3, r2
 8001926:	d012      	beq.n	800194e <HAL_DMA_IRQHandler+0x38e>
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a3e      	ldr	r2, [pc, #248]	@ (8001a28 <HAL_DMA_IRQHandler+0x468>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d00a      	beq.n	8001948 <HAL_DMA_IRQHandler+0x388>
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4a3d      	ldr	r2, [pc, #244]	@ (8001a2c <HAL_DMA_IRQHandler+0x46c>)
 8001938:	4293      	cmp	r3, r2
 800193a:	d102      	bne.n	8001942 <HAL_DMA_IRQHandler+0x382>
 800193c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001940:	e01b      	b.n	800197a <HAL_DMA_IRQHandler+0x3ba>
 8001942:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001946:	e018      	b.n	800197a <HAL_DMA_IRQHandler+0x3ba>
 8001948:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800194c:	e015      	b.n	800197a <HAL_DMA_IRQHandler+0x3ba>
 800194e:	2320      	movs	r3, #32
 8001950:	e013      	b.n	800197a <HAL_DMA_IRQHandler+0x3ba>
 8001952:	2302      	movs	r3, #2
 8001954:	e011      	b.n	800197a <HAL_DMA_IRQHandler+0x3ba>
 8001956:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800195a:	e00e      	b.n	800197a <HAL_DMA_IRQHandler+0x3ba>
 800195c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001960:	e00b      	b.n	800197a <HAL_DMA_IRQHandler+0x3ba>
 8001962:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001966:	e008      	b.n	800197a <HAL_DMA_IRQHandler+0x3ba>
 8001968:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800196c:	e005      	b.n	800197a <HAL_DMA_IRQHandler+0x3ba>
 800196e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001972:	e002      	b.n	800197a <HAL_DMA_IRQHandler+0x3ba>
 8001974:	2320      	movs	r3, #32
 8001976:	e000      	b.n	800197a <HAL_DMA_IRQHandler+0x3ba>
 8001978:	2302      	movs	r3, #2
 800197a:	4a2e      	ldr	r2, [pc, #184]	@ (8001a34 <HAL_DMA_IRQHandler+0x474>)
 800197c:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	2200      	movs	r2, #0
 8001982:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800198a:	2b00      	cmp	r3, #0
 800198c:	d034      	beq.n	80019f8 <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001992:	6878      	ldr	r0, [r7, #4]
 8001994:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001996:	e02f      	b.n	80019f8 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800199c:	2208      	movs	r2, #8
 800199e:	409a      	lsls	r2, r3
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	4013      	ands	r3, r2
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d028      	beq.n	80019fa <HAL_DMA_IRQHandler+0x43a>
 80019a8:	68bb      	ldr	r3, [r7, #8]
 80019aa:	f003 0308 	and.w	r3, r3, #8
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d023      	beq.n	80019fa <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	681a      	ldr	r2, [r3, #0]
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f022 020e 	bic.w	r2, r2, #14
 80019c0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80019ca:	2101      	movs	r1, #1
 80019cc:	fa01 f202 	lsl.w	r2, r1, r2
 80019d0:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	2201      	movs	r2, #1
 80019d6:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	2201      	movs	r2, #1
 80019dc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2200      	movs	r2, #0
 80019e4:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d004      	beq.n	80019fa <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019f4:	6878      	ldr	r0, [r7, #4]
 80019f6:	4798      	blx	r3
    }
  }
  return;
 80019f8:	bf00      	nop
 80019fa:	bf00      	nop
}
 80019fc:	3710      	adds	r7, #16
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	40020080 	.word	0x40020080
 8001a08:	40020008 	.word	0x40020008
 8001a0c:	4002001c 	.word	0x4002001c
 8001a10:	40020030 	.word	0x40020030
 8001a14:	40020044 	.word	0x40020044
 8001a18:	40020058 	.word	0x40020058
 8001a1c:	4002006c 	.word	0x4002006c
 8001a20:	40020408 	.word	0x40020408
 8001a24:	4002041c 	.word	0x4002041c
 8001a28:	40020430 	.word	0x40020430
 8001a2c:	40020444 	.word	0x40020444
 8001a30:	40020400 	.word	0x40020400
 8001a34:	40020000 	.word	0x40020000

08001a38 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b085      	sub	sp, #20
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	60f8      	str	r0, [r7, #12]
 8001a40:	60b9      	str	r1, [r7, #8]
 8001a42:	607a      	str	r2, [r7, #4]
 8001a44:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a4e:	2101      	movs	r1, #1
 8001a50:	fa01 f202 	lsl.w	r2, r1, r2
 8001a54:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	683a      	ldr	r2, [r7, #0]
 8001a5c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	2b10      	cmp	r3, #16
 8001a64:	d108      	bne.n	8001a78 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	687a      	ldr	r2, [r7, #4]
 8001a6c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	68ba      	ldr	r2, [r7, #8]
 8001a74:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001a76:	e007      	b.n	8001a88 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	68ba      	ldr	r2, [r7, #8]
 8001a7e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	687a      	ldr	r2, [r7, #4]
 8001a86:	60da      	str	r2, [r3, #12]
}
 8001a88:	bf00      	nop
 8001a8a:	3714      	adds	r7, #20
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bc80      	pop	{r7}
 8001a90:	4770      	bx	lr
	...

08001a94 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b08b      	sub	sp, #44	@ 0x2c
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
 8001a9c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001aa6:	e179      	b.n	8001d9c <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001aa8:	2201      	movs	r2, #1
 8001aaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001aac:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	69fa      	ldr	r2, [r7, #28]
 8001ab8:	4013      	ands	r3, r2
 8001aba:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001abc:	69ba      	ldr	r2, [r7, #24]
 8001abe:	69fb      	ldr	r3, [r7, #28]
 8001ac0:	429a      	cmp	r2, r3
 8001ac2:	f040 8168 	bne.w	8001d96 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	4a96      	ldr	r2, [pc, #600]	@ (8001d24 <HAL_GPIO_Init+0x290>)
 8001acc:	4293      	cmp	r3, r2
 8001ace:	d05e      	beq.n	8001b8e <HAL_GPIO_Init+0xfa>
 8001ad0:	4a94      	ldr	r2, [pc, #592]	@ (8001d24 <HAL_GPIO_Init+0x290>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d875      	bhi.n	8001bc2 <HAL_GPIO_Init+0x12e>
 8001ad6:	4a94      	ldr	r2, [pc, #592]	@ (8001d28 <HAL_GPIO_Init+0x294>)
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	d058      	beq.n	8001b8e <HAL_GPIO_Init+0xfa>
 8001adc:	4a92      	ldr	r2, [pc, #584]	@ (8001d28 <HAL_GPIO_Init+0x294>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d86f      	bhi.n	8001bc2 <HAL_GPIO_Init+0x12e>
 8001ae2:	4a92      	ldr	r2, [pc, #584]	@ (8001d2c <HAL_GPIO_Init+0x298>)
 8001ae4:	4293      	cmp	r3, r2
 8001ae6:	d052      	beq.n	8001b8e <HAL_GPIO_Init+0xfa>
 8001ae8:	4a90      	ldr	r2, [pc, #576]	@ (8001d2c <HAL_GPIO_Init+0x298>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d869      	bhi.n	8001bc2 <HAL_GPIO_Init+0x12e>
 8001aee:	4a90      	ldr	r2, [pc, #576]	@ (8001d30 <HAL_GPIO_Init+0x29c>)
 8001af0:	4293      	cmp	r3, r2
 8001af2:	d04c      	beq.n	8001b8e <HAL_GPIO_Init+0xfa>
 8001af4:	4a8e      	ldr	r2, [pc, #568]	@ (8001d30 <HAL_GPIO_Init+0x29c>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d863      	bhi.n	8001bc2 <HAL_GPIO_Init+0x12e>
 8001afa:	4a8e      	ldr	r2, [pc, #568]	@ (8001d34 <HAL_GPIO_Init+0x2a0>)
 8001afc:	4293      	cmp	r3, r2
 8001afe:	d046      	beq.n	8001b8e <HAL_GPIO_Init+0xfa>
 8001b00:	4a8c      	ldr	r2, [pc, #560]	@ (8001d34 <HAL_GPIO_Init+0x2a0>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d85d      	bhi.n	8001bc2 <HAL_GPIO_Init+0x12e>
 8001b06:	2b12      	cmp	r3, #18
 8001b08:	d82a      	bhi.n	8001b60 <HAL_GPIO_Init+0xcc>
 8001b0a:	2b12      	cmp	r3, #18
 8001b0c:	d859      	bhi.n	8001bc2 <HAL_GPIO_Init+0x12e>
 8001b0e:	a201      	add	r2, pc, #4	@ (adr r2, 8001b14 <HAL_GPIO_Init+0x80>)
 8001b10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b14:	08001b8f 	.word	0x08001b8f
 8001b18:	08001b69 	.word	0x08001b69
 8001b1c:	08001b7b 	.word	0x08001b7b
 8001b20:	08001bbd 	.word	0x08001bbd
 8001b24:	08001bc3 	.word	0x08001bc3
 8001b28:	08001bc3 	.word	0x08001bc3
 8001b2c:	08001bc3 	.word	0x08001bc3
 8001b30:	08001bc3 	.word	0x08001bc3
 8001b34:	08001bc3 	.word	0x08001bc3
 8001b38:	08001bc3 	.word	0x08001bc3
 8001b3c:	08001bc3 	.word	0x08001bc3
 8001b40:	08001bc3 	.word	0x08001bc3
 8001b44:	08001bc3 	.word	0x08001bc3
 8001b48:	08001bc3 	.word	0x08001bc3
 8001b4c:	08001bc3 	.word	0x08001bc3
 8001b50:	08001bc3 	.word	0x08001bc3
 8001b54:	08001bc3 	.word	0x08001bc3
 8001b58:	08001b71 	.word	0x08001b71
 8001b5c:	08001b85 	.word	0x08001b85
 8001b60:	4a75      	ldr	r2, [pc, #468]	@ (8001d38 <HAL_GPIO_Init+0x2a4>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d013      	beq.n	8001b8e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001b66:	e02c      	b.n	8001bc2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	68db      	ldr	r3, [r3, #12]
 8001b6c:	623b      	str	r3, [r7, #32]
          break;
 8001b6e:	e029      	b.n	8001bc4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	68db      	ldr	r3, [r3, #12]
 8001b74:	3304      	adds	r3, #4
 8001b76:	623b      	str	r3, [r7, #32]
          break;
 8001b78:	e024      	b.n	8001bc4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	68db      	ldr	r3, [r3, #12]
 8001b7e:	3308      	adds	r3, #8
 8001b80:	623b      	str	r3, [r7, #32]
          break;
 8001b82:	e01f      	b.n	8001bc4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	68db      	ldr	r3, [r3, #12]
 8001b88:	330c      	adds	r3, #12
 8001b8a:	623b      	str	r3, [r7, #32]
          break;
 8001b8c:	e01a      	b.n	8001bc4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	689b      	ldr	r3, [r3, #8]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d102      	bne.n	8001b9c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001b96:	2304      	movs	r3, #4
 8001b98:	623b      	str	r3, [r7, #32]
          break;
 8001b9a:	e013      	b.n	8001bc4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	689b      	ldr	r3, [r3, #8]
 8001ba0:	2b01      	cmp	r3, #1
 8001ba2:	d105      	bne.n	8001bb0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ba4:	2308      	movs	r3, #8
 8001ba6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	69fa      	ldr	r2, [r7, #28]
 8001bac:	611a      	str	r2, [r3, #16]
          break;
 8001bae:	e009      	b.n	8001bc4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001bb0:	2308      	movs	r3, #8
 8001bb2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	69fa      	ldr	r2, [r7, #28]
 8001bb8:	615a      	str	r2, [r3, #20]
          break;
 8001bba:	e003      	b.n	8001bc4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	623b      	str	r3, [r7, #32]
          break;
 8001bc0:	e000      	b.n	8001bc4 <HAL_GPIO_Init+0x130>
          break;
 8001bc2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001bc4:	69bb      	ldr	r3, [r7, #24]
 8001bc6:	2bff      	cmp	r3, #255	@ 0xff
 8001bc8:	d801      	bhi.n	8001bce <HAL_GPIO_Init+0x13a>
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	e001      	b.n	8001bd2 <HAL_GPIO_Init+0x13e>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	3304      	adds	r3, #4
 8001bd2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001bd4:	69bb      	ldr	r3, [r7, #24]
 8001bd6:	2bff      	cmp	r3, #255	@ 0xff
 8001bd8:	d802      	bhi.n	8001be0 <HAL_GPIO_Init+0x14c>
 8001bda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bdc:	009b      	lsls	r3, r3, #2
 8001bde:	e002      	b.n	8001be6 <HAL_GPIO_Init+0x152>
 8001be0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001be2:	3b08      	subs	r3, #8
 8001be4:	009b      	lsls	r3, r3, #2
 8001be6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001be8:	697b      	ldr	r3, [r7, #20]
 8001bea:	681a      	ldr	r2, [r3, #0]
 8001bec:	210f      	movs	r1, #15
 8001bee:	693b      	ldr	r3, [r7, #16]
 8001bf0:	fa01 f303 	lsl.w	r3, r1, r3
 8001bf4:	43db      	mvns	r3, r3
 8001bf6:	401a      	ands	r2, r3
 8001bf8:	6a39      	ldr	r1, [r7, #32]
 8001bfa:	693b      	ldr	r3, [r7, #16]
 8001bfc:	fa01 f303 	lsl.w	r3, r1, r3
 8001c00:	431a      	orrs	r2, r3
 8001c02:	697b      	ldr	r3, [r7, #20]
 8001c04:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	f000 80c1 	beq.w	8001d96 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001c14:	4b49      	ldr	r3, [pc, #292]	@ (8001d3c <HAL_GPIO_Init+0x2a8>)
 8001c16:	699b      	ldr	r3, [r3, #24]
 8001c18:	4a48      	ldr	r2, [pc, #288]	@ (8001d3c <HAL_GPIO_Init+0x2a8>)
 8001c1a:	f043 0301 	orr.w	r3, r3, #1
 8001c1e:	6193      	str	r3, [r2, #24]
 8001c20:	4b46      	ldr	r3, [pc, #280]	@ (8001d3c <HAL_GPIO_Init+0x2a8>)
 8001c22:	699b      	ldr	r3, [r3, #24]
 8001c24:	f003 0301 	and.w	r3, r3, #1
 8001c28:	60bb      	str	r3, [r7, #8]
 8001c2a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001c2c:	4a44      	ldr	r2, [pc, #272]	@ (8001d40 <HAL_GPIO_Init+0x2ac>)
 8001c2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c30:	089b      	lsrs	r3, r3, #2
 8001c32:	3302      	adds	r3, #2
 8001c34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c38:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001c3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c3c:	f003 0303 	and.w	r3, r3, #3
 8001c40:	009b      	lsls	r3, r3, #2
 8001c42:	220f      	movs	r2, #15
 8001c44:	fa02 f303 	lsl.w	r3, r2, r3
 8001c48:	43db      	mvns	r3, r3
 8001c4a:	68fa      	ldr	r2, [r7, #12]
 8001c4c:	4013      	ands	r3, r2
 8001c4e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	4a3c      	ldr	r2, [pc, #240]	@ (8001d44 <HAL_GPIO_Init+0x2b0>)
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d01f      	beq.n	8001c98 <HAL_GPIO_Init+0x204>
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	4a3b      	ldr	r2, [pc, #236]	@ (8001d48 <HAL_GPIO_Init+0x2b4>)
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d019      	beq.n	8001c94 <HAL_GPIO_Init+0x200>
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	4a3a      	ldr	r2, [pc, #232]	@ (8001d4c <HAL_GPIO_Init+0x2b8>)
 8001c64:	4293      	cmp	r3, r2
 8001c66:	d013      	beq.n	8001c90 <HAL_GPIO_Init+0x1fc>
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	4a39      	ldr	r2, [pc, #228]	@ (8001d50 <HAL_GPIO_Init+0x2bc>)
 8001c6c:	4293      	cmp	r3, r2
 8001c6e:	d00d      	beq.n	8001c8c <HAL_GPIO_Init+0x1f8>
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	4a38      	ldr	r2, [pc, #224]	@ (8001d54 <HAL_GPIO_Init+0x2c0>)
 8001c74:	4293      	cmp	r3, r2
 8001c76:	d007      	beq.n	8001c88 <HAL_GPIO_Init+0x1f4>
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	4a37      	ldr	r2, [pc, #220]	@ (8001d58 <HAL_GPIO_Init+0x2c4>)
 8001c7c:	4293      	cmp	r3, r2
 8001c7e:	d101      	bne.n	8001c84 <HAL_GPIO_Init+0x1f0>
 8001c80:	2305      	movs	r3, #5
 8001c82:	e00a      	b.n	8001c9a <HAL_GPIO_Init+0x206>
 8001c84:	2306      	movs	r3, #6
 8001c86:	e008      	b.n	8001c9a <HAL_GPIO_Init+0x206>
 8001c88:	2304      	movs	r3, #4
 8001c8a:	e006      	b.n	8001c9a <HAL_GPIO_Init+0x206>
 8001c8c:	2303      	movs	r3, #3
 8001c8e:	e004      	b.n	8001c9a <HAL_GPIO_Init+0x206>
 8001c90:	2302      	movs	r3, #2
 8001c92:	e002      	b.n	8001c9a <HAL_GPIO_Init+0x206>
 8001c94:	2301      	movs	r3, #1
 8001c96:	e000      	b.n	8001c9a <HAL_GPIO_Init+0x206>
 8001c98:	2300      	movs	r3, #0
 8001c9a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c9c:	f002 0203 	and.w	r2, r2, #3
 8001ca0:	0092      	lsls	r2, r2, #2
 8001ca2:	4093      	lsls	r3, r2
 8001ca4:	68fa      	ldr	r2, [r7, #12]
 8001ca6:	4313      	orrs	r3, r2
 8001ca8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001caa:	4925      	ldr	r1, [pc, #148]	@ (8001d40 <HAL_GPIO_Init+0x2ac>)
 8001cac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cae:	089b      	lsrs	r3, r3, #2
 8001cb0:	3302      	adds	r3, #2
 8001cb2:	68fa      	ldr	r2, [r7, #12]
 8001cb4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d006      	beq.n	8001cd2 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001cc4:	4b25      	ldr	r3, [pc, #148]	@ (8001d5c <HAL_GPIO_Init+0x2c8>)
 8001cc6:	689a      	ldr	r2, [r3, #8]
 8001cc8:	4924      	ldr	r1, [pc, #144]	@ (8001d5c <HAL_GPIO_Init+0x2c8>)
 8001cca:	69bb      	ldr	r3, [r7, #24]
 8001ccc:	4313      	orrs	r3, r2
 8001cce:	608b      	str	r3, [r1, #8]
 8001cd0:	e006      	b.n	8001ce0 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001cd2:	4b22      	ldr	r3, [pc, #136]	@ (8001d5c <HAL_GPIO_Init+0x2c8>)
 8001cd4:	689a      	ldr	r2, [r3, #8]
 8001cd6:	69bb      	ldr	r3, [r7, #24]
 8001cd8:	43db      	mvns	r3, r3
 8001cda:	4920      	ldr	r1, [pc, #128]	@ (8001d5c <HAL_GPIO_Init+0x2c8>)
 8001cdc:	4013      	ands	r3, r2
 8001cde:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d006      	beq.n	8001cfa <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001cec:	4b1b      	ldr	r3, [pc, #108]	@ (8001d5c <HAL_GPIO_Init+0x2c8>)
 8001cee:	68da      	ldr	r2, [r3, #12]
 8001cf0:	491a      	ldr	r1, [pc, #104]	@ (8001d5c <HAL_GPIO_Init+0x2c8>)
 8001cf2:	69bb      	ldr	r3, [r7, #24]
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	60cb      	str	r3, [r1, #12]
 8001cf8:	e006      	b.n	8001d08 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001cfa:	4b18      	ldr	r3, [pc, #96]	@ (8001d5c <HAL_GPIO_Init+0x2c8>)
 8001cfc:	68da      	ldr	r2, [r3, #12]
 8001cfe:	69bb      	ldr	r3, [r7, #24]
 8001d00:	43db      	mvns	r3, r3
 8001d02:	4916      	ldr	r1, [pc, #88]	@ (8001d5c <HAL_GPIO_Init+0x2c8>)
 8001d04:	4013      	ands	r3, r2
 8001d06:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d025      	beq.n	8001d60 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001d14:	4b11      	ldr	r3, [pc, #68]	@ (8001d5c <HAL_GPIO_Init+0x2c8>)
 8001d16:	685a      	ldr	r2, [r3, #4]
 8001d18:	4910      	ldr	r1, [pc, #64]	@ (8001d5c <HAL_GPIO_Init+0x2c8>)
 8001d1a:	69bb      	ldr	r3, [r7, #24]
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	604b      	str	r3, [r1, #4]
 8001d20:	e025      	b.n	8001d6e <HAL_GPIO_Init+0x2da>
 8001d22:	bf00      	nop
 8001d24:	10320000 	.word	0x10320000
 8001d28:	10310000 	.word	0x10310000
 8001d2c:	10220000 	.word	0x10220000
 8001d30:	10210000 	.word	0x10210000
 8001d34:	10120000 	.word	0x10120000
 8001d38:	10110000 	.word	0x10110000
 8001d3c:	40021000 	.word	0x40021000
 8001d40:	40010000 	.word	0x40010000
 8001d44:	40010800 	.word	0x40010800
 8001d48:	40010c00 	.word	0x40010c00
 8001d4c:	40011000 	.word	0x40011000
 8001d50:	40011400 	.word	0x40011400
 8001d54:	40011800 	.word	0x40011800
 8001d58:	40011c00 	.word	0x40011c00
 8001d5c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001d60:	4b15      	ldr	r3, [pc, #84]	@ (8001db8 <HAL_GPIO_Init+0x324>)
 8001d62:	685a      	ldr	r2, [r3, #4]
 8001d64:	69bb      	ldr	r3, [r7, #24]
 8001d66:	43db      	mvns	r3, r3
 8001d68:	4913      	ldr	r1, [pc, #76]	@ (8001db8 <HAL_GPIO_Init+0x324>)
 8001d6a:	4013      	ands	r3, r2
 8001d6c:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d006      	beq.n	8001d88 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001d7a:	4b0f      	ldr	r3, [pc, #60]	@ (8001db8 <HAL_GPIO_Init+0x324>)
 8001d7c:	681a      	ldr	r2, [r3, #0]
 8001d7e:	490e      	ldr	r1, [pc, #56]	@ (8001db8 <HAL_GPIO_Init+0x324>)
 8001d80:	69bb      	ldr	r3, [r7, #24]
 8001d82:	4313      	orrs	r3, r2
 8001d84:	600b      	str	r3, [r1, #0]
 8001d86:	e006      	b.n	8001d96 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001d88:	4b0b      	ldr	r3, [pc, #44]	@ (8001db8 <HAL_GPIO_Init+0x324>)
 8001d8a:	681a      	ldr	r2, [r3, #0]
 8001d8c:	69bb      	ldr	r3, [r7, #24]
 8001d8e:	43db      	mvns	r3, r3
 8001d90:	4909      	ldr	r1, [pc, #36]	@ (8001db8 <HAL_GPIO_Init+0x324>)
 8001d92:	4013      	ands	r3, r2
 8001d94:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001d96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d98:	3301      	adds	r3, #1
 8001d9a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	681a      	ldr	r2, [r3, #0]
 8001da0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001da2:	fa22 f303 	lsr.w	r3, r2, r3
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	f47f ae7e 	bne.w	8001aa8 <HAL_GPIO_Init+0x14>
  }
}
 8001dac:	bf00      	nop
 8001dae:	bf00      	nop
 8001db0:	372c      	adds	r7, #44	@ 0x2c
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bc80      	pop	{r7}
 8001db6:	4770      	bx	lr
 8001db8:	40010400 	.word	0x40010400

08001dbc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b083      	sub	sp, #12
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
 8001dc4:	460b      	mov	r3, r1
 8001dc6:	807b      	strh	r3, [r7, #2]
 8001dc8:	4613      	mov	r3, r2
 8001dca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001dcc:	787b      	ldrb	r3, [r7, #1]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d003      	beq.n	8001dda <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001dd2:	887a      	ldrh	r2, [r7, #2]
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001dd8:	e003      	b.n	8001de2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001dda:	887b      	ldrh	r3, [r7, #2]
 8001ddc:	041a      	lsls	r2, r3, #16
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	611a      	str	r2, [r3, #16]
}
 8001de2:	bf00      	nop
 8001de4:	370c      	adds	r7, #12
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bc80      	pop	{r7}
 8001dea:	4770      	bx	lr

08001dec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b086      	sub	sp, #24
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d101      	bne.n	8001dfe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	e272      	b.n	80022e4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f003 0301 	and.w	r3, r3, #1
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	f000 8087 	beq.w	8001f1a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e0c:	4b92      	ldr	r3, [pc, #584]	@ (8002058 <HAL_RCC_OscConfig+0x26c>)
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	f003 030c 	and.w	r3, r3, #12
 8001e14:	2b04      	cmp	r3, #4
 8001e16:	d00c      	beq.n	8001e32 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001e18:	4b8f      	ldr	r3, [pc, #572]	@ (8002058 <HAL_RCC_OscConfig+0x26c>)
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	f003 030c 	and.w	r3, r3, #12
 8001e20:	2b08      	cmp	r3, #8
 8001e22:	d112      	bne.n	8001e4a <HAL_RCC_OscConfig+0x5e>
 8001e24:	4b8c      	ldr	r3, [pc, #560]	@ (8002058 <HAL_RCC_OscConfig+0x26c>)
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e30:	d10b      	bne.n	8001e4a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e32:	4b89      	ldr	r3, [pc, #548]	@ (8002058 <HAL_RCC_OscConfig+0x26c>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d06c      	beq.n	8001f18 <HAL_RCC_OscConfig+0x12c>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d168      	bne.n	8001f18 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001e46:	2301      	movs	r3, #1
 8001e48:	e24c      	b.n	80022e4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e52:	d106      	bne.n	8001e62 <HAL_RCC_OscConfig+0x76>
 8001e54:	4b80      	ldr	r3, [pc, #512]	@ (8002058 <HAL_RCC_OscConfig+0x26c>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a7f      	ldr	r2, [pc, #508]	@ (8002058 <HAL_RCC_OscConfig+0x26c>)
 8001e5a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e5e:	6013      	str	r3, [r2, #0]
 8001e60:	e02e      	b.n	8001ec0 <HAL_RCC_OscConfig+0xd4>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d10c      	bne.n	8001e84 <HAL_RCC_OscConfig+0x98>
 8001e6a:	4b7b      	ldr	r3, [pc, #492]	@ (8002058 <HAL_RCC_OscConfig+0x26c>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4a7a      	ldr	r2, [pc, #488]	@ (8002058 <HAL_RCC_OscConfig+0x26c>)
 8001e70:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001e74:	6013      	str	r3, [r2, #0]
 8001e76:	4b78      	ldr	r3, [pc, #480]	@ (8002058 <HAL_RCC_OscConfig+0x26c>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4a77      	ldr	r2, [pc, #476]	@ (8002058 <HAL_RCC_OscConfig+0x26c>)
 8001e7c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001e80:	6013      	str	r3, [r2, #0]
 8001e82:	e01d      	b.n	8001ec0 <HAL_RCC_OscConfig+0xd4>
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001e8c:	d10c      	bne.n	8001ea8 <HAL_RCC_OscConfig+0xbc>
 8001e8e:	4b72      	ldr	r3, [pc, #456]	@ (8002058 <HAL_RCC_OscConfig+0x26c>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4a71      	ldr	r2, [pc, #452]	@ (8002058 <HAL_RCC_OscConfig+0x26c>)
 8001e94:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001e98:	6013      	str	r3, [r2, #0]
 8001e9a:	4b6f      	ldr	r3, [pc, #444]	@ (8002058 <HAL_RCC_OscConfig+0x26c>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4a6e      	ldr	r2, [pc, #440]	@ (8002058 <HAL_RCC_OscConfig+0x26c>)
 8001ea0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ea4:	6013      	str	r3, [r2, #0]
 8001ea6:	e00b      	b.n	8001ec0 <HAL_RCC_OscConfig+0xd4>
 8001ea8:	4b6b      	ldr	r3, [pc, #428]	@ (8002058 <HAL_RCC_OscConfig+0x26c>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a6a      	ldr	r2, [pc, #424]	@ (8002058 <HAL_RCC_OscConfig+0x26c>)
 8001eae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001eb2:	6013      	str	r3, [r2, #0]
 8001eb4:	4b68      	ldr	r3, [pc, #416]	@ (8002058 <HAL_RCC_OscConfig+0x26c>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a67      	ldr	r2, [pc, #412]	@ (8002058 <HAL_RCC_OscConfig+0x26c>)
 8001eba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001ebe:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d013      	beq.n	8001ef0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ec8:	f7fe fdae 	bl	8000a28 <HAL_GetTick>
 8001ecc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ece:	e008      	b.n	8001ee2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ed0:	f7fe fdaa 	bl	8000a28 <HAL_GetTick>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	693b      	ldr	r3, [r7, #16]
 8001ed8:	1ad3      	subs	r3, r2, r3
 8001eda:	2b64      	cmp	r3, #100	@ 0x64
 8001edc:	d901      	bls.n	8001ee2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001ede:	2303      	movs	r3, #3
 8001ee0:	e200      	b.n	80022e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ee2:	4b5d      	ldr	r3, [pc, #372]	@ (8002058 <HAL_RCC_OscConfig+0x26c>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d0f0      	beq.n	8001ed0 <HAL_RCC_OscConfig+0xe4>
 8001eee:	e014      	b.n	8001f1a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ef0:	f7fe fd9a 	bl	8000a28 <HAL_GetTick>
 8001ef4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ef6:	e008      	b.n	8001f0a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ef8:	f7fe fd96 	bl	8000a28 <HAL_GetTick>
 8001efc:	4602      	mov	r2, r0
 8001efe:	693b      	ldr	r3, [r7, #16]
 8001f00:	1ad3      	subs	r3, r2, r3
 8001f02:	2b64      	cmp	r3, #100	@ 0x64
 8001f04:	d901      	bls.n	8001f0a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001f06:	2303      	movs	r3, #3
 8001f08:	e1ec      	b.n	80022e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f0a:	4b53      	ldr	r3, [pc, #332]	@ (8002058 <HAL_RCC_OscConfig+0x26c>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d1f0      	bne.n	8001ef8 <HAL_RCC_OscConfig+0x10c>
 8001f16:	e000      	b.n	8001f1a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f003 0302 	and.w	r3, r3, #2
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d063      	beq.n	8001fee <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f26:	4b4c      	ldr	r3, [pc, #304]	@ (8002058 <HAL_RCC_OscConfig+0x26c>)
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	f003 030c 	and.w	r3, r3, #12
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d00b      	beq.n	8001f4a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001f32:	4b49      	ldr	r3, [pc, #292]	@ (8002058 <HAL_RCC_OscConfig+0x26c>)
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	f003 030c 	and.w	r3, r3, #12
 8001f3a:	2b08      	cmp	r3, #8
 8001f3c:	d11c      	bne.n	8001f78 <HAL_RCC_OscConfig+0x18c>
 8001f3e:	4b46      	ldr	r3, [pc, #280]	@ (8002058 <HAL_RCC_OscConfig+0x26c>)
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d116      	bne.n	8001f78 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f4a:	4b43      	ldr	r3, [pc, #268]	@ (8002058 <HAL_RCC_OscConfig+0x26c>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f003 0302 	and.w	r3, r3, #2
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d005      	beq.n	8001f62 <HAL_RCC_OscConfig+0x176>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	691b      	ldr	r3, [r3, #16]
 8001f5a:	2b01      	cmp	r3, #1
 8001f5c:	d001      	beq.n	8001f62 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e1c0      	b.n	80022e4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f62:	4b3d      	ldr	r3, [pc, #244]	@ (8002058 <HAL_RCC_OscConfig+0x26c>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	695b      	ldr	r3, [r3, #20]
 8001f6e:	00db      	lsls	r3, r3, #3
 8001f70:	4939      	ldr	r1, [pc, #228]	@ (8002058 <HAL_RCC_OscConfig+0x26c>)
 8001f72:	4313      	orrs	r3, r2
 8001f74:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f76:	e03a      	b.n	8001fee <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	691b      	ldr	r3, [r3, #16]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d020      	beq.n	8001fc2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f80:	4b36      	ldr	r3, [pc, #216]	@ (800205c <HAL_RCC_OscConfig+0x270>)
 8001f82:	2201      	movs	r2, #1
 8001f84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f86:	f7fe fd4f 	bl	8000a28 <HAL_GetTick>
 8001f8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f8c:	e008      	b.n	8001fa0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f8e:	f7fe fd4b 	bl	8000a28 <HAL_GetTick>
 8001f92:	4602      	mov	r2, r0
 8001f94:	693b      	ldr	r3, [r7, #16]
 8001f96:	1ad3      	subs	r3, r2, r3
 8001f98:	2b02      	cmp	r3, #2
 8001f9a:	d901      	bls.n	8001fa0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001f9c:	2303      	movs	r3, #3
 8001f9e:	e1a1      	b.n	80022e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fa0:	4b2d      	ldr	r3, [pc, #180]	@ (8002058 <HAL_RCC_OscConfig+0x26c>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f003 0302 	and.w	r3, r3, #2
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d0f0      	beq.n	8001f8e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fac:	4b2a      	ldr	r3, [pc, #168]	@ (8002058 <HAL_RCC_OscConfig+0x26c>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	695b      	ldr	r3, [r3, #20]
 8001fb8:	00db      	lsls	r3, r3, #3
 8001fba:	4927      	ldr	r1, [pc, #156]	@ (8002058 <HAL_RCC_OscConfig+0x26c>)
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	600b      	str	r3, [r1, #0]
 8001fc0:	e015      	b.n	8001fee <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fc2:	4b26      	ldr	r3, [pc, #152]	@ (800205c <HAL_RCC_OscConfig+0x270>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fc8:	f7fe fd2e 	bl	8000a28 <HAL_GetTick>
 8001fcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fce:	e008      	b.n	8001fe2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fd0:	f7fe fd2a 	bl	8000a28 <HAL_GetTick>
 8001fd4:	4602      	mov	r2, r0
 8001fd6:	693b      	ldr	r3, [r7, #16]
 8001fd8:	1ad3      	subs	r3, r2, r3
 8001fda:	2b02      	cmp	r3, #2
 8001fdc:	d901      	bls.n	8001fe2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001fde:	2303      	movs	r3, #3
 8001fe0:	e180      	b.n	80022e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fe2:	4b1d      	ldr	r3, [pc, #116]	@ (8002058 <HAL_RCC_OscConfig+0x26c>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f003 0302 	and.w	r3, r3, #2
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d1f0      	bne.n	8001fd0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f003 0308 	and.w	r3, r3, #8
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d03a      	beq.n	8002070 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	699b      	ldr	r3, [r3, #24]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d019      	beq.n	8002036 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002002:	4b17      	ldr	r3, [pc, #92]	@ (8002060 <HAL_RCC_OscConfig+0x274>)
 8002004:	2201      	movs	r2, #1
 8002006:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002008:	f7fe fd0e 	bl	8000a28 <HAL_GetTick>
 800200c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800200e:	e008      	b.n	8002022 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002010:	f7fe fd0a 	bl	8000a28 <HAL_GetTick>
 8002014:	4602      	mov	r2, r0
 8002016:	693b      	ldr	r3, [r7, #16]
 8002018:	1ad3      	subs	r3, r2, r3
 800201a:	2b02      	cmp	r3, #2
 800201c:	d901      	bls.n	8002022 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800201e:	2303      	movs	r3, #3
 8002020:	e160      	b.n	80022e4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002022:	4b0d      	ldr	r3, [pc, #52]	@ (8002058 <HAL_RCC_OscConfig+0x26c>)
 8002024:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002026:	f003 0302 	and.w	r3, r3, #2
 800202a:	2b00      	cmp	r3, #0
 800202c:	d0f0      	beq.n	8002010 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800202e:	2001      	movs	r0, #1
 8002030:	f000 fa9c 	bl	800256c <RCC_Delay>
 8002034:	e01c      	b.n	8002070 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002036:	4b0a      	ldr	r3, [pc, #40]	@ (8002060 <HAL_RCC_OscConfig+0x274>)
 8002038:	2200      	movs	r2, #0
 800203a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800203c:	f7fe fcf4 	bl	8000a28 <HAL_GetTick>
 8002040:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002042:	e00f      	b.n	8002064 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002044:	f7fe fcf0 	bl	8000a28 <HAL_GetTick>
 8002048:	4602      	mov	r2, r0
 800204a:	693b      	ldr	r3, [r7, #16]
 800204c:	1ad3      	subs	r3, r2, r3
 800204e:	2b02      	cmp	r3, #2
 8002050:	d908      	bls.n	8002064 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002052:	2303      	movs	r3, #3
 8002054:	e146      	b.n	80022e4 <HAL_RCC_OscConfig+0x4f8>
 8002056:	bf00      	nop
 8002058:	40021000 	.word	0x40021000
 800205c:	42420000 	.word	0x42420000
 8002060:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002064:	4b92      	ldr	r3, [pc, #584]	@ (80022b0 <HAL_RCC_OscConfig+0x4c4>)
 8002066:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002068:	f003 0302 	and.w	r3, r3, #2
 800206c:	2b00      	cmp	r3, #0
 800206e:	d1e9      	bne.n	8002044 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f003 0304 	and.w	r3, r3, #4
 8002078:	2b00      	cmp	r3, #0
 800207a:	f000 80a6 	beq.w	80021ca <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800207e:	2300      	movs	r3, #0
 8002080:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002082:	4b8b      	ldr	r3, [pc, #556]	@ (80022b0 <HAL_RCC_OscConfig+0x4c4>)
 8002084:	69db      	ldr	r3, [r3, #28]
 8002086:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800208a:	2b00      	cmp	r3, #0
 800208c:	d10d      	bne.n	80020aa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800208e:	4b88      	ldr	r3, [pc, #544]	@ (80022b0 <HAL_RCC_OscConfig+0x4c4>)
 8002090:	69db      	ldr	r3, [r3, #28]
 8002092:	4a87      	ldr	r2, [pc, #540]	@ (80022b0 <HAL_RCC_OscConfig+0x4c4>)
 8002094:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002098:	61d3      	str	r3, [r2, #28]
 800209a:	4b85      	ldr	r3, [pc, #532]	@ (80022b0 <HAL_RCC_OscConfig+0x4c4>)
 800209c:	69db      	ldr	r3, [r3, #28]
 800209e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020a2:	60bb      	str	r3, [r7, #8]
 80020a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020a6:	2301      	movs	r3, #1
 80020a8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020aa:	4b82      	ldr	r3, [pc, #520]	@ (80022b4 <HAL_RCC_OscConfig+0x4c8>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d118      	bne.n	80020e8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020b6:	4b7f      	ldr	r3, [pc, #508]	@ (80022b4 <HAL_RCC_OscConfig+0x4c8>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4a7e      	ldr	r2, [pc, #504]	@ (80022b4 <HAL_RCC_OscConfig+0x4c8>)
 80020bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020c2:	f7fe fcb1 	bl	8000a28 <HAL_GetTick>
 80020c6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020c8:	e008      	b.n	80020dc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020ca:	f7fe fcad 	bl	8000a28 <HAL_GetTick>
 80020ce:	4602      	mov	r2, r0
 80020d0:	693b      	ldr	r3, [r7, #16]
 80020d2:	1ad3      	subs	r3, r2, r3
 80020d4:	2b64      	cmp	r3, #100	@ 0x64
 80020d6:	d901      	bls.n	80020dc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80020d8:	2303      	movs	r3, #3
 80020da:	e103      	b.n	80022e4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020dc:	4b75      	ldr	r3, [pc, #468]	@ (80022b4 <HAL_RCC_OscConfig+0x4c8>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d0f0      	beq.n	80020ca <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	68db      	ldr	r3, [r3, #12]
 80020ec:	2b01      	cmp	r3, #1
 80020ee:	d106      	bne.n	80020fe <HAL_RCC_OscConfig+0x312>
 80020f0:	4b6f      	ldr	r3, [pc, #444]	@ (80022b0 <HAL_RCC_OscConfig+0x4c4>)
 80020f2:	6a1b      	ldr	r3, [r3, #32]
 80020f4:	4a6e      	ldr	r2, [pc, #440]	@ (80022b0 <HAL_RCC_OscConfig+0x4c4>)
 80020f6:	f043 0301 	orr.w	r3, r3, #1
 80020fa:	6213      	str	r3, [r2, #32]
 80020fc:	e02d      	b.n	800215a <HAL_RCC_OscConfig+0x36e>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	68db      	ldr	r3, [r3, #12]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d10c      	bne.n	8002120 <HAL_RCC_OscConfig+0x334>
 8002106:	4b6a      	ldr	r3, [pc, #424]	@ (80022b0 <HAL_RCC_OscConfig+0x4c4>)
 8002108:	6a1b      	ldr	r3, [r3, #32]
 800210a:	4a69      	ldr	r2, [pc, #420]	@ (80022b0 <HAL_RCC_OscConfig+0x4c4>)
 800210c:	f023 0301 	bic.w	r3, r3, #1
 8002110:	6213      	str	r3, [r2, #32]
 8002112:	4b67      	ldr	r3, [pc, #412]	@ (80022b0 <HAL_RCC_OscConfig+0x4c4>)
 8002114:	6a1b      	ldr	r3, [r3, #32]
 8002116:	4a66      	ldr	r2, [pc, #408]	@ (80022b0 <HAL_RCC_OscConfig+0x4c4>)
 8002118:	f023 0304 	bic.w	r3, r3, #4
 800211c:	6213      	str	r3, [r2, #32]
 800211e:	e01c      	b.n	800215a <HAL_RCC_OscConfig+0x36e>
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	68db      	ldr	r3, [r3, #12]
 8002124:	2b05      	cmp	r3, #5
 8002126:	d10c      	bne.n	8002142 <HAL_RCC_OscConfig+0x356>
 8002128:	4b61      	ldr	r3, [pc, #388]	@ (80022b0 <HAL_RCC_OscConfig+0x4c4>)
 800212a:	6a1b      	ldr	r3, [r3, #32]
 800212c:	4a60      	ldr	r2, [pc, #384]	@ (80022b0 <HAL_RCC_OscConfig+0x4c4>)
 800212e:	f043 0304 	orr.w	r3, r3, #4
 8002132:	6213      	str	r3, [r2, #32]
 8002134:	4b5e      	ldr	r3, [pc, #376]	@ (80022b0 <HAL_RCC_OscConfig+0x4c4>)
 8002136:	6a1b      	ldr	r3, [r3, #32]
 8002138:	4a5d      	ldr	r2, [pc, #372]	@ (80022b0 <HAL_RCC_OscConfig+0x4c4>)
 800213a:	f043 0301 	orr.w	r3, r3, #1
 800213e:	6213      	str	r3, [r2, #32]
 8002140:	e00b      	b.n	800215a <HAL_RCC_OscConfig+0x36e>
 8002142:	4b5b      	ldr	r3, [pc, #364]	@ (80022b0 <HAL_RCC_OscConfig+0x4c4>)
 8002144:	6a1b      	ldr	r3, [r3, #32]
 8002146:	4a5a      	ldr	r2, [pc, #360]	@ (80022b0 <HAL_RCC_OscConfig+0x4c4>)
 8002148:	f023 0301 	bic.w	r3, r3, #1
 800214c:	6213      	str	r3, [r2, #32]
 800214e:	4b58      	ldr	r3, [pc, #352]	@ (80022b0 <HAL_RCC_OscConfig+0x4c4>)
 8002150:	6a1b      	ldr	r3, [r3, #32]
 8002152:	4a57      	ldr	r2, [pc, #348]	@ (80022b0 <HAL_RCC_OscConfig+0x4c4>)
 8002154:	f023 0304 	bic.w	r3, r3, #4
 8002158:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	68db      	ldr	r3, [r3, #12]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d015      	beq.n	800218e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002162:	f7fe fc61 	bl	8000a28 <HAL_GetTick>
 8002166:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002168:	e00a      	b.n	8002180 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800216a:	f7fe fc5d 	bl	8000a28 <HAL_GetTick>
 800216e:	4602      	mov	r2, r0
 8002170:	693b      	ldr	r3, [r7, #16]
 8002172:	1ad3      	subs	r3, r2, r3
 8002174:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002178:	4293      	cmp	r3, r2
 800217a:	d901      	bls.n	8002180 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800217c:	2303      	movs	r3, #3
 800217e:	e0b1      	b.n	80022e4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002180:	4b4b      	ldr	r3, [pc, #300]	@ (80022b0 <HAL_RCC_OscConfig+0x4c4>)
 8002182:	6a1b      	ldr	r3, [r3, #32]
 8002184:	f003 0302 	and.w	r3, r3, #2
 8002188:	2b00      	cmp	r3, #0
 800218a:	d0ee      	beq.n	800216a <HAL_RCC_OscConfig+0x37e>
 800218c:	e014      	b.n	80021b8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800218e:	f7fe fc4b 	bl	8000a28 <HAL_GetTick>
 8002192:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002194:	e00a      	b.n	80021ac <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002196:	f7fe fc47 	bl	8000a28 <HAL_GetTick>
 800219a:	4602      	mov	r2, r0
 800219c:	693b      	ldr	r3, [r7, #16]
 800219e:	1ad3      	subs	r3, r2, r3
 80021a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d901      	bls.n	80021ac <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80021a8:	2303      	movs	r3, #3
 80021aa:	e09b      	b.n	80022e4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021ac:	4b40      	ldr	r3, [pc, #256]	@ (80022b0 <HAL_RCC_OscConfig+0x4c4>)
 80021ae:	6a1b      	ldr	r3, [r3, #32]
 80021b0:	f003 0302 	and.w	r3, r3, #2
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d1ee      	bne.n	8002196 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80021b8:	7dfb      	ldrb	r3, [r7, #23]
 80021ba:	2b01      	cmp	r3, #1
 80021bc:	d105      	bne.n	80021ca <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021be:	4b3c      	ldr	r3, [pc, #240]	@ (80022b0 <HAL_RCC_OscConfig+0x4c4>)
 80021c0:	69db      	ldr	r3, [r3, #28]
 80021c2:	4a3b      	ldr	r2, [pc, #236]	@ (80022b0 <HAL_RCC_OscConfig+0x4c4>)
 80021c4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80021c8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	69db      	ldr	r3, [r3, #28]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	f000 8087 	beq.w	80022e2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80021d4:	4b36      	ldr	r3, [pc, #216]	@ (80022b0 <HAL_RCC_OscConfig+0x4c4>)
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	f003 030c 	and.w	r3, r3, #12
 80021dc:	2b08      	cmp	r3, #8
 80021de:	d061      	beq.n	80022a4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	69db      	ldr	r3, [r3, #28]
 80021e4:	2b02      	cmp	r3, #2
 80021e6:	d146      	bne.n	8002276 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021e8:	4b33      	ldr	r3, [pc, #204]	@ (80022b8 <HAL_RCC_OscConfig+0x4cc>)
 80021ea:	2200      	movs	r2, #0
 80021ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021ee:	f7fe fc1b 	bl	8000a28 <HAL_GetTick>
 80021f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021f4:	e008      	b.n	8002208 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021f6:	f7fe fc17 	bl	8000a28 <HAL_GetTick>
 80021fa:	4602      	mov	r2, r0
 80021fc:	693b      	ldr	r3, [r7, #16]
 80021fe:	1ad3      	subs	r3, r2, r3
 8002200:	2b02      	cmp	r3, #2
 8002202:	d901      	bls.n	8002208 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002204:	2303      	movs	r3, #3
 8002206:	e06d      	b.n	80022e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002208:	4b29      	ldr	r3, [pc, #164]	@ (80022b0 <HAL_RCC_OscConfig+0x4c4>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002210:	2b00      	cmp	r3, #0
 8002212:	d1f0      	bne.n	80021f6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6a1b      	ldr	r3, [r3, #32]
 8002218:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800221c:	d108      	bne.n	8002230 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800221e:	4b24      	ldr	r3, [pc, #144]	@ (80022b0 <HAL_RCC_OscConfig+0x4c4>)
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	689b      	ldr	r3, [r3, #8]
 800222a:	4921      	ldr	r1, [pc, #132]	@ (80022b0 <HAL_RCC_OscConfig+0x4c4>)
 800222c:	4313      	orrs	r3, r2
 800222e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002230:	4b1f      	ldr	r3, [pc, #124]	@ (80022b0 <HAL_RCC_OscConfig+0x4c4>)
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6a19      	ldr	r1, [r3, #32]
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002240:	430b      	orrs	r3, r1
 8002242:	491b      	ldr	r1, [pc, #108]	@ (80022b0 <HAL_RCC_OscConfig+0x4c4>)
 8002244:	4313      	orrs	r3, r2
 8002246:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002248:	4b1b      	ldr	r3, [pc, #108]	@ (80022b8 <HAL_RCC_OscConfig+0x4cc>)
 800224a:	2201      	movs	r2, #1
 800224c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800224e:	f7fe fbeb 	bl	8000a28 <HAL_GetTick>
 8002252:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002254:	e008      	b.n	8002268 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002256:	f7fe fbe7 	bl	8000a28 <HAL_GetTick>
 800225a:	4602      	mov	r2, r0
 800225c:	693b      	ldr	r3, [r7, #16]
 800225e:	1ad3      	subs	r3, r2, r3
 8002260:	2b02      	cmp	r3, #2
 8002262:	d901      	bls.n	8002268 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002264:	2303      	movs	r3, #3
 8002266:	e03d      	b.n	80022e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002268:	4b11      	ldr	r3, [pc, #68]	@ (80022b0 <HAL_RCC_OscConfig+0x4c4>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002270:	2b00      	cmp	r3, #0
 8002272:	d0f0      	beq.n	8002256 <HAL_RCC_OscConfig+0x46a>
 8002274:	e035      	b.n	80022e2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002276:	4b10      	ldr	r3, [pc, #64]	@ (80022b8 <HAL_RCC_OscConfig+0x4cc>)
 8002278:	2200      	movs	r2, #0
 800227a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800227c:	f7fe fbd4 	bl	8000a28 <HAL_GetTick>
 8002280:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002282:	e008      	b.n	8002296 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002284:	f7fe fbd0 	bl	8000a28 <HAL_GetTick>
 8002288:	4602      	mov	r2, r0
 800228a:	693b      	ldr	r3, [r7, #16]
 800228c:	1ad3      	subs	r3, r2, r3
 800228e:	2b02      	cmp	r3, #2
 8002290:	d901      	bls.n	8002296 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002292:	2303      	movs	r3, #3
 8002294:	e026      	b.n	80022e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002296:	4b06      	ldr	r3, [pc, #24]	@ (80022b0 <HAL_RCC_OscConfig+0x4c4>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d1f0      	bne.n	8002284 <HAL_RCC_OscConfig+0x498>
 80022a2:	e01e      	b.n	80022e2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	69db      	ldr	r3, [r3, #28]
 80022a8:	2b01      	cmp	r3, #1
 80022aa:	d107      	bne.n	80022bc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80022ac:	2301      	movs	r3, #1
 80022ae:	e019      	b.n	80022e4 <HAL_RCC_OscConfig+0x4f8>
 80022b0:	40021000 	.word	0x40021000
 80022b4:	40007000 	.word	0x40007000
 80022b8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80022bc:	4b0b      	ldr	r3, [pc, #44]	@ (80022ec <HAL_RCC_OscConfig+0x500>)
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6a1b      	ldr	r3, [r3, #32]
 80022cc:	429a      	cmp	r2, r3
 80022ce:	d106      	bne.n	80022de <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022da:	429a      	cmp	r2, r3
 80022dc:	d001      	beq.n	80022e2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80022de:	2301      	movs	r3, #1
 80022e0:	e000      	b.n	80022e4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80022e2:	2300      	movs	r3, #0
}
 80022e4:	4618      	mov	r0, r3
 80022e6:	3718      	adds	r7, #24
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bd80      	pop	{r7, pc}
 80022ec:	40021000 	.word	0x40021000

080022f0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b084      	sub	sp, #16
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
 80022f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d101      	bne.n	8002304 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002300:	2301      	movs	r3, #1
 8002302:	e0d0      	b.n	80024a6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002304:	4b6a      	ldr	r3, [pc, #424]	@ (80024b0 <HAL_RCC_ClockConfig+0x1c0>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f003 0307 	and.w	r3, r3, #7
 800230c:	683a      	ldr	r2, [r7, #0]
 800230e:	429a      	cmp	r2, r3
 8002310:	d910      	bls.n	8002334 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002312:	4b67      	ldr	r3, [pc, #412]	@ (80024b0 <HAL_RCC_ClockConfig+0x1c0>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f023 0207 	bic.w	r2, r3, #7
 800231a:	4965      	ldr	r1, [pc, #404]	@ (80024b0 <HAL_RCC_ClockConfig+0x1c0>)
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	4313      	orrs	r3, r2
 8002320:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002322:	4b63      	ldr	r3, [pc, #396]	@ (80024b0 <HAL_RCC_ClockConfig+0x1c0>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f003 0307 	and.w	r3, r3, #7
 800232a:	683a      	ldr	r2, [r7, #0]
 800232c:	429a      	cmp	r2, r3
 800232e:	d001      	beq.n	8002334 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002330:	2301      	movs	r3, #1
 8002332:	e0b8      	b.n	80024a6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f003 0302 	and.w	r3, r3, #2
 800233c:	2b00      	cmp	r3, #0
 800233e:	d020      	beq.n	8002382 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f003 0304 	and.w	r3, r3, #4
 8002348:	2b00      	cmp	r3, #0
 800234a:	d005      	beq.n	8002358 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800234c:	4b59      	ldr	r3, [pc, #356]	@ (80024b4 <HAL_RCC_ClockConfig+0x1c4>)
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	4a58      	ldr	r2, [pc, #352]	@ (80024b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002352:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002356:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f003 0308 	and.w	r3, r3, #8
 8002360:	2b00      	cmp	r3, #0
 8002362:	d005      	beq.n	8002370 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002364:	4b53      	ldr	r3, [pc, #332]	@ (80024b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	4a52      	ldr	r2, [pc, #328]	@ (80024b4 <HAL_RCC_ClockConfig+0x1c4>)
 800236a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800236e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002370:	4b50      	ldr	r3, [pc, #320]	@ (80024b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	689b      	ldr	r3, [r3, #8]
 800237c:	494d      	ldr	r1, [pc, #308]	@ (80024b4 <HAL_RCC_ClockConfig+0x1c4>)
 800237e:	4313      	orrs	r3, r2
 8002380:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f003 0301 	and.w	r3, r3, #1
 800238a:	2b00      	cmp	r3, #0
 800238c:	d040      	beq.n	8002410 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	2b01      	cmp	r3, #1
 8002394:	d107      	bne.n	80023a6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002396:	4b47      	ldr	r3, [pc, #284]	@ (80024b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d115      	bne.n	80023ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023a2:	2301      	movs	r3, #1
 80023a4:	e07f      	b.n	80024a6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	2b02      	cmp	r3, #2
 80023ac:	d107      	bne.n	80023be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023ae:	4b41      	ldr	r3, [pc, #260]	@ (80024b4 <HAL_RCC_ClockConfig+0x1c4>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d109      	bne.n	80023ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023ba:	2301      	movs	r3, #1
 80023bc:	e073      	b.n	80024a6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023be:	4b3d      	ldr	r3, [pc, #244]	@ (80024b4 <HAL_RCC_ClockConfig+0x1c4>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f003 0302 	and.w	r3, r3, #2
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d101      	bne.n	80023ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023ca:	2301      	movs	r3, #1
 80023cc:	e06b      	b.n	80024a6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023ce:	4b39      	ldr	r3, [pc, #228]	@ (80024b4 <HAL_RCC_ClockConfig+0x1c4>)
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	f023 0203 	bic.w	r2, r3, #3
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	4936      	ldr	r1, [pc, #216]	@ (80024b4 <HAL_RCC_ClockConfig+0x1c4>)
 80023dc:	4313      	orrs	r3, r2
 80023de:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80023e0:	f7fe fb22 	bl	8000a28 <HAL_GetTick>
 80023e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023e6:	e00a      	b.n	80023fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023e8:	f7fe fb1e 	bl	8000a28 <HAL_GetTick>
 80023ec:	4602      	mov	r2, r0
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	1ad3      	subs	r3, r2, r3
 80023f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d901      	bls.n	80023fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80023fa:	2303      	movs	r3, #3
 80023fc:	e053      	b.n	80024a6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023fe:	4b2d      	ldr	r3, [pc, #180]	@ (80024b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	f003 020c 	and.w	r2, r3, #12
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	009b      	lsls	r3, r3, #2
 800240c:	429a      	cmp	r2, r3
 800240e:	d1eb      	bne.n	80023e8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002410:	4b27      	ldr	r3, [pc, #156]	@ (80024b0 <HAL_RCC_ClockConfig+0x1c0>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f003 0307 	and.w	r3, r3, #7
 8002418:	683a      	ldr	r2, [r7, #0]
 800241a:	429a      	cmp	r2, r3
 800241c:	d210      	bcs.n	8002440 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800241e:	4b24      	ldr	r3, [pc, #144]	@ (80024b0 <HAL_RCC_ClockConfig+0x1c0>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f023 0207 	bic.w	r2, r3, #7
 8002426:	4922      	ldr	r1, [pc, #136]	@ (80024b0 <HAL_RCC_ClockConfig+0x1c0>)
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	4313      	orrs	r3, r2
 800242c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800242e:	4b20      	ldr	r3, [pc, #128]	@ (80024b0 <HAL_RCC_ClockConfig+0x1c0>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f003 0307 	and.w	r3, r3, #7
 8002436:	683a      	ldr	r2, [r7, #0]
 8002438:	429a      	cmp	r2, r3
 800243a:	d001      	beq.n	8002440 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800243c:	2301      	movs	r3, #1
 800243e:	e032      	b.n	80024a6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f003 0304 	and.w	r3, r3, #4
 8002448:	2b00      	cmp	r3, #0
 800244a:	d008      	beq.n	800245e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800244c:	4b19      	ldr	r3, [pc, #100]	@ (80024b4 <HAL_RCC_ClockConfig+0x1c4>)
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	68db      	ldr	r3, [r3, #12]
 8002458:	4916      	ldr	r1, [pc, #88]	@ (80024b4 <HAL_RCC_ClockConfig+0x1c4>)
 800245a:	4313      	orrs	r3, r2
 800245c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f003 0308 	and.w	r3, r3, #8
 8002466:	2b00      	cmp	r3, #0
 8002468:	d009      	beq.n	800247e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800246a:	4b12      	ldr	r3, [pc, #72]	@ (80024b4 <HAL_RCC_ClockConfig+0x1c4>)
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	691b      	ldr	r3, [r3, #16]
 8002476:	00db      	lsls	r3, r3, #3
 8002478:	490e      	ldr	r1, [pc, #56]	@ (80024b4 <HAL_RCC_ClockConfig+0x1c4>)
 800247a:	4313      	orrs	r3, r2
 800247c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800247e:	f000 f821 	bl	80024c4 <HAL_RCC_GetSysClockFreq>
 8002482:	4602      	mov	r2, r0
 8002484:	4b0b      	ldr	r3, [pc, #44]	@ (80024b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	091b      	lsrs	r3, r3, #4
 800248a:	f003 030f 	and.w	r3, r3, #15
 800248e:	490a      	ldr	r1, [pc, #40]	@ (80024b8 <HAL_RCC_ClockConfig+0x1c8>)
 8002490:	5ccb      	ldrb	r3, [r1, r3]
 8002492:	fa22 f303 	lsr.w	r3, r2, r3
 8002496:	4a09      	ldr	r2, [pc, #36]	@ (80024bc <HAL_RCC_ClockConfig+0x1cc>)
 8002498:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800249a:	4b09      	ldr	r3, [pc, #36]	@ (80024c0 <HAL_RCC_ClockConfig+0x1d0>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4618      	mov	r0, r3
 80024a0:	f7fe fa80 	bl	80009a4 <HAL_InitTick>

  return HAL_OK;
 80024a4:	2300      	movs	r3, #0
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	3710      	adds	r7, #16
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}
 80024ae:	bf00      	nop
 80024b0:	40022000 	.word	0x40022000
 80024b4:	40021000 	.word	0x40021000
 80024b8:	08003c20 	.word	0x08003c20
 80024bc:	20000000 	.word	0x20000000
 80024c0:	20000004 	.word	0x20000004

080024c4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024c4:	b480      	push	{r7}
 80024c6:	b087      	sub	sp, #28
 80024c8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80024ca:	2300      	movs	r3, #0
 80024cc:	60fb      	str	r3, [r7, #12]
 80024ce:	2300      	movs	r3, #0
 80024d0:	60bb      	str	r3, [r7, #8]
 80024d2:	2300      	movs	r3, #0
 80024d4:	617b      	str	r3, [r7, #20]
 80024d6:	2300      	movs	r3, #0
 80024d8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80024da:	2300      	movs	r3, #0
 80024dc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80024de:	4b1e      	ldr	r3, [pc, #120]	@ (8002558 <HAL_RCC_GetSysClockFreq+0x94>)
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	f003 030c 	and.w	r3, r3, #12
 80024ea:	2b04      	cmp	r3, #4
 80024ec:	d002      	beq.n	80024f4 <HAL_RCC_GetSysClockFreq+0x30>
 80024ee:	2b08      	cmp	r3, #8
 80024f0:	d003      	beq.n	80024fa <HAL_RCC_GetSysClockFreq+0x36>
 80024f2:	e027      	b.n	8002544 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80024f4:	4b19      	ldr	r3, [pc, #100]	@ (800255c <HAL_RCC_GetSysClockFreq+0x98>)
 80024f6:	613b      	str	r3, [r7, #16]
      break;
 80024f8:	e027      	b.n	800254a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	0c9b      	lsrs	r3, r3, #18
 80024fe:	f003 030f 	and.w	r3, r3, #15
 8002502:	4a17      	ldr	r2, [pc, #92]	@ (8002560 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002504:	5cd3      	ldrb	r3, [r2, r3]
 8002506:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800250e:	2b00      	cmp	r3, #0
 8002510:	d010      	beq.n	8002534 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002512:	4b11      	ldr	r3, [pc, #68]	@ (8002558 <HAL_RCC_GetSysClockFreq+0x94>)
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	0c5b      	lsrs	r3, r3, #17
 8002518:	f003 0301 	and.w	r3, r3, #1
 800251c:	4a11      	ldr	r2, [pc, #68]	@ (8002564 <HAL_RCC_GetSysClockFreq+0xa0>)
 800251e:	5cd3      	ldrb	r3, [r2, r3]
 8002520:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	4a0d      	ldr	r2, [pc, #52]	@ (800255c <HAL_RCC_GetSysClockFreq+0x98>)
 8002526:	fb03 f202 	mul.w	r2, r3, r2
 800252a:	68bb      	ldr	r3, [r7, #8]
 800252c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002530:	617b      	str	r3, [r7, #20]
 8002532:	e004      	b.n	800253e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	4a0c      	ldr	r2, [pc, #48]	@ (8002568 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002538:	fb02 f303 	mul.w	r3, r2, r3
 800253c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800253e:	697b      	ldr	r3, [r7, #20]
 8002540:	613b      	str	r3, [r7, #16]
      break;
 8002542:	e002      	b.n	800254a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002544:	4b05      	ldr	r3, [pc, #20]	@ (800255c <HAL_RCC_GetSysClockFreq+0x98>)
 8002546:	613b      	str	r3, [r7, #16]
      break;
 8002548:	bf00      	nop
    }
  }
  return sysclockfreq;
 800254a:	693b      	ldr	r3, [r7, #16]
}
 800254c:	4618      	mov	r0, r3
 800254e:	371c      	adds	r7, #28
 8002550:	46bd      	mov	sp, r7
 8002552:	bc80      	pop	{r7}
 8002554:	4770      	bx	lr
 8002556:	bf00      	nop
 8002558:	40021000 	.word	0x40021000
 800255c:	007a1200 	.word	0x007a1200
 8002560:	08003c30 	.word	0x08003c30
 8002564:	08003c40 	.word	0x08003c40
 8002568:	003d0900 	.word	0x003d0900

0800256c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800256c:	b480      	push	{r7}
 800256e:	b085      	sub	sp, #20
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002574:	4b0a      	ldr	r3, [pc, #40]	@ (80025a0 <RCC_Delay+0x34>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a0a      	ldr	r2, [pc, #40]	@ (80025a4 <RCC_Delay+0x38>)
 800257a:	fba2 2303 	umull	r2, r3, r2, r3
 800257e:	0a5b      	lsrs	r3, r3, #9
 8002580:	687a      	ldr	r2, [r7, #4]
 8002582:	fb02 f303 	mul.w	r3, r2, r3
 8002586:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002588:	bf00      	nop
  }
  while (Delay --);
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	1e5a      	subs	r2, r3, #1
 800258e:	60fa      	str	r2, [r7, #12]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d1f9      	bne.n	8002588 <RCC_Delay+0x1c>
}
 8002594:	bf00      	nop
 8002596:	bf00      	nop
 8002598:	3714      	adds	r7, #20
 800259a:	46bd      	mov	sp, r7
 800259c:	bc80      	pop	{r7}
 800259e:	4770      	bx	lr
 80025a0:	20000000 	.word	0x20000000
 80025a4:	10624dd3 	.word	0x10624dd3

080025a8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b086      	sub	sp, #24
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80025b0:	2300      	movs	r3, #0
 80025b2:	613b      	str	r3, [r7, #16]
 80025b4:	2300      	movs	r3, #0
 80025b6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f003 0301 	and.w	r3, r3, #1
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d07d      	beq.n	80026c0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80025c4:	2300      	movs	r3, #0
 80025c6:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025c8:	4b4f      	ldr	r3, [pc, #316]	@ (8002708 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025ca:	69db      	ldr	r3, [r3, #28]
 80025cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d10d      	bne.n	80025f0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025d4:	4b4c      	ldr	r3, [pc, #304]	@ (8002708 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025d6:	69db      	ldr	r3, [r3, #28]
 80025d8:	4a4b      	ldr	r2, [pc, #300]	@ (8002708 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025da:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80025de:	61d3      	str	r3, [r2, #28]
 80025e0:	4b49      	ldr	r3, [pc, #292]	@ (8002708 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025e2:	69db      	ldr	r3, [r3, #28]
 80025e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025e8:	60bb      	str	r3, [r7, #8]
 80025ea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025ec:	2301      	movs	r3, #1
 80025ee:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025f0:	4b46      	ldr	r3, [pc, #280]	@ (800270c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d118      	bne.n	800262e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025fc:	4b43      	ldr	r3, [pc, #268]	@ (800270c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a42      	ldr	r2, [pc, #264]	@ (800270c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002602:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002606:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002608:	f7fe fa0e 	bl	8000a28 <HAL_GetTick>
 800260c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800260e:	e008      	b.n	8002622 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002610:	f7fe fa0a 	bl	8000a28 <HAL_GetTick>
 8002614:	4602      	mov	r2, r0
 8002616:	693b      	ldr	r3, [r7, #16]
 8002618:	1ad3      	subs	r3, r2, r3
 800261a:	2b64      	cmp	r3, #100	@ 0x64
 800261c:	d901      	bls.n	8002622 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800261e:	2303      	movs	r3, #3
 8002620:	e06d      	b.n	80026fe <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002622:	4b3a      	ldr	r3, [pc, #232]	@ (800270c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800262a:	2b00      	cmp	r3, #0
 800262c:	d0f0      	beq.n	8002610 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800262e:	4b36      	ldr	r3, [pc, #216]	@ (8002708 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002630:	6a1b      	ldr	r3, [r3, #32]
 8002632:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002636:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d02e      	beq.n	800269c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002646:	68fa      	ldr	r2, [r7, #12]
 8002648:	429a      	cmp	r2, r3
 800264a:	d027      	beq.n	800269c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800264c:	4b2e      	ldr	r3, [pc, #184]	@ (8002708 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800264e:	6a1b      	ldr	r3, [r3, #32]
 8002650:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002654:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002656:	4b2e      	ldr	r3, [pc, #184]	@ (8002710 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002658:	2201      	movs	r2, #1
 800265a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800265c:	4b2c      	ldr	r3, [pc, #176]	@ (8002710 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800265e:	2200      	movs	r2, #0
 8002660:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002662:	4a29      	ldr	r2, [pc, #164]	@ (8002708 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	f003 0301 	and.w	r3, r3, #1
 800266e:	2b00      	cmp	r3, #0
 8002670:	d014      	beq.n	800269c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002672:	f7fe f9d9 	bl	8000a28 <HAL_GetTick>
 8002676:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002678:	e00a      	b.n	8002690 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800267a:	f7fe f9d5 	bl	8000a28 <HAL_GetTick>
 800267e:	4602      	mov	r2, r0
 8002680:	693b      	ldr	r3, [r7, #16]
 8002682:	1ad3      	subs	r3, r2, r3
 8002684:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002688:	4293      	cmp	r3, r2
 800268a:	d901      	bls.n	8002690 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800268c:	2303      	movs	r3, #3
 800268e:	e036      	b.n	80026fe <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002690:	4b1d      	ldr	r3, [pc, #116]	@ (8002708 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002692:	6a1b      	ldr	r3, [r3, #32]
 8002694:	f003 0302 	and.w	r3, r3, #2
 8002698:	2b00      	cmp	r3, #0
 800269a:	d0ee      	beq.n	800267a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800269c:	4b1a      	ldr	r3, [pc, #104]	@ (8002708 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800269e:	6a1b      	ldr	r3, [r3, #32]
 80026a0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	4917      	ldr	r1, [pc, #92]	@ (8002708 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026aa:	4313      	orrs	r3, r2
 80026ac:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80026ae:	7dfb      	ldrb	r3, [r7, #23]
 80026b0:	2b01      	cmp	r3, #1
 80026b2:	d105      	bne.n	80026c0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026b4:	4b14      	ldr	r3, [pc, #80]	@ (8002708 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026b6:	69db      	ldr	r3, [r3, #28]
 80026b8:	4a13      	ldr	r2, [pc, #76]	@ (8002708 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026ba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80026be:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f003 0302 	and.w	r3, r3, #2
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d008      	beq.n	80026de <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80026cc:	4b0e      	ldr	r3, [pc, #56]	@ (8002708 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	689b      	ldr	r3, [r3, #8]
 80026d8:	490b      	ldr	r1, [pc, #44]	@ (8002708 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026da:	4313      	orrs	r3, r2
 80026dc:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f003 0310 	and.w	r3, r3, #16
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d008      	beq.n	80026fc <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80026ea:	4b07      	ldr	r3, [pc, #28]	@ (8002708 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	695b      	ldr	r3, [r3, #20]
 80026f6:	4904      	ldr	r1, [pc, #16]	@ (8002708 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026f8:	4313      	orrs	r3, r2
 80026fa:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80026fc:	2300      	movs	r3, #0
}
 80026fe:	4618      	mov	r0, r3
 8002700:	3718      	adds	r7, #24
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}
 8002706:	bf00      	nop
 8002708:	40021000 	.word	0x40021000
 800270c:	40007000 	.word	0x40007000
 8002710:	42420440 	.word	0x42420440

08002714 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8002714:	b480      	push	{r7}
 8002716:	b085      	sub	sp, #20
 8002718:	af00      	add	r7, sp, #0
 800271a:	4603      	mov	r3, r0
 800271c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800271e:	2300      	movs	r3, #0
 8002720:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8002722:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002726:	2b84      	cmp	r3, #132	@ 0x84
 8002728:	d005      	beq.n	8002736 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800272a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	4413      	add	r3, r2
 8002732:	3303      	adds	r3, #3
 8002734:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8002736:	68fb      	ldr	r3, [r7, #12]
}
 8002738:	4618      	mov	r0, r3
 800273a:	3714      	adds	r7, #20
 800273c:	46bd      	mov	sp, r7
 800273e:	bc80      	pop	{r7}
 8002740:	4770      	bx	lr

08002742 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8002742:	b580      	push	{r7, lr}
 8002744:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8002746:	f000 fadf 	bl	8002d08 <vTaskStartScheduler>
  
  return osOK;
 800274a:	2300      	movs	r3, #0
}
 800274c:	4618      	mov	r0, r3
 800274e:	bd80      	pop	{r7, pc}

08002750 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8002750:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002752:	b089      	sub	sp, #36	@ 0x24
 8002754:	af04      	add	r7, sp, #16
 8002756:	6078      	str	r0, [r7, #4]
 8002758:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	695b      	ldr	r3, [r3, #20]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d020      	beq.n	80027a4 <osThreadCreate+0x54>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	699b      	ldr	r3, [r3, #24]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d01c      	beq.n	80027a4 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	685c      	ldr	r4, [r3, #4]
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	691e      	ldr	r6, [r3, #16]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800277c:	4618      	mov	r0, r3
 800277e:	f7ff ffc9 	bl	8002714 <makeFreeRtosPriority>
 8002782:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	695b      	ldr	r3, [r3, #20]
 8002788:	687a      	ldr	r2, [r7, #4]
 800278a:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800278c:	9202      	str	r2, [sp, #8]
 800278e:	9301      	str	r3, [sp, #4]
 8002790:	9100      	str	r1, [sp, #0]
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	4632      	mov	r2, r6
 8002796:	4629      	mov	r1, r5
 8002798:	4620      	mov	r0, r4
 800279a:	f000 f8e8 	bl	800296e <xTaskCreateStatic>
 800279e:	4603      	mov	r3, r0
 80027a0:	60fb      	str	r3, [r7, #12]
 80027a2:	e01c      	b.n	80027de <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	685c      	ldr	r4, [r3, #4]
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80027b0:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80027b8:	4618      	mov	r0, r3
 80027ba:	f7ff ffab 	bl	8002714 <makeFreeRtosPriority>
 80027be:	4602      	mov	r2, r0
 80027c0:	f107 030c 	add.w	r3, r7, #12
 80027c4:	9301      	str	r3, [sp, #4]
 80027c6:	9200      	str	r2, [sp, #0]
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	4632      	mov	r2, r6
 80027cc:	4629      	mov	r1, r5
 80027ce:	4620      	mov	r0, r4
 80027d0:	f000 f92d 	bl	8002a2e <xTaskCreate>
 80027d4:	4603      	mov	r3, r0
 80027d6:	2b01      	cmp	r3, #1
 80027d8:	d001      	beq.n	80027de <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80027da:	2300      	movs	r3, #0
 80027dc:	e000      	b.n	80027e0 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80027de:	68fb      	ldr	r3, [r7, #12]
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	3714      	adds	r7, #20
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080027e8 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b084      	sub	sp, #16
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d001      	beq.n	80027fe <osDelay+0x16>
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	e000      	b.n	8002800 <osDelay+0x18>
 80027fe:	2301      	movs	r3, #1
 8002800:	4618      	mov	r0, r3
 8002802:	f000 fa4b 	bl	8002c9c <vTaskDelay>
  
  return osOK;
 8002806:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8002808:	4618      	mov	r0, r3
 800280a:	3710      	adds	r7, #16
 800280c:	46bd      	mov	sp, r7
 800280e:	bd80      	pop	{r7, pc}

08002810 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002810:	b480      	push	{r7}
 8002812:	b083      	sub	sp, #12
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	f103 0208 	add.w	r2, r3, #8
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	f04f 32ff 	mov.w	r2, #4294967295
 8002828:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	f103 0208 	add.w	r2, r3, #8
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	f103 0208 	add.w	r2, r3, #8
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2200      	movs	r2, #0
 8002842:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002844:	bf00      	nop
 8002846:	370c      	adds	r7, #12
 8002848:	46bd      	mov	sp, r7
 800284a:	bc80      	pop	{r7}
 800284c:	4770      	bx	lr

0800284e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800284e:	b480      	push	{r7}
 8002850:	b083      	sub	sp, #12
 8002852:	af00      	add	r7, sp, #0
 8002854:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2200      	movs	r2, #0
 800285a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800285c:	bf00      	nop
 800285e:	370c      	adds	r7, #12
 8002860:	46bd      	mov	sp, r7
 8002862:	bc80      	pop	{r7}
 8002864:	4770      	bx	lr

08002866 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002866:	b480      	push	{r7}
 8002868:	b085      	sub	sp, #20
 800286a:	af00      	add	r7, sp, #0
 800286c:	6078      	str	r0, [r7, #4]
 800286e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	68fa      	ldr	r2, [r7, #12]
 800287a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	689a      	ldr	r2, [r3, #8]
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	689b      	ldr	r3, [r3, #8]
 8002888:	683a      	ldr	r2, [r7, #0]
 800288a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	683a      	ldr	r2, [r7, #0]
 8002890:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	687a      	ldr	r2, [r7, #4]
 8002896:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	1c5a      	adds	r2, r3, #1
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	601a      	str	r2, [r3, #0]
}
 80028a2:	bf00      	nop
 80028a4:	3714      	adds	r7, #20
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bc80      	pop	{r7}
 80028aa:	4770      	bx	lr

080028ac <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80028ac:	b480      	push	{r7}
 80028ae:	b085      	sub	sp, #20
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
 80028b4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80028bc:	68bb      	ldr	r3, [r7, #8]
 80028be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028c2:	d103      	bne.n	80028cc <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	691b      	ldr	r3, [r3, #16]
 80028c8:	60fb      	str	r3, [r7, #12]
 80028ca:	e00c      	b.n	80028e6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	3308      	adds	r3, #8
 80028d0:	60fb      	str	r3, [r7, #12]
 80028d2:	e002      	b.n	80028da <vListInsert+0x2e>
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	60fb      	str	r3, [r7, #12]
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	68ba      	ldr	r2, [r7, #8]
 80028e2:	429a      	cmp	r2, r3
 80028e4:	d2f6      	bcs.n	80028d4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	685a      	ldr	r2, [r3, #4]
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	683a      	ldr	r2, [r7, #0]
 80028f4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	68fa      	ldr	r2, [r7, #12]
 80028fa:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	683a      	ldr	r2, [r7, #0]
 8002900:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	687a      	ldr	r2, [r7, #4]
 8002906:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	1c5a      	adds	r2, r3, #1
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	601a      	str	r2, [r3, #0]
}
 8002912:	bf00      	nop
 8002914:	3714      	adds	r7, #20
 8002916:	46bd      	mov	sp, r7
 8002918:	bc80      	pop	{r7}
 800291a:	4770      	bx	lr

0800291c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800291c:	b480      	push	{r7}
 800291e:	b085      	sub	sp, #20
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	691b      	ldr	r3, [r3, #16]
 8002928:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	687a      	ldr	r2, [r7, #4]
 8002930:	6892      	ldr	r2, [r2, #8]
 8002932:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	689b      	ldr	r3, [r3, #8]
 8002938:	687a      	ldr	r2, [r7, #4]
 800293a:	6852      	ldr	r2, [r2, #4]
 800293c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	687a      	ldr	r2, [r7, #4]
 8002944:	429a      	cmp	r2, r3
 8002946:	d103      	bne.n	8002950 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	689a      	ldr	r2, [r3, #8]
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2200      	movs	r2, #0
 8002954:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	1e5a      	subs	r2, r3, #1
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
}
 8002964:	4618      	mov	r0, r3
 8002966:	3714      	adds	r7, #20
 8002968:	46bd      	mov	sp, r7
 800296a:	bc80      	pop	{r7}
 800296c:	4770      	bx	lr

0800296e <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800296e:	b580      	push	{r7, lr}
 8002970:	b08e      	sub	sp, #56	@ 0x38
 8002972:	af04      	add	r7, sp, #16
 8002974:	60f8      	str	r0, [r7, #12]
 8002976:	60b9      	str	r1, [r7, #8]
 8002978:	607a      	str	r2, [r7, #4]
 800297a:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800297c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800297e:	2b00      	cmp	r3, #0
 8002980:	d10b      	bne.n	800299a <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002982:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002986:	f383 8811 	msr	BASEPRI, r3
 800298a:	f3bf 8f6f 	isb	sy
 800298e:	f3bf 8f4f 	dsb	sy
 8002992:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002994:	bf00      	nop
 8002996:	bf00      	nop
 8002998:	e7fd      	b.n	8002996 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800299a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800299c:	2b00      	cmp	r3, #0
 800299e:	d10b      	bne.n	80029b8 <xTaskCreateStatic+0x4a>
	__asm volatile
 80029a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80029a4:	f383 8811 	msr	BASEPRI, r3
 80029a8:	f3bf 8f6f 	isb	sy
 80029ac:	f3bf 8f4f 	dsb	sy
 80029b0:	61fb      	str	r3, [r7, #28]
}
 80029b2:	bf00      	nop
 80029b4:	bf00      	nop
 80029b6:	e7fd      	b.n	80029b4 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80029b8:	2354      	movs	r3, #84	@ 0x54
 80029ba:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80029bc:	693b      	ldr	r3, [r7, #16]
 80029be:	2b54      	cmp	r3, #84	@ 0x54
 80029c0:	d00b      	beq.n	80029da <xTaskCreateStatic+0x6c>
	__asm volatile
 80029c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80029c6:	f383 8811 	msr	BASEPRI, r3
 80029ca:	f3bf 8f6f 	isb	sy
 80029ce:	f3bf 8f4f 	dsb	sy
 80029d2:	61bb      	str	r3, [r7, #24]
}
 80029d4:	bf00      	nop
 80029d6:	bf00      	nop
 80029d8:	e7fd      	b.n	80029d6 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80029da:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80029dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d01e      	beq.n	8002a20 <xTaskCreateStatic+0xb2>
 80029e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d01b      	beq.n	8002a20 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80029e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80029ea:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80029ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029ee:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80029f0:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80029f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029f4:	2202      	movs	r2, #2
 80029f6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80029fa:	2300      	movs	r3, #0
 80029fc:	9303      	str	r3, [sp, #12]
 80029fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a00:	9302      	str	r3, [sp, #8]
 8002a02:	f107 0314 	add.w	r3, r7, #20
 8002a06:	9301      	str	r3, [sp, #4]
 8002a08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a0a:	9300      	str	r3, [sp, #0]
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	687a      	ldr	r2, [r7, #4]
 8002a10:	68b9      	ldr	r1, [r7, #8]
 8002a12:	68f8      	ldr	r0, [r7, #12]
 8002a14:	f000 f850 	bl	8002ab8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002a18:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002a1a:	f000 f8d5 	bl	8002bc8 <prvAddNewTaskToReadyList>
 8002a1e:	e001      	b.n	8002a24 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8002a20:	2300      	movs	r3, #0
 8002a22:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002a24:	697b      	ldr	r3, [r7, #20]
	}
 8002a26:	4618      	mov	r0, r3
 8002a28:	3728      	adds	r7, #40	@ 0x28
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}

08002a2e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002a2e:	b580      	push	{r7, lr}
 8002a30:	b08c      	sub	sp, #48	@ 0x30
 8002a32:	af04      	add	r7, sp, #16
 8002a34:	60f8      	str	r0, [r7, #12]
 8002a36:	60b9      	str	r1, [r7, #8]
 8002a38:	603b      	str	r3, [r7, #0]
 8002a3a:	4613      	mov	r3, r2
 8002a3c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002a3e:	88fb      	ldrh	r3, [r7, #6]
 8002a40:	009b      	lsls	r3, r3, #2
 8002a42:	4618      	mov	r0, r3
 8002a44:	f000 fe94 	bl	8003770 <pvPortMalloc>
 8002a48:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002a4a:	697b      	ldr	r3, [r7, #20]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d00e      	beq.n	8002a6e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002a50:	2054      	movs	r0, #84	@ 0x54
 8002a52:	f000 fe8d 	bl	8003770 <pvPortMalloc>
 8002a56:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002a58:	69fb      	ldr	r3, [r7, #28]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d003      	beq.n	8002a66 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002a5e:	69fb      	ldr	r3, [r7, #28]
 8002a60:	697a      	ldr	r2, [r7, #20]
 8002a62:	631a      	str	r2, [r3, #48]	@ 0x30
 8002a64:	e005      	b.n	8002a72 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002a66:	6978      	ldr	r0, [r7, #20]
 8002a68:	f000 ff50 	bl	800390c <vPortFree>
 8002a6c:	e001      	b.n	8002a72 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002a6e:	2300      	movs	r3, #0
 8002a70:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002a72:	69fb      	ldr	r3, [r7, #28]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d017      	beq.n	8002aa8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002a78:	69fb      	ldr	r3, [r7, #28]
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002a80:	88fa      	ldrh	r2, [r7, #6]
 8002a82:	2300      	movs	r3, #0
 8002a84:	9303      	str	r3, [sp, #12]
 8002a86:	69fb      	ldr	r3, [r7, #28]
 8002a88:	9302      	str	r3, [sp, #8]
 8002a8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a8c:	9301      	str	r3, [sp, #4]
 8002a8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a90:	9300      	str	r3, [sp, #0]
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	68b9      	ldr	r1, [r7, #8]
 8002a96:	68f8      	ldr	r0, [r7, #12]
 8002a98:	f000 f80e 	bl	8002ab8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002a9c:	69f8      	ldr	r0, [r7, #28]
 8002a9e:	f000 f893 	bl	8002bc8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	61bb      	str	r3, [r7, #24]
 8002aa6:	e002      	b.n	8002aae <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002aa8:	f04f 33ff 	mov.w	r3, #4294967295
 8002aac:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002aae:	69bb      	ldr	r3, [r7, #24]
	}
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	3720      	adds	r7, #32
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bd80      	pop	{r7, pc}

08002ab8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b088      	sub	sp, #32
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	60f8      	str	r0, [r7, #12]
 8002ac0:	60b9      	str	r1, [r7, #8]
 8002ac2:	607a      	str	r2, [r7, #4]
 8002ac4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002ac6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ac8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002ad0:	3b01      	subs	r3, #1
 8002ad2:	009b      	lsls	r3, r3, #2
 8002ad4:	4413      	add	r3, r2
 8002ad6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002ad8:	69bb      	ldr	r3, [r7, #24]
 8002ada:	f023 0307 	bic.w	r3, r3, #7
 8002ade:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002ae0:	69bb      	ldr	r3, [r7, #24]
 8002ae2:	f003 0307 	and.w	r3, r3, #7
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d00b      	beq.n	8002b02 <prvInitialiseNewTask+0x4a>
	__asm volatile
 8002aea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002aee:	f383 8811 	msr	BASEPRI, r3
 8002af2:	f3bf 8f6f 	isb	sy
 8002af6:	f3bf 8f4f 	dsb	sy
 8002afa:	617b      	str	r3, [r7, #20]
}
 8002afc:	bf00      	nop
 8002afe:	bf00      	nop
 8002b00:	e7fd      	b.n	8002afe <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8002b02:	68bb      	ldr	r3, [r7, #8]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d01f      	beq.n	8002b48 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002b08:	2300      	movs	r3, #0
 8002b0a:	61fb      	str	r3, [r7, #28]
 8002b0c:	e012      	b.n	8002b34 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002b0e:	68ba      	ldr	r2, [r7, #8]
 8002b10:	69fb      	ldr	r3, [r7, #28]
 8002b12:	4413      	add	r3, r2
 8002b14:	7819      	ldrb	r1, [r3, #0]
 8002b16:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002b18:	69fb      	ldr	r3, [r7, #28]
 8002b1a:	4413      	add	r3, r2
 8002b1c:	3334      	adds	r3, #52	@ 0x34
 8002b1e:	460a      	mov	r2, r1
 8002b20:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8002b22:	68ba      	ldr	r2, [r7, #8]
 8002b24:	69fb      	ldr	r3, [r7, #28]
 8002b26:	4413      	add	r3, r2
 8002b28:	781b      	ldrb	r3, [r3, #0]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d006      	beq.n	8002b3c <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002b2e:	69fb      	ldr	r3, [r7, #28]
 8002b30:	3301      	adds	r3, #1
 8002b32:	61fb      	str	r3, [r7, #28]
 8002b34:	69fb      	ldr	r3, [r7, #28]
 8002b36:	2b0f      	cmp	r3, #15
 8002b38:	d9e9      	bls.n	8002b0e <prvInitialiseNewTask+0x56>
 8002b3a:	e000      	b.n	8002b3e <prvInitialiseNewTask+0x86>
			{
				break;
 8002b3c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002b3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b40:	2200      	movs	r2, #0
 8002b42:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002b46:	e003      	b.n	8002b50 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002b48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002b50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b52:	2b06      	cmp	r3, #6
 8002b54:	d901      	bls.n	8002b5a <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002b56:	2306      	movs	r3, #6
 8002b58:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002b5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b5c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002b5e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002b60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b62:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002b64:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8002b66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b68:	2200      	movs	r2, #0
 8002b6a:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002b6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b6e:	3304      	adds	r3, #4
 8002b70:	4618      	mov	r0, r3
 8002b72:	f7ff fe6c 	bl	800284e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002b76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b78:	3318      	adds	r3, #24
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	f7ff fe67 	bl	800284e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002b80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b82:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002b84:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002b86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b88:	f1c3 0207 	rsb	r2, r3, #7
 8002b8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b8e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002b90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b92:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002b94:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002b96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b98:	2200      	movs	r2, #0
 8002b9a:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002b9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002ba4:	683a      	ldr	r2, [r7, #0]
 8002ba6:	68f9      	ldr	r1, [r7, #12]
 8002ba8:	69b8      	ldr	r0, [r7, #24]
 8002baa:	f000 fc2b 	bl	8003404 <pxPortInitialiseStack>
 8002bae:	4602      	mov	r2, r0
 8002bb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bb2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8002bb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d002      	beq.n	8002bc0 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002bba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002bbc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002bbe:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002bc0:	bf00      	nop
 8002bc2:	3720      	adds	r7, #32
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bd80      	pop	{r7, pc}

08002bc8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b082      	sub	sp, #8
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002bd0:	f000 fd0c 	bl	80035ec <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002bd4:	4b2a      	ldr	r3, [pc, #168]	@ (8002c80 <prvAddNewTaskToReadyList+0xb8>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	3301      	adds	r3, #1
 8002bda:	4a29      	ldr	r2, [pc, #164]	@ (8002c80 <prvAddNewTaskToReadyList+0xb8>)
 8002bdc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002bde:	4b29      	ldr	r3, [pc, #164]	@ (8002c84 <prvAddNewTaskToReadyList+0xbc>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d109      	bne.n	8002bfa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002be6:	4a27      	ldr	r2, [pc, #156]	@ (8002c84 <prvAddNewTaskToReadyList+0xbc>)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002bec:	4b24      	ldr	r3, [pc, #144]	@ (8002c80 <prvAddNewTaskToReadyList+0xb8>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	2b01      	cmp	r3, #1
 8002bf2:	d110      	bne.n	8002c16 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002bf4:	f000 fac4 	bl	8003180 <prvInitialiseTaskLists>
 8002bf8:	e00d      	b.n	8002c16 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002bfa:	4b23      	ldr	r3, [pc, #140]	@ (8002c88 <prvAddNewTaskToReadyList+0xc0>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d109      	bne.n	8002c16 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002c02:	4b20      	ldr	r3, [pc, #128]	@ (8002c84 <prvAddNewTaskToReadyList+0xbc>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c0c:	429a      	cmp	r2, r3
 8002c0e:	d802      	bhi.n	8002c16 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002c10:	4a1c      	ldr	r2, [pc, #112]	@ (8002c84 <prvAddNewTaskToReadyList+0xbc>)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002c16:	4b1d      	ldr	r3, [pc, #116]	@ (8002c8c <prvAddNewTaskToReadyList+0xc4>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	3301      	adds	r3, #1
 8002c1c:	4a1b      	ldr	r2, [pc, #108]	@ (8002c8c <prvAddNewTaskToReadyList+0xc4>)
 8002c1e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c24:	2201      	movs	r2, #1
 8002c26:	409a      	lsls	r2, r3
 8002c28:	4b19      	ldr	r3, [pc, #100]	@ (8002c90 <prvAddNewTaskToReadyList+0xc8>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	4a18      	ldr	r2, [pc, #96]	@ (8002c90 <prvAddNewTaskToReadyList+0xc8>)
 8002c30:	6013      	str	r3, [r2, #0]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c36:	4613      	mov	r3, r2
 8002c38:	009b      	lsls	r3, r3, #2
 8002c3a:	4413      	add	r3, r2
 8002c3c:	009b      	lsls	r3, r3, #2
 8002c3e:	4a15      	ldr	r2, [pc, #84]	@ (8002c94 <prvAddNewTaskToReadyList+0xcc>)
 8002c40:	441a      	add	r2, r3
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	3304      	adds	r3, #4
 8002c46:	4619      	mov	r1, r3
 8002c48:	4610      	mov	r0, r2
 8002c4a:	f7ff fe0c 	bl	8002866 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002c4e:	f000 fcfd 	bl	800364c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002c52:	4b0d      	ldr	r3, [pc, #52]	@ (8002c88 <prvAddNewTaskToReadyList+0xc0>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d00e      	beq.n	8002c78 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002c5a:	4b0a      	ldr	r3, [pc, #40]	@ (8002c84 <prvAddNewTaskToReadyList+0xbc>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c64:	429a      	cmp	r2, r3
 8002c66:	d207      	bcs.n	8002c78 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002c68:	4b0b      	ldr	r3, [pc, #44]	@ (8002c98 <prvAddNewTaskToReadyList+0xd0>)
 8002c6a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002c6e:	601a      	str	r2, [r3, #0]
 8002c70:	f3bf 8f4f 	dsb	sy
 8002c74:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002c78:	bf00      	nop
 8002c7a:	3708      	adds	r7, #8
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bd80      	pop	{r7, pc}
 8002c80:	20000404 	.word	0x20000404
 8002c84:	20000304 	.word	0x20000304
 8002c88:	20000410 	.word	0x20000410
 8002c8c:	20000420 	.word	0x20000420
 8002c90:	2000040c 	.word	0x2000040c
 8002c94:	20000308 	.word	0x20000308
 8002c98:	e000ed04 	.word	0xe000ed04

08002c9c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b084      	sub	sp, #16
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d018      	beq.n	8002ce0 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002cae:	4b14      	ldr	r3, [pc, #80]	@ (8002d00 <vTaskDelay+0x64>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d00b      	beq.n	8002cce <vTaskDelay+0x32>
	__asm volatile
 8002cb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002cba:	f383 8811 	msr	BASEPRI, r3
 8002cbe:	f3bf 8f6f 	isb	sy
 8002cc2:	f3bf 8f4f 	dsb	sy
 8002cc6:	60bb      	str	r3, [r7, #8]
}
 8002cc8:	bf00      	nop
 8002cca:	bf00      	nop
 8002ccc:	e7fd      	b.n	8002cca <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8002cce:	f000 f87d 	bl	8002dcc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002cd2:	2100      	movs	r1, #0
 8002cd4:	6878      	ldr	r0, [r7, #4]
 8002cd6:	f000 fb2f 	bl	8003338 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002cda:	f000 f885 	bl	8002de8 <xTaskResumeAll>
 8002cde:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d107      	bne.n	8002cf6 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8002ce6:	4b07      	ldr	r3, [pc, #28]	@ (8002d04 <vTaskDelay+0x68>)
 8002ce8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002cec:	601a      	str	r2, [r3, #0]
 8002cee:	f3bf 8f4f 	dsb	sy
 8002cf2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002cf6:	bf00      	nop
 8002cf8:	3710      	adds	r7, #16
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}
 8002cfe:	bf00      	nop
 8002d00:	2000042c 	.word	0x2000042c
 8002d04:	e000ed04 	.word	0xe000ed04

08002d08 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b08a      	sub	sp, #40	@ 0x28
 8002d0c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002d12:	2300      	movs	r3, #0
 8002d14:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002d16:	463a      	mov	r2, r7
 8002d18:	1d39      	adds	r1, r7, #4
 8002d1a:	f107 0308 	add.w	r3, r7, #8
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f7fd fba8 	bl	8000474 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002d24:	6839      	ldr	r1, [r7, #0]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	68ba      	ldr	r2, [r7, #8]
 8002d2a:	9202      	str	r2, [sp, #8]
 8002d2c:	9301      	str	r3, [sp, #4]
 8002d2e:	2300      	movs	r3, #0
 8002d30:	9300      	str	r3, [sp, #0]
 8002d32:	2300      	movs	r3, #0
 8002d34:	460a      	mov	r2, r1
 8002d36:	491f      	ldr	r1, [pc, #124]	@ (8002db4 <vTaskStartScheduler+0xac>)
 8002d38:	481f      	ldr	r0, [pc, #124]	@ (8002db8 <vTaskStartScheduler+0xb0>)
 8002d3a:	f7ff fe18 	bl	800296e <xTaskCreateStatic>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	4a1e      	ldr	r2, [pc, #120]	@ (8002dbc <vTaskStartScheduler+0xb4>)
 8002d42:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002d44:	4b1d      	ldr	r3, [pc, #116]	@ (8002dbc <vTaskStartScheduler+0xb4>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d002      	beq.n	8002d52 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	617b      	str	r3, [r7, #20]
 8002d50:	e001      	b.n	8002d56 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8002d52:	2300      	movs	r3, #0
 8002d54:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002d56:	697b      	ldr	r3, [r7, #20]
 8002d58:	2b01      	cmp	r3, #1
 8002d5a:	d116      	bne.n	8002d8a <vTaskStartScheduler+0x82>
	__asm volatile
 8002d5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d60:	f383 8811 	msr	BASEPRI, r3
 8002d64:	f3bf 8f6f 	isb	sy
 8002d68:	f3bf 8f4f 	dsb	sy
 8002d6c:	613b      	str	r3, [r7, #16]
}
 8002d6e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002d70:	4b13      	ldr	r3, [pc, #76]	@ (8002dc0 <vTaskStartScheduler+0xb8>)
 8002d72:	f04f 32ff 	mov.w	r2, #4294967295
 8002d76:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002d78:	4b12      	ldr	r3, [pc, #72]	@ (8002dc4 <vTaskStartScheduler+0xbc>)
 8002d7a:	2201      	movs	r2, #1
 8002d7c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002d7e:	4b12      	ldr	r3, [pc, #72]	@ (8002dc8 <vTaskStartScheduler+0xc0>)
 8002d80:	2200      	movs	r2, #0
 8002d82:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002d84:	f000 fbc0 	bl	8003508 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002d88:	e00f      	b.n	8002daa <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002d8a:	697b      	ldr	r3, [r7, #20]
 8002d8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d90:	d10b      	bne.n	8002daa <vTaskStartScheduler+0xa2>
	__asm volatile
 8002d92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d96:	f383 8811 	msr	BASEPRI, r3
 8002d9a:	f3bf 8f6f 	isb	sy
 8002d9e:	f3bf 8f4f 	dsb	sy
 8002da2:	60fb      	str	r3, [r7, #12]
}
 8002da4:	bf00      	nop
 8002da6:	bf00      	nop
 8002da8:	e7fd      	b.n	8002da6 <vTaskStartScheduler+0x9e>
}
 8002daa:	bf00      	nop
 8002dac:	3718      	adds	r7, #24
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}
 8002db2:	bf00      	nop
 8002db4:	08003c18 	.word	0x08003c18
 8002db8:	08003151 	.word	0x08003151
 8002dbc:	20000428 	.word	0x20000428
 8002dc0:	20000424 	.word	0x20000424
 8002dc4:	20000410 	.word	0x20000410
 8002dc8:	20000408 	.word	0x20000408

08002dcc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002dcc:	b480      	push	{r7}
 8002dce:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8002dd0:	4b04      	ldr	r3, [pc, #16]	@ (8002de4 <vTaskSuspendAll+0x18>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	3301      	adds	r3, #1
 8002dd6:	4a03      	ldr	r2, [pc, #12]	@ (8002de4 <vTaskSuspendAll+0x18>)
 8002dd8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8002dda:	bf00      	nop
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	bc80      	pop	{r7}
 8002de0:	4770      	bx	lr
 8002de2:	bf00      	nop
 8002de4:	2000042c 	.word	0x2000042c

08002de8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b084      	sub	sp, #16
 8002dec:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002dee:	2300      	movs	r3, #0
 8002df0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002df2:	2300      	movs	r3, #0
 8002df4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002df6:	4b42      	ldr	r3, [pc, #264]	@ (8002f00 <xTaskResumeAll+0x118>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d10b      	bne.n	8002e16 <xTaskResumeAll+0x2e>
	__asm volatile
 8002dfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e02:	f383 8811 	msr	BASEPRI, r3
 8002e06:	f3bf 8f6f 	isb	sy
 8002e0a:	f3bf 8f4f 	dsb	sy
 8002e0e:	603b      	str	r3, [r7, #0]
}
 8002e10:	bf00      	nop
 8002e12:	bf00      	nop
 8002e14:	e7fd      	b.n	8002e12 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002e16:	f000 fbe9 	bl	80035ec <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002e1a:	4b39      	ldr	r3, [pc, #228]	@ (8002f00 <xTaskResumeAll+0x118>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	3b01      	subs	r3, #1
 8002e20:	4a37      	ldr	r2, [pc, #220]	@ (8002f00 <xTaskResumeAll+0x118>)
 8002e22:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002e24:	4b36      	ldr	r3, [pc, #216]	@ (8002f00 <xTaskResumeAll+0x118>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d161      	bne.n	8002ef0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002e2c:	4b35      	ldr	r3, [pc, #212]	@ (8002f04 <xTaskResumeAll+0x11c>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d05d      	beq.n	8002ef0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002e34:	e02e      	b.n	8002e94 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002e36:	4b34      	ldr	r3, [pc, #208]	@ (8002f08 <xTaskResumeAll+0x120>)
 8002e38:	68db      	ldr	r3, [r3, #12]
 8002e3a:	68db      	ldr	r3, [r3, #12]
 8002e3c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	3318      	adds	r3, #24
 8002e42:	4618      	mov	r0, r3
 8002e44:	f7ff fd6a 	bl	800291c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	3304      	adds	r3, #4
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	f7ff fd65 	bl	800291c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e56:	2201      	movs	r2, #1
 8002e58:	409a      	lsls	r2, r3
 8002e5a:	4b2c      	ldr	r3, [pc, #176]	@ (8002f0c <xTaskResumeAll+0x124>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	4a2a      	ldr	r2, [pc, #168]	@ (8002f0c <xTaskResumeAll+0x124>)
 8002e62:	6013      	str	r3, [r2, #0]
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e68:	4613      	mov	r3, r2
 8002e6a:	009b      	lsls	r3, r3, #2
 8002e6c:	4413      	add	r3, r2
 8002e6e:	009b      	lsls	r3, r3, #2
 8002e70:	4a27      	ldr	r2, [pc, #156]	@ (8002f10 <xTaskResumeAll+0x128>)
 8002e72:	441a      	add	r2, r3
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	3304      	adds	r3, #4
 8002e78:	4619      	mov	r1, r3
 8002e7a:	4610      	mov	r0, r2
 8002e7c:	f7ff fcf3 	bl	8002866 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e84:	4b23      	ldr	r3, [pc, #140]	@ (8002f14 <xTaskResumeAll+0x12c>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e8a:	429a      	cmp	r2, r3
 8002e8c:	d302      	bcc.n	8002e94 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8002e8e:	4b22      	ldr	r3, [pc, #136]	@ (8002f18 <xTaskResumeAll+0x130>)
 8002e90:	2201      	movs	r2, #1
 8002e92:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002e94:	4b1c      	ldr	r3, [pc, #112]	@ (8002f08 <xTaskResumeAll+0x120>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d1cc      	bne.n	8002e36 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d001      	beq.n	8002ea6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002ea2:	f000 fa0b 	bl	80032bc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002ea6:	4b1d      	ldr	r3, [pc, #116]	@ (8002f1c <xTaskResumeAll+0x134>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d010      	beq.n	8002ed4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002eb2:	f000 f837 	bl	8002f24 <xTaskIncrementTick>
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d002      	beq.n	8002ec2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8002ebc:	4b16      	ldr	r3, [pc, #88]	@ (8002f18 <xTaskResumeAll+0x130>)
 8002ebe:	2201      	movs	r2, #1
 8002ec0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	3b01      	subs	r3, #1
 8002ec6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d1f1      	bne.n	8002eb2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8002ece:	4b13      	ldr	r3, [pc, #76]	@ (8002f1c <xTaskResumeAll+0x134>)
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002ed4:	4b10      	ldr	r3, [pc, #64]	@ (8002f18 <xTaskResumeAll+0x130>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d009      	beq.n	8002ef0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002edc:	2301      	movs	r3, #1
 8002ede:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002ee0:	4b0f      	ldr	r3, [pc, #60]	@ (8002f20 <xTaskResumeAll+0x138>)
 8002ee2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002ee6:	601a      	str	r2, [r3, #0]
 8002ee8:	f3bf 8f4f 	dsb	sy
 8002eec:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002ef0:	f000 fbac 	bl	800364c <vPortExitCritical>

	return xAlreadyYielded;
 8002ef4:	68bb      	ldr	r3, [r7, #8]
}
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	3710      	adds	r7, #16
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bd80      	pop	{r7, pc}
 8002efe:	bf00      	nop
 8002f00:	2000042c 	.word	0x2000042c
 8002f04:	20000404 	.word	0x20000404
 8002f08:	200003c4 	.word	0x200003c4
 8002f0c:	2000040c 	.word	0x2000040c
 8002f10:	20000308 	.word	0x20000308
 8002f14:	20000304 	.word	0x20000304
 8002f18:	20000418 	.word	0x20000418
 8002f1c:	20000414 	.word	0x20000414
 8002f20:	e000ed04 	.word	0xe000ed04

08002f24 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b086      	sub	sp, #24
 8002f28:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002f2e:	4b4f      	ldr	r3, [pc, #316]	@ (800306c <xTaskIncrementTick+0x148>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	f040 808f 	bne.w	8003056 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002f38:	4b4d      	ldr	r3, [pc, #308]	@ (8003070 <xTaskIncrementTick+0x14c>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	3301      	adds	r3, #1
 8002f3e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002f40:	4a4b      	ldr	r2, [pc, #300]	@ (8003070 <xTaskIncrementTick+0x14c>)
 8002f42:	693b      	ldr	r3, [r7, #16]
 8002f44:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002f46:	693b      	ldr	r3, [r7, #16]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d121      	bne.n	8002f90 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8002f4c:	4b49      	ldr	r3, [pc, #292]	@ (8003074 <xTaskIncrementTick+0x150>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d00b      	beq.n	8002f6e <xTaskIncrementTick+0x4a>
	__asm volatile
 8002f56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f5a:	f383 8811 	msr	BASEPRI, r3
 8002f5e:	f3bf 8f6f 	isb	sy
 8002f62:	f3bf 8f4f 	dsb	sy
 8002f66:	603b      	str	r3, [r7, #0]
}
 8002f68:	bf00      	nop
 8002f6a:	bf00      	nop
 8002f6c:	e7fd      	b.n	8002f6a <xTaskIncrementTick+0x46>
 8002f6e:	4b41      	ldr	r3, [pc, #260]	@ (8003074 <xTaskIncrementTick+0x150>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	60fb      	str	r3, [r7, #12]
 8002f74:	4b40      	ldr	r3, [pc, #256]	@ (8003078 <xTaskIncrementTick+0x154>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a3e      	ldr	r2, [pc, #248]	@ (8003074 <xTaskIncrementTick+0x150>)
 8002f7a:	6013      	str	r3, [r2, #0]
 8002f7c:	4a3e      	ldr	r2, [pc, #248]	@ (8003078 <xTaskIncrementTick+0x154>)
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	6013      	str	r3, [r2, #0]
 8002f82:	4b3e      	ldr	r3, [pc, #248]	@ (800307c <xTaskIncrementTick+0x158>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	3301      	adds	r3, #1
 8002f88:	4a3c      	ldr	r2, [pc, #240]	@ (800307c <xTaskIncrementTick+0x158>)
 8002f8a:	6013      	str	r3, [r2, #0]
 8002f8c:	f000 f996 	bl	80032bc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002f90:	4b3b      	ldr	r3, [pc, #236]	@ (8003080 <xTaskIncrementTick+0x15c>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	693a      	ldr	r2, [r7, #16]
 8002f96:	429a      	cmp	r2, r3
 8002f98:	d348      	bcc.n	800302c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002f9a:	4b36      	ldr	r3, [pc, #216]	@ (8003074 <xTaskIncrementTick+0x150>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d104      	bne.n	8002fae <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002fa4:	4b36      	ldr	r3, [pc, #216]	@ (8003080 <xTaskIncrementTick+0x15c>)
 8002fa6:	f04f 32ff 	mov.w	r2, #4294967295
 8002faa:	601a      	str	r2, [r3, #0]
					break;
 8002fac:	e03e      	b.n	800302c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002fae:	4b31      	ldr	r3, [pc, #196]	@ (8003074 <xTaskIncrementTick+0x150>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	68db      	ldr	r3, [r3, #12]
 8002fb4:	68db      	ldr	r3, [r3, #12]
 8002fb6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002fb8:	68bb      	ldr	r3, [r7, #8]
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8002fbe:	693a      	ldr	r2, [r7, #16]
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	429a      	cmp	r2, r3
 8002fc4:	d203      	bcs.n	8002fce <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002fc6:	4a2e      	ldr	r2, [pc, #184]	@ (8003080 <xTaskIncrementTick+0x15c>)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002fcc:	e02e      	b.n	800302c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002fce:	68bb      	ldr	r3, [r7, #8]
 8002fd0:	3304      	adds	r3, #4
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	f7ff fca2 	bl	800291c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002fd8:	68bb      	ldr	r3, [r7, #8]
 8002fda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d004      	beq.n	8002fea <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	3318      	adds	r3, #24
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	f7ff fc99 	bl	800291c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8002fea:	68bb      	ldr	r3, [r7, #8]
 8002fec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fee:	2201      	movs	r2, #1
 8002ff0:	409a      	lsls	r2, r3
 8002ff2:	4b24      	ldr	r3, [pc, #144]	@ (8003084 <xTaskIncrementTick+0x160>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	4a22      	ldr	r2, [pc, #136]	@ (8003084 <xTaskIncrementTick+0x160>)
 8002ffa:	6013      	str	r3, [r2, #0]
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003000:	4613      	mov	r3, r2
 8003002:	009b      	lsls	r3, r3, #2
 8003004:	4413      	add	r3, r2
 8003006:	009b      	lsls	r3, r3, #2
 8003008:	4a1f      	ldr	r2, [pc, #124]	@ (8003088 <xTaskIncrementTick+0x164>)
 800300a:	441a      	add	r2, r3
 800300c:	68bb      	ldr	r3, [r7, #8]
 800300e:	3304      	adds	r3, #4
 8003010:	4619      	mov	r1, r3
 8003012:	4610      	mov	r0, r2
 8003014:	f7ff fc27 	bl	8002866 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800301c:	4b1b      	ldr	r3, [pc, #108]	@ (800308c <xTaskIncrementTick+0x168>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003022:	429a      	cmp	r2, r3
 8003024:	d3b9      	bcc.n	8002f9a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8003026:	2301      	movs	r3, #1
 8003028:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800302a:	e7b6      	b.n	8002f9a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800302c:	4b17      	ldr	r3, [pc, #92]	@ (800308c <xTaskIncrementTick+0x168>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003032:	4915      	ldr	r1, [pc, #84]	@ (8003088 <xTaskIncrementTick+0x164>)
 8003034:	4613      	mov	r3, r2
 8003036:	009b      	lsls	r3, r3, #2
 8003038:	4413      	add	r3, r2
 800303a:	009b      	lsls	r3, r3, #2
 800303c:	440b      	add	r3, r1
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	2b01      	cmp	r3, #1
 8003042:	d901      	bls.n	8003048 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8003044:	2301      	movs	r3, #1
 8003046:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003048:	4b11      	ldr	r3, [pc, #68]	@ (8003090 <xTaskIncrementTick+0x16c>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d007      	beq.n	8003060 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8003050:	2301      	movs	r3, #1
 8003052:	617b      	str	r3, [r7, #20]
 8003054:	e004      	b.n	8003060 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003056:	4b0f      	ldr	r3, [pc, #60]	@ (8003094 <xTaskIncrementTick+0x170>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	3301      	adds	r3, #1
 800305c:	4a0d      	ldr	r2, [pc, #52]	@ (8003094 <xTaskIncrementTick+0x170>)
 800305e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003060:	697b      	ldr	r3, [r7, #20]
}
 8003062:	4618      	mov	r0, r3
 8003064:	3718      	adds	r7, #24
 8003066:	46bd      	mov	sp, r7
 8003068:	bd80      	pop	{r7, pc}
 800306a:	bf00      	nop
 800306c:	2000042c 	.word	0x2000042c
 8003070:	20000408 	.word	0x20000408
 8003074:	200003bc 	.word	0x200003bc
 8003078:	200003c0 	.word	0x200003c0
 800307c:	2000041c 	.word	0x2000041c
 8003080:	20000424 	.word	0x20000424
 8003084:	2000040c 	.word	0x2000040c
 8003088:	20000308 	.word	0x20000308
 800308c:	20000304 	.word	0x20000304
 8003090:	20000418 	.word	0x20000418
 8003094:	20000414 	.word	0x20000414

08003098 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003098:	b480      	push	{r7}
 800309a:	b087      	sub	sp, #28
 800309c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800309e:	4b27      	ldr	r3, [pc, #156]	@ (800313c <vTaskSwitchContext+0xa4>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d003      	beq.n	80030ae <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80030a6:	4b26      	ldr	r3, [pc, #152]	@ (8003140 <vTaskSwitchContext+0xa8>)
 80030a8:	2201      	movs	r2, #1
 80030aa:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80030ac:	e040      	b.n	8003130 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 80030ae:	4b24      	ldr	r3, [pc, #144]	@ (8003140 <vTaskSwitchContext+0xa8>)
 80030b0:	2200      	movs	r2, #0
 80030b2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80030b4:	4b23      	ldr	r3, [pc, #140]	@ (8003144 <vTaskSwitchContext+0xac>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	fab3 f383 	clz	r3, r3
 80030c0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80030c2:	7afb      	ldrb	r3, [r7, #11]
 80030c4:	f1c3 031f 	rsb	r3, r3, #31
 80030c8:	617b      	str	r3, [r7, #20]
 80030ca:	491f      	ldr	r1, [pc, #124]	@ (8003148 <vTaskSwitchContext+0xb0>)
 80030cc:	697a      	ldr	r2, [r7, #20]
 80030ce:	4613      	mov	r3, r2
 80030d0:	009b      	lsls	r3, r3, #2
 80030d2:	4413      	add	r3, r2
 80030d4:	009b      	lsls	r3, r3, #2
 80030d6:	440b      	add	r3, r1
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d10b      	bne.n	80030f6 <vTaskSwitchContext+0x5e>
	__asm volatile
 80030de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030e2:	f383 8811 	msr	BASEPRI, r3
 80030e6:	f3bf 8f6f 	isb	sy
 80030ea:	f3bf 8f4f 	dsb	sy
 80030ee:	607b      	str	r3, [r7, #4]
}
 80030f0:	bf00      	nop
 80030f2:	bf00      	nop
 80030f4:	e7fd      	b.n	80030f2 <vTaskSwitchContext+0x5a>
 80030f6:	697a      	ldr	r2, [r7, #20]
 80030f8:	4613      	mov	r3, r2
 80030fa:	009b      	lsls	r3, r3, #2
 80030fc:	4413      	add	r3, r2
 80030fe:	009b      	lsls	r3, r3, #2
 8003100:	4a11      	ldr	r2, [pc, #68]	@ (8003148 <vTaskSwitchContext+0xb0>)
 8003102:	4413      	add	r3, r2
 8003104:	613b      	str	r3, [r7, #16]
 8003106:	693b      	ldr	r3, [r7, #16]
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	685a      	ldr	r2, [r3, #4]
 800310c:	693b      	ldr	r3, [r7, #16]
 800310e:	605a      	str	r2, [r3, #4]
 8003110:	693b      	ldr	r3, [r7, #16]
 8003112:	685a      	ldr	r2, [r3, #4]
 8003114:	693b      	ldr	r3, [r7, #16]
 8003116:	3308      	adds	r3, #8
 8003118:	429a      	cmp	r2, r3
 800311a:	d104      	bne.n	8003126 <vTaskSwitchContext+0x8e>
 800311c:	693b      	ldr	r3, [r7, #16]
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	685a      	ldr	r2, [r3, #4]
 8003122:	693b      	ldr	r3, [r7, #16]
 8003124:	605a      	str	r2, [r3, #4]
 8003126:	693b      	ldr	r3, [r7, #16]
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	68db      	ldr	r3, [r3, #12]
 800312c:	4a07      	ldr	r2, [pc, #28]	@ (800314c <vTaskSwitchContext+0xb4>)
 800312e:	6013      	str	r3, [r2, #0]
}
 8003130:	bf00      	nop
 8003132:	371c      	adds	r7, #28
 8003134:	46bd      	mov	sp, r7
 8003136:	bc80      	pop	{r7}
 8003138:	4770      	bx	lr
 800313a:	bf00      	nop
 800313c:	2000042c 	.word	0x2000042c
 8003140:	20000418 	.word	0x20000418
 8003144:	2000040c 	.word	0x2000040c
 8003148:	20000308 	.word	0x20000308
 800314c:	20000304 	.word	0x20000304

08003150 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b082      	sub	sp, #8
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003158:	f000 f852 	bl	8003200 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800315c:	4b06      	ldr	r3, [pc, #24]	@ (8003178 <prvIdleTask+0x28>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	2b01      	cmp	r3, #1
 8003162:	d9f9      	bls.n	8003158 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003164:	4b05      	ldr	r3, [pc, #20]	@ (800317c <prvIdleTask+0x2c>)
 8003166:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800316a:	601a      	str	r2, [r3, #0]
 800316c:	f3bf 8f4f 	dsb	sy
 8003170:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003174:	e7f0      	b.n	8003158 <prvIdleTask+0x8>
 8003176:	bf00      	nop
 8003178:	20000308 	.word	0x20000308
 800317c:	e000ed04 	.word	0xe000ed04

08003180 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b082      	sub	sp, #8
 8003184:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003186:	2300      	movs	r3, #0
 8003188:	607b      	str	r3, [r7, #4]
 800318a:	e00c      	b.n	80031a6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800318c:	687a      	ldr	r2, [r7, #4]
 800318e:	4613      	mov	r3, r2
 8003190:	009b      	lsls	r3, r3, #2
 8003192:	4413      	add	r3, r2
 8003194:	009b      	lsls	r3, r3, #2
 8003196:	4a12      	ldr	r2, [pc, #72]	@ (80031e0 <prvInitialiseTaskLists+0x60>)
 8003198:	4413      	add	r3, r2
 800319a:	4618      	mov	r0, r3
 800319c:	f7ff fb38 	bl	8002810 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	3301      	adds	r3, #1
 80031a4:	607b      	str	r3, [r7, #4]
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2b06      	cmp	r3, #6
 80031aa:	d9ef      	bls.n	800318c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80031ac:	480d      	ldr	r0, [pc, #52]	@ (80031e4 <prvInitialiseTaskLists+0x64>)
 80031ae:	f7ff fb2f 	bl	8002810 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80031b2:	480d      	ldr	r0, [pc, #52]	@ (80031e8 <prvInitialiseTaskLists+0x68>)
 80031b4:	f7ff fb2c 	bl	8002810 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80031b8:	480c      	ldr	r0, [pc, #48]	@ (80031ec <prvInitialiseTaskLists+0x6c>)
 80031ba:	f7ff fb29 	bl	8002810 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80031be:	480c      	ldr	r0, [pc, #48]	@ (80031f0 <prvInitialiseTaskLists+0x70>)
 80031c0:	f7ff fb26 	bl	8002810 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80031c4:	480b      	ldr	r0, [pc, #44]	@ (80031f4 <prvInitialiseTaskLists+0x74>)
 80031c6:	f7ff fb23 	bl	8002810 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80031ca:	4b0b      	ldr	r3, [pc, #44]	@ (80031f8 <prvInitialiseTaskLists+0x78>)
 80031cc:	4a05      	ldr	r2, [pc, #20]	@ (80031e4 <prvInitialiseTaskLists+0x64>)
 80031ce:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80031d0:	4b0a      	ldr	r3, [pc, #40]	@ (80031fc <prvInitialiseTaskLists+0x7c>)
 80031d2:	4a05      	ldr	r2, [pc, #20]	@ (80031e8 <prvInitialiseTaskLists+0x68>)
 80031d4:	601a      	str	r2, [r3, #0]
}
 80031d6:	bf00      	nop
 80031d8:	3708      	adds	r7, #8
 80031da:	46bd      	mov	sp, r7
 80031dc:	bd80      	pop	{r7, pc}
 80031de:	bf00      	nop
 80031e0:	20000308 	.word	0x20000308
 80031e4:	20000394 	.word	0x20000394
 80031e8:	200003a8 	.word	0x200003a8
 80031ec:	200003c4 	.word	0x200003c4
 80031f0:	200003d8 	.word	0x200003d8
 80031f4:	200003f0 	.word	0x200003f0
 80031f8:	200003bc 	.word	0x200003bc
 80031fc:	200003c0 	.word	0x200003c0

08003200 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b082      	sub	sp, #8
 8003204:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003206:	e019      	b.n	800323c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003208:	f000 f9f0 	bl	80035ec <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800320c:	4b10      	ldr	r3, [pc, #64]	@ (8003250 <prvCheckTasksWaitingTermination+0x50>)
 800320e:	68db      	ldr	r3, [r3, #12]
 8003210:	68db      	ldr	r3, [r3, #12]
 8003212:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	3304      	adds	r3, #4
 8003218:	4618      	mov	r0, r3
 800321a:	f7ff fb7f 	bl	800291c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800321e:	4b0d      	ldr	r3, [pc, #52]	@ (8003254 <prvCheckTasksWaitingTermination+0x54>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	3b01      	subs	r3, #1
 8003224:	4a0b      	ldr	r2, [pc, #44]	@ (8003254 <prvCheckTasksWaitingTermination+0x54>)
 8003226:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003228:	4b0b      	ldr	r3, [pc, #44]	@ (8003258 <prvCheckTasksWaitingTermination+0x58>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	3b01      	subs	r3, #1
 800322e:	4a0a      	ldr	r2, [pc, #40]	@ (8003258 <prvCheckTasksWaitingTermination+0x58>)
 8003230:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003232:	f000 fa0b 	bl	800364c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003236:	6878      	ldr	r0, [r7, #4]
 8003238:	f000 f810 	bl	800325c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800323c:	4b06      	ldr	r3, [pc, #24]	@ (8003258 <prvCheckTasksWaitingTermination+0x58>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d1e1      	bne.n	8003208 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003244:	bf00      	nop
 8003246:	bf00      	nop
 8003248:	3708      	adds	r7, #8
 800324a:	46bd      	mov	sp, r7
 800324c:	bd80      	pop	{r7, pc}
 800324e:	bf00      	nop
 8003250:	200003d8 	.word	0x200003d8
 8003254:	20000404 	.word	0x20000404
 8003258:	200003ec 	.word	0x200003ec

0800325c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800325c:	b580      	push	{r7, lr}
 800325e:	b084      	sub	sp, #16
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800326a:	2b00      	cmp	r3, #0
 800326c:	d108      	bne.n	8003280 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003272:	4618      	mov	r0, r3
 8003274:	f000 fb4a 	bl	800390c <vPortFree>
				vPortFree( pxTCB );
 8003278:	6878      	ldr	r0, [r7, #4]
 800327a:	f000 fb47 	bl	800390c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800327e:	e019      	b.n	80032b4 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003286:	2b01      	cmp	r3, #1
 8003288:	d103      	bne.n	8003292 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800328a:	6878      	ldr	r0, [r7, #4]
 800328c:	f000 fb3e 	bl	800390c <vPortFree>
	}
 8003290:	e010      	b.n	80032b4 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003298:	2b02      	cmp	r3, #2
 800329a:	d00b      	beq.n	80032b4 <prvDeleteTCB+0x58>
	__asm volatile
 800329c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032a0:	f383 8811 	msr	BASEPRI, r3
 80032a4:	f3bf 8f6f 	isb	sy
 80032a8:	f3bf 8f4f 	dsb	sy
 80032ac:	60fb      	str	r3, [r7, #12]
}
 80032ae:	bf00      	nop
 80032b0:	bf00      	nop
 80032b2:	e7fd      	b.n	80032b0 <prvDeleteTCB+0x54>
	}
 80032b4:	bf00      	nop
 80032b6:	3710      	adds	r7, #16
 80032b8:	46bd      	mov	sp, r7
 80032ba:	bd80      	pop	{r7, pc}

080032bc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80032bc:	b480      	push	{r7}
 80032be:	b083      	sub	sp, #12
 80032c0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80032c2:	4b0c      	ldr	r3, [pc, #48]	@ (80032f4 <prvResetNextTaskUnblockTime+0x38>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d104      	bne.n	80032d6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80032cc:	4b0a      	ldr	r3, [pc, #40]	@ (80032f8 <prvResetNextTaskUnblockTime+0x3c>)
 80032ce:	f04f 32ff 	mov.w	r2, #4294967295
 80032d2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80032d4:	e008      	b.n	80032e8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80032d6:	4b07      	ldr	r3, [pc, #28]	@ (80032f4 <prvResetNextTaskUnblockTime+0x38>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	68db      	ldr	r3, [r3, #12]
 80032dc:	68db      	ldr	r3, [r3, #12]
 80032de:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	4a04      	ldr	r2, [pc, #16]	@ (80032f8 <prvResetNextTaskUnblockTime+0x3c>)
 80032e6:	6013      	str	r3, [r2, #0]
}
 80032e8:	bf00      	nop
 80032ea:	370c      	adds	r7, #12
 80032ec:	46bd      	mov	sp, r7
 80032ee:	bc80      	pop	{r7}
 80032f0:	4770      	bx	lr
 80032f2:	bf00      	nop
 80032f4:	200003bc 	.word	0x200003bc
 80032f8:	20000424 	.word	0x20000424

080032fc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80032fc:	b480      	push	{r7}
 80032fe:	b083      	sub	sp, #12
 8003300:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003302:	4b0b      	ldr	r3, [pc, #44]	@ (8003330 <xTaskGetSchedulerState+0x34>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d102      	bne.n	8003310 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800330a:	2301      	movs	r3, #1
 800330c:	607b      	str	r3, [r7, #4]
 800330e:	e008      	b.n	8003322 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003310:	4b08      	ldr	r3, [pc, #32]	@ (8003334 <xTaskGetSchedulerState+0x38>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d102      	bne.n	800331e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003318:	2302      	movs	r3, #2
 800331a:	607b      	str	r3, [r7, #4]
 800331c:	e001      	b.n	8003322 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800331e:	2300      	movs	r3, #0
 8003320:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003322:	687b      	ldr	r3, [r7, #4]
	}
 8003324:	4618      	mov	r0, r3
 8003326:	370c      	adds	r7, #12
 8003328:	46bd      	mov	sp, r7
 800332a:	bc80      	pop	{r7}
 800332c:	4770      	bx	lr
 800332e:	bf00      	nop
 8003330:	20000410 	.word	0x20000410
 8003334:	2000042c 	.word	0x2000042c

08003338 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b084      	sub	sp, #16
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
 8003340:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003342:	4b29      	ldr	r3, [pc, #164]	@ (80033e8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003348:	4b28      	ldr	r3, [pc, #160]	@ (80033ec <prvAddCurrentTaskToDelayedList+0xb4>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	3304      	adds	r3, #4
 800334e:	4618      	mov	r0, r3
 8003350:	f7ff fae4 	bl	800291c <uxListRemove>
 8003354:	4603      	mov	r3, r0
 8003356:	2b00      	cmp	r3, #0
 8003358:	d10b      	bne.n	8003372 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800335a:	4b24      	ldr	r3, [pc, #144]	@ (80033ec <prvAddCurrentTaskToDelayedList+0xb4>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003360:	2201      	movs	r2, #1
 8003362:	fa02 f303 	lsl.w	r3, r2, r3
 8003366:	43da      	mvns	r2, r3
 8003368:	4b21      	ldr	r3, [pc, #132]	@ (80033f0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4013      	ands	r3, r2
 800336e:	4a20      	ldr	r2, [pc, #128]	@ (80033f0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003370:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003378:	d10a      	bne.n	8003390 <prvAddCurrentTaskToDelayedList+0x58>
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d007      	beq.n	8003390 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003380:	4b1a      	ldr	r3, [pc, #104]	@ (80033ec <prvAddCurrentTaskToDelayedList+0xb4>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	3304      	adds	r3, #4
 8003386:	4619      	mov	r1, r3
 8003388:	481a      	ldr	r0, [pc, #104]	@ (80033f4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800338a:	f7ff fa6c 	bl	8002866 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800338e:	e026      	b.n	80033de <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003390:	68fa      	ldr	r2, [r7, #12]
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	4413      	add	r3, r2
 8003396:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003398:	4b14      	ldr	r3, [pc, #80]	@ (80033ec <prvAddCurrentTaskToDelayedList+0xb4>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	68ba      	ldr	r2, [r7, #8]
 800339e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80033a0:	68ba      	ldr	r2, [r7, #8]
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	429a      	cmp	r2, r3
 80033a6:	d209      	bcs.n	80033bc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80033a8:	4b13      	ldr	r3, [pc, #76]	@ (80033f8 <prvAddCurrentTaskToDelayedList+0xc0>)
 80033aa:	681a      	ldr	r2, [r3, #0]
 80033ac:	4b0f      	ldr	r3, [pc, #60]	@ (80033ec <prvAddCurrentTaskToDelayedList+0xb4>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	3304      	adds	r3, #4
 80033b2:	4619      	mov	r1, r3
 80033b4:	4610      	mov	r0, r2
 80033b6:	f7ff fa79 	bl	80028ac <vListInsert>
}
 80033ba:	e010      	b.n	80033de <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80033bc:	4b0f      	ldr	r3, [pc, #60]	@ (80033fc <prvAddCurrentTaskToDelayedList+0xc4>)
 80033be:	681a      	ldr	r2, [r3, #0]
 80033c0:	4b0a      	ldr	r3, [pc, #40]	@ (80033ec <prvAddCurrentTaskToDelayedList+0xb4>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	3304      	adds	r3, #4
 80033c6:	4619      	mov	r1, r3
 80033c8:	4610      	mov	r0, r2
 80033ca:	f7ff fa6f 	bl	80028ac <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80033ce:	4b0c      	ldr	r3, [pc, #48]	@ (8003400 <prvAddCurrentTaskToDelayedList+0xc8>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	68ba      	ldr	r2, [r7, #8]
 80033d4:	429a      	cmp	r2, r3
 80033d6:	d202      	bcs.n	80033de <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80033d8:	4a09      	ldr	r2, [pc, #36]	@ (8003400 <prvAddCurrentTaskToDelayedList+0xc8>)
 80033da:	68bb      	ldr	r3, [r7, #8]
 80033dc:	6013      	str	r3, [r2, #0]
}
 80033de:	bf00      	nop
 80033e0:	3710      	adds	r7, #16
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bd80      	pop	{r7, pc}
 80033e6:	bf00      	nop
 80033e8:	20000408 	.word	0x20000408
 80033ec:	20000304 	.word	0x20000304
 80033f0:	2000040c 	.word	0x2000040c
 80033f4:	200003f0 	.word	0x200003f0
 80033f8:	200003c0 	.word	0x200003c0
 80033fc:	200003bc 	.word	0x200003bc
 8003400:	20000424 	.word	0x20000424

08003404 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003404:	b480      	push	{r7}
 8003406:	b085      	sub	sp, #20
 8003408:	af00      	add	r7, sp, #0
 800340a:	60f8      	str	r0, [r7, #12]
 800340c:	60b9      	str	r1, [r7, #8]
 800340e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	3b04      	subs	r3, #4
 8003414:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800341c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	3b04      	subs	r3, #4
 8003422:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	f023 0201 	bic.w	r2, r3, #1
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	3b04      	subs	r3, #4
 8003432:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003434:	4a08      	ldr	r2, [pc, #32]	@ (8003458 <pxPortInitialiseStack+0x54>)
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	3b14      	subs	r3, #20
 800343e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003440:	687a      	ldr	r2, [r7, #4]
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	3b20      	subs	r3, #32
 800344a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800344c:	68fb      	ldr	r3, [r7, #12]
}
 800344e:	4618      	mov	r0, r3
 8003450:	3714      	adds	r7, #20
 8003452:	46bd      	mov	sp, r7
 8003454:	bc80      	pop	{r7}
 8003456:	4770      	bx	lr
 8003458:	0800345d 	.word	0x0800345d

0800345c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800345c:	b480      	push	{r7}
 800345e:	b085      	sub	sp, #20
 8003460:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8003462:	2300      	movs	r3, #0
 8003464:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003466:	4b12      	ldr	r3, [pc, #72]	@ (80034b0 <prvTaskExitError+0x54>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800346e:	d00b      	beq.n	8003488 <prvTaskExitError+0x2c>
	__asm volatile
 8003470:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003474:	f383 8811 	msr	BASEPRI, r3
 8003478:	f3bf 8f6f 	isb	sy
 800347c:	f3bf 8f4f 	dsb	sy
 8003480:	60fb      	str	r3, [r7, #12]
}
 8003482:	bf00      	nop
 8003484:	bf00      	nop
 8003486:	e7fd      	b.n	8003484 <prvTaskExitError+0x28>
	__asm volatile
 8003488:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800348c:	f383 8811 	msr	BASEPRI, r3
 8003490:	f3bf 8f6f 	isb	sy
 8003494:	f3bf 8f4f 	dsb	sy
 8003498:	60bb      	str	r3, [r7, #8]
}
 800349a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800349c:	bf00      	nop
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d0fc      	beq.n	800349e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80034a4:	bf00      	nop
 80034a6:	bf00      	nop
 80034a8:	3714      	adds	r7, #20
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bc80      	pop	{r7}
 80034ae:	4770      	bx	lr
 80034b0:	2000000c 	.word	0x2000000c
	...

080034c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80034c0:	4b07      	ldr	r3, [pc, #28]	@ (80034e0 <pxCurrentTCBConst2>)
 80034c2:	6819      	ldr	r1, [r3, #0]
 80034c4:	6808      	ldr	r0, [r1, #0]
 80034c6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80034ca:	f380 8809 	msr	PSP, r0
 80034ce:	f3bf 8f6f 	isb	sy
 80034d2:	f04f 0000 	mov.w	r0, #0
 80034d6:	f380 8811 	msr	BASEPRI, r0
 80034da:	f04e 0e0d 	orr.w	lr, lr, #13
 80034de:	4770      	bx	lr

080034e0 <pxCurrentTCBConst2>:
 80034e0:	20000304 	.word	0x20000304
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80034e4:	bf00      	nop
 80034e6:	bf00      	nop

080034e8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80034e8:	4806      	ldr	r0, [pc, #24]	@ (8003504 <prvPortStartFirstTask+0x1c>)
 80034ea:	6800      	ldr	r0, [r0, #0]
 80034ec:	6800      	ldr	r0, [r0, #0]
 80034ee:	f380 8808 	msr	MSP, r0
 80034f2:	b662      	cpsie	i
 80034f4:	b661      	cpsie	f
 80034f6:	f3bf 8f4f 	dsb	sy
 80034fa:	f3bf 8f6f 	isb	sy
 80034fe:	df00      	svc	0
 8003500:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003502:	bf00      	nop
 8003504:	e000ed08 	.word	0xe000ed08

08003508 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b084      	sub	sp, #16
 800350c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800350e:	4b32      	ldr	r3, [pc, #200]	@ (80035d8 <xPortStartScheduler+0xd0>)
 8003510:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	781b      	ldrb	r3, [r3, #0]
 8003516:	b2db      	uxtb	r3, r3
 8003518:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	22ff      	movs	r2, #255	@ 0xff
 800351e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	781b      	ldrb	r3, [r3, #0]
 8003524:	b2db      	uxtb	r3, r3
 8003526:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003528:	78fb      	ldrb	r3, [r7, #3]
 800352a:	b2db      	uxtb	r3, r3
 800352c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003530:	b2da      	uxtb	r2, r3
 8003532:	4b2a      	ldr	r3, [pc, #168]	@ (80035dc <xPortStartScheduler+0xd4>)
 8003534:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003536:	4b2a      	ldr	r3, [pc, #168]	@ (80035e0 <xPortStartScheduler+0xd8>)
 8003538:	2207      	movs	r2, #7
 800353a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800353c:	e009      	b.n	8003552 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800353e:	4b28      	ldr	r3, [pc, #160]	@ (80035e0 <xPortStartScheduler+0xd8>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	3b01      	subs	r3, #1
 8003544:	4a26      	ldr	r2, [pc, #152]	@ (80035e0 <xPortStartScheduler+0xd8>)
 8003546:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003548:	78fb      	ldrb	r3, [r7, #3]
 800354a:	b2db      	uxtb	r3, r3
 800354c:	005b      	lsls	r3, r3, #1
 800354e:	b2db      	uxtb	r3, r3
 8003550:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003552:	78fb      	ldrb	r3, [r7, #3]
 8003554:	b2db      	uxtb	r3, r3
 8003556:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800355a:	2b80      	cmp	r3, #128	@ 0x80
 800355c:	d0ef      	beq.n	800353e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800355e:	4b20      	ldr	r3, [pc, #128]	@ (80035e0 <xPortStartScheduler+0xd8>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f1c3 0307 	rsb	r3, r3, #7
 8003566:	2b04      	cmp	r3, #4
 8003568:	d00b      	beq.n	8003582 <xPortStartScheduler+0x7a>
	__asm volatile
 800356a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800356e:	f383 8811 	msr	BASEPRI, r3
 8003572:	f3bf 8f6f 	isb	sy
 8003576:	f3bf 8f4f 	dsb	sy
 800357a:	60bb      	str	r3, [r7, #8]
}
 800357c:	bf00      	nop
 800357e:	bf00      	nop
 8003580:	e7fd      	b.n	800357e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003582:	4b17      	ldr	r3, [pc, #92]	@ (80035e0 <xPortStartScheduler+0xd8>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	021b      	lsls	r3, r3, #8
 8003588:	4a15      	ldr	r2, [pc, #84]	@ (80035e0 <xPortStartScheduler+0xd8>)
 800358a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800358c:	4b14      	ldr	r3, [pc, #80]	@ (80035e0 <xPortStartScheduler+0xd8>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003594:	4a12      	ldr	r2, [pc, #72]	@ (80035e0 <xPortStartScheduler+0xd8>)
 8003596:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	b2da      	uxtb	r2, r3
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80035a0:	4b10      	ldr	r3, [pc, #64]	@ (80035e4 <xPortStartScheduler+0xdc>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4a0f      	ldr	r2, [pc, #60]	@ (80035e4 <xPortStartScheduler+0xdc>)
 80035a6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80035aa:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80035ac:	4b0d      	ldr	r3, [pc, #52]	@ (80035e4 <xPortStartScheduler+0xdc>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a0c      	ldr	r2, [pc, #48]	@ (80035e4 <xPortStartScheduler+0xdc>)
 80035b2:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80035b6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80035b8:	f000 f8b8 	bl	800372c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80035bc:	4b0a      	ldr	r3, [pc, #40]	@ (80035e8 <xPortStartScheduler+0xe0>)
 80035be:	2200      	movs	r2, #0
 80035c0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80035c2:	f7ff ff91 	bl	80034e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80035c6:	f7ff fd67 	bl	8003098 <vTaskSwitchContext>
	prvTaskExitError();
 80035ca:	f7ff ff47 	bl	800345c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80035ce:	2300      	movs	r3, #0
}
 80035d0:	4618      	mov	r0, r3
 80035d2:	3710      	adds	r7, #16
 80035d4:	46bd      	mov	sp, r7
 80035d6:	bd80      	pop	{r7, pc}
 80035d8:	e000e400 	.word	0xe000e400
 80035dc:	20000430 	.word	0x20000430
 80035e0:	20000434 	.word	0x20000434
 80035e4:	e000ed20 	.word	0xe000ed20
 80035e8:	2000000c 	.word	0x2000000c

080035ec <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80035ec:	b480      	push	{r7}
 80035ee:	b083      	sub	sp, #12
 80035f0:	af00      	add	r7, sp, #0
	__asm volatile
 80035f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035f6:	f383 8811 	msr	BASEPRI, r3
 80035fa:	f3bf 8f6f 	isb	sy
 80035fe:	f3bf 8f4f 	dsb	sy
 8003602:	607b      	str	r3, [r7, #4]
}
 8003604:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003606:	4b0f      	ldr	r3, [pc, #60]	@ (8003644 <vPortEnterCritical+0x58>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	3301      	adds	r3, #1
 800360c:	4a0d      	ldr	r2, [pc, #52]	@ (8003644 <vPortEnterCritical+0x58>)
 800360e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003610:	4b0c      	ldr	r3, [pc, #48]	@ (8003644 <vPortEnterCritical+0x58>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	2b01      	cmp	r3, #1
 8003616:	d110      	bne.n	800363a <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003618:	4b0b      	ldr	r3, [pc, #44]	@ (8003648 <vPortEnterCritical+0x5c>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	b2db      	uxtb	r3, r3
 800361e:	2b00      	cmp	r3, #0
 8003620:	d00b      	beq.n	800363a <vPortEnterCritical+0x4e>
	__asm volatile
 8003622:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003626:	f383 8811 	msr	BASEPRI, r3
 800362a:	f3bf 8f6f 	isb	sy
 800362e:	f3bf 8f4f 	dsb	sy
 8003632:	603b      	str	r3, [r7, #0]
}
 8003634:	bf00      	nop
 8003636:	bf00      	nop
 8003638:	e7fd      	b.n	8003636 <vPortEnterCritical+0x4a>
	}
}
 800363a:	bf00      	nop
 800363c:	370c      	adds	r7, #12
 800363e:	46bd      	mov	sp, r7
 8003640:	bc80      	pop	{r7}
 8003642:	4770      	bx	lr
 8003644:	2000000c 	.word	0x2000000c
 8003648:	e000ed04 	.word	0xe000ed04

0800364c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800364c:	b480      	push	{r7}
 800364e:	b083      	sub	sp, #12
 8003650:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003652:	4b12      	ldr	r3, [pc, #72]	@ (800369c <vPortExitCritical+0x50>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d10b      	bne.n	8003672 <vPortExitCritical+0x26>
	__asm volatile
 800365a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800365e:	f383 8811 	msr	BASEPRI, r3
 8003662:	f3bf 8f6f 	isb	sy
 8003666:	f3bf 8f4f 	dsb	sy
 800366a:	607b      	str	r3, [r7, #4]
}
 800366c:	bf00      	nop
 800366e:	bf00      	nop
 8003670:	e7fd      	b.n	800366e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8003672:	4b0a      	ldr	r3, [pc, #40]	@ (800369c <vPortExitCritical+0x50>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	3b01      	subs	r3, #1
 8003678:	4a08      	ldr	r2, [pc, #32]	@ (800369c <vPortExitCritical+0x50>)
 800367a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800367c:	4b07      	ldr	r3, [pc, #28]	@ (800369c <vPortExitCritical+0x50>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d105      	bne.n	8003690 <vPortExitCritical+0x44>
 8003684:	2300      	movs	r3, #0
 8003686:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800368e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8003690:	bf00      	nop
 8003692:	370c      	adds	r7, #12
 8003694:	46bd      	mov	sp, r7
 8003696:	bc80      	pop	{r7}
 8003698:	4770      	bx	lr
 800369a:	bf00      	nop
 800369c:	2000000c 	.word	0x2000000c

080036a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80036a0:	f3ef 8009 	mrs	r0, PSP
 80036a4:	f3bf 8f6f 	isb	sy
 80036a8:	4b0d      	ldr	r3, [pc, #52]	@ (80036e0 <pxCurrentTCBConst>)
 80036aa:	681a      	ldr	r2, [r3, #0]
 80036ac:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80036b0:	6010      	str	r0, [r2, #0]
 80036b2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80036b6:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80036ba:	f380 8811 	msr	BASEPRI, r0
 80036be:	f7ff fceb 	bl	8003098 <vTaskSwitchContext>
 80036c2:	f04f 0000 	mov.w	r0, #0
 80036c6:	f380 8811 	msr	BASEPRI, r0
 80036ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80036ce:	6819      	ldr	r1, [r3, #0]
 80036d0:	6808      	ldr	r0, [r1, #0]
 80036d2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80036d6:	f380 8809 	msr	PSP, r0
 80036da:	f3bf 8f6f 	isb	sy
 80036de:	4770      	bx	lr

080036e0 <pxCurrentTCBConst>:
 80036e0:	20000304 	.word	0x20000304
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80036e4:	bf00      	nop
 80036e6:	bf00      	nop

080036e8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b082      	sub	sp, #8
 80036ec:	af00      	add	r7, sp, #0
	__asm volatile
 80036ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036f2:	f383 8811 	msr	BASEPRI, r3
 80036f6:	f3bf 8f6f 	isb	sy
 80036fa:	f3bf 8f4f 	dsb	sy
 80036fe:	607b      	str	r3, [r7, #4]
}
 8003700:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003702:	f7ff fc0f 	bl	8002f24 <xTaskIncrementTick>
 8003706:	4603      	mov	r3, r0
 8003708:	2b00      	cmp	r3, #0
 800370a:	d003      	beq.n	8003714 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800370c:	4b06      	ldr	r3, [pc, #24]	@ (8003728 <xPortSysTickHandler+0x40>)
 800370e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003712:	601a      	str	r2, [r3, #0]
 8003714:	2300      	movs	r3, #0
 8003716:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	f383 8811 	msr	BASEPRI, r3
}
 800371e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8003720:	bf00      	nop
 8003722:	3708      	adds	r7, #8
 8003724:	46bd      	mov	sp, r7
 8003726:	bd80      	pop	{r7, pc}
 8003728:	e000ed04 	.word	0xe000ed04

0800372c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800372c:	b480      	push	{r7}
 800372e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003730:	4b0a      	ldr	r3, [pc, #40]	@ (800375c <vPortSetupTimerInterrupt+0x30>)
 8003732:	2200      	movs	r2, #0
 8003734:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003736:	4b0a      	ldr	r3, [pc, #40]	@ (8003760 <vPortSetupTimerInterrupt+0x34>)
 8003738:	2200      	movs	r2, #0
 800373a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800373c:	4b09      	ldr	r3, [pc, #36]	@ (8003764 <vPortSetupTimerInterrupt+0x38>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4a09      	ldr	r2, [pc, #36]	@ (8003768 <vPortSetupTimerInterrupt+0x3c>)
 8003742:	fba2 2303 	umull	r2, r3, r2, r3
 8003746:	099b      	lsrs	r3, r3, #6
 8003748:	4a08      	ldr	r2, [pc, #32]	@ (800376c <vPortSetupTimerInterrupt+0x40>)
 800374a:	3b01      	subs	r3, #1
 800374c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800374e:	4b03      	ldr	r3, [pc, #12]	@ (800375c <vPortSetupTimerInterrupt+0x30>)
 8003750:	2207      	movs	r2, #7
 8003752:	601a      	str	r2, [r3, #0]
}
 8003754:	bf00      	nop
 8003756:	46bd      	mov	sp, r7
 8003758:	bc80      	pop	{r7}
 800375a:	4770      	bx	lr
 800375c:	e000e010 	.word	0xe000e010
 8003760:	e000e018 	.word	0xe000e018
 8003764:	20000000 	.word	0x20000000
 8003768:	10624dd3 	.word	0x10624dd3
 800376c:	e000e014 	.word	0xe000e014

08003770 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b08a      	sub	sp, #40	@ 0x28
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003778:	2300      	movs	r3, #0
 800377a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800377c:	f7ff fb26 	bl	8002dcc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003780:	4b5c      	ldr	r3, [pc, #368]	@ (80038f4 <pvPortMalloc+0x184>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d101      	bne.n	800378c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003788:	f000 f924 	bl	80039d4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800378c:	4b5a      	ldr	r3, [pc, #360]	@ (80038f8 <pvPortMalloc+0x188>)
 800378e:	681a      	ldr	r2, [r3, #0]
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	4013      	ands	r3, r2
 8003794:	2b00      	cmp	r3, #0
 8003796:	f040 8095 	bne.w	80038c4 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d01e      	beq.n	80037de <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80037a0:	2208      	movs	r2, #8
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	4413      	add	r3, r2
 80037a6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	f003 0307 	and.w	r3, r3, #7
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d015      	beq.n	80037de <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	f023 0307 	bic.w	r3, r3, #7
 80037b8:	3308      	adds	r3, #8
 80037ba:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	f003 0307 	and.w	r3, r3, #7
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d00b      	beq.n	80037de <pvPortMalloc+0x6e>
	__asm volatile
 80037c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037ca:	f383 8811 	msr	BASEPRI, r3
 80037ce:	f3bf 8f6f 	isb	sy
 80037d2:	f3bf 8f4f 	dsb	sy
 80037d6:	617b      	str	r3, [r7, #20]
}
 80037d8:	bf00      	nop
 80037da:	bf00      	nop
 80037dc:	e7fd      	b.n	80037da <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d06f      	beq.n	80038c4 <pvPortMalloc+0x154>
 80037e4:	4b45      	ldr	r3, [pc, #276]	@ (80038fc <pvPortMalloc+0x18c>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	687a      	ldr	r2, [r7, #4]
 80037ea:	429a      	cmp	r2, r3
 80037ec:	d86a      	bhi.n	80038c4 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80037ee:	4b44      	ldr	r3, [pc, #272]	@ (8003900 <pvPortMalloc+0x190>)
 80037f0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80037f2:	4b43      	ldr	r3, [pc, #268]	@ (8003900 <pvPortMalloc+0x190>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80037f8:	e004      	b.n	8003804 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80037fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037fc:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80037fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003804:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	687a      	ldr	r2, [r7, #4]
 800380a:	429a      	cmp	r2, r3
 800380c:	d903      	bls.n	8003816 <pvPortMalloc+0xa6>
 800380e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d1f1      	bne.n	80037fa <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8003816:	4b37      	ldr	r3, [pc, #220]	@ (80038f4 <pvPortMalloc+0x184>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800381c:	429a      	cmp	r2, r3
 800381e:	d051      	beq.n	80038c4 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003820:	6a3b      	ldr	r3, [r7, #32]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	2208      	movs	r2, #8
 8003826:	4413      	add	r3, r2
 8003828:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800382a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800382c:	681a      	ldr	r2, [r3, #0]
 800382e:	6a3b      	ldr	r3, [r7, #32]
 8003830:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003832:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003834:	685a      	ldr	r2, [r3, #4]
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	1ad2      	subs	r2, r2, r3
 800383a:	2308      	movs	r3, #8
 800383c:	005b      	lsls	r3, r3, #1
 800383e:	429a      	cmp	r2, r3
 8003840:	d920      	bls.n	8003884 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003842:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	4413      	add	r3, r2
 8003848:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800384a:	69bb      	ldr	r3, [r7, #24]
 800384c:	f003 0307 	and.w	r3, r3, #7
 8003850:	2b00      	cmp	r3, #0
 8003852:	d00b      	beq.n	800386c <pvPortMalloc+0xfc>
	__asm volatile
 8003854:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003858:	f383 8811 	msr	BASEPRI, r3
 800385c:	f3bf 8f6f 	isb	sy
 8003860:	f3bf 8f4f 	dsb	sy
 8003864:	613b      	str	r3, [r7, #16]
}
 8003866:	bf00      	nop
 8003868:	bf00      	nop
 800386a:	e7fd      	b.n	8003868 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800386c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800386e:	685a      	ldr	r2, [r3, #4]
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	1ad2      	subs	r2, r2, r3
 8003874:	69bb      	ldr	r3, [r7, #24]
 8003876:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003878:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800387a:	687a      	ldr	r2, [r7, #4]
 800387c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800387e:	69b8      	ldr	r0, [r7, #24]
 8003880:	f000 f90a 	bl	8003a98 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003884:	4b1d      	ldr	r3, [pc, #116]	@ (80038fc <pvPortMalloc+0x18c>)
 8003886:	681a      	ldr	r2, [r3, #0]
 8003888:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	1ad3      	subs	r3, r2, r3
 800388e:	4a1b      	ldr	r2, [pc, #108]	@ (80038fc <pvPortMalloc+0x18c>)
 8003890:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003892:	4b1a      	ldr	r3, [pc, #104]	@ (80038fc <pvPortMalloc+0x18c>)
 8003894:	681a      	ldr	r2, [r3, #0]
 8003896:	4b1b      	ldr	r3, [pc, #108]	@ (8003904 <pvPortMalloc+0x194>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	429a      	cmp	r2, r3
 800389c:	d203      	bcs.n	80038a6 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800389e:	4b17      	ldr	r3, [pc, #92]	@ (80038fc <pvPortMalloc+0x18c>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4a18      	ldr	r2, [pc, #96]	@ (8003904 <pvPortMalloc+0x194>)
 80038a4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80038a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038a8:	685a      	ldr	r2, [r3, #4]
 80038aa:	4b13      	ldr	r3, [pc, #76]	@ (80038f8 <pvPortMalloc+0x188>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	431a      	orrs	r2, r3
 80038b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038b2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80038b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038b6:	2200      	movs	r2, #0
 80038b8:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80038ba:	4b13      	ldr	r3, [pc, #76]	@ (8003908 <pvPortMalloc+0x198>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	3301      	adds	r3, #1
 80038c0:	4a11      	ldr	r2, [pc, #68]	@ (8003908 <pvPortMalloc+0x198>)
 80038c2:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80038c4:	f7ff fa90 	bl	8002de8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80038c8:	69fb      	ldr	r3, [r7, #28]
 80038ca:	f003 0307 	and.w	r3, r3, #7
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d00b      	beq.n	80038ea <pvPortMalloc+0x17a>
	__asm volatile
 80038d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038d6:	f383 8811 	msr	BASEPRI, r3
 80038da:	f3bf 8f6f 	isb	sy
 80038de:	f3bf 8f4f 	dsb	sy
 80038e2:	60fb      	str	r3, [r7, #12]
}
 80038e4:	bf00      	nop
 80038e6:	bf00      	nop
 80038e8:	e7fd      	b.n	80038e6 <pvPortMalloc+0x176>
	return pvReturn;
 80038ea:	69fb      	ldr	r3, [r7, #28]
}
 80038ec:	4618      	mov	r0, r3
 80038ee:	3728      	adds	r7, #40	@ 0x28
 80038f0:	46bd      	mov	sp, r7
 80038f2:	bd80      	pop	{r7, pc}
 80038f4:	20001040 	.word	0x20001040
 80038f8:	20001054 	.word	0x20001054
 80038fc:	20001044 	.word	0x20001044
 8003900:	20001038 	.word	0x20001038
 8003904:	20001048 	.word	0x20001048
 8003908:	2000104c 	.word	0x2000104c

0800390c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b086      	sub	sp, #24
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d04f      	beq.n	80039be <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800391e:	2308      	movs	r3, #8
 8003920:	425b      	negs	r3, r3
 8003922:	697a      	ldr	r2, [r7, #20]
 8003924:	4413      	add	r3, r2
 8003926:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8003928:	697b      	ldr	r3, [r7, #20]
 800392a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800392c:	693b      	ldr	r3, [r7, #16]
 800392e:	685a      	ldr	r2, [r3, #4]
 8003930:	4b25      	ldr	r3, [pc, #148]	@ (80039c8 <vPortFree+0xbc>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4013      	ands	r3, r2
 8003936:	2b00      	cmp	r3, #0
 8003938:	d10b      	bne.n	8003952 <vPortFree+0x46>
	__asm volatile
 800393a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800393e:	f383 8811 	msr	BASEPRI, r3
 8003942:	f3bf 8f6f 	isb	sy
 8003946:	f3bf 8f4f 	dsb	sy
 800394a:	60fb      	str	r3, [r7, #12]
}
 800394c:	bf00      	nop
 800394e:	bf00      	nop
 8003950:	e7fd      	b.n	800394e <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003952:	693b      	ldr	r3, [r7, #16]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d00b      	beq.n	8003972 <vPortFree+0x66>
	__asm volatile
 800395a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800395e:	f383 8811 	msr	BASEPRI, r3
 8003962:	f3bf 8f6f 	isb	sy
 8003966:	f3bf 8f4f 	dsb	sy
 800396a:	60bb      	str	r3, [r7, #8]
}
 800396c:	bf00      	nop
 800396e:	bf00      	nop
 8003970:	e7fd      	b.n	800396e <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003972:	693b      	ldr	r3, [r7, #16]
 8003974:	685a      	ldr	r2, [r3, #4]
 8003976:	4b14      	ldr	r3, [pc, #80]	@ (80039c8 <vPortFree+0xbc>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4013      	ands	r3, r2
 800397c:	2b00      	cmp	r3, #0
 800397e:	d01e      	beq.n	80039be <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003980:	693b      	ldr	r3, [r7, #16]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d11a      	bne.n	80039be <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003988:	693b      	ldr	r3, [r7, #16]
 800398a:	685a      	ldr	r2, [r3, #4]
 800398c:	4b0e      	ldr	r3, [pc, #56]	@ (80039c8 <vPortFree+0xbc>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	43db      	mvns	r3, r3
 8003992:	401a      	ands	r2, r3
 8003994:	693b      	ldr	r3, [r7, #16]
 8003996:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003998:	f7ff fa18 	bl	8002dcc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800399c:	693b      	ldr	r3, [r7, #16]
 800399e:	685a      	ldr	r2, [r3, #4]
 80039a0:	4b0a      	ldr	r3, [pc, #40]	@ (80039cc <vPortFree+0xc0>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4413      	add	r3, r2
 80039a6:	4a09      	ldr	r2, [pc, #36]	@ (80039cc <vPortFree+0xc0>)
 80039a8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80039aa:	6938      	ldr	r0, [r7, #16]
 80039ac:	f000 f874 	bl	8003a98 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80039b0:	4b07      	ldr	r3, [pc, #28]	@ (80039d0 <vPortFree+0xc4>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	3301      	adds	r3, #1
 80039b6:	4a06      	ldr	r2, [pc, #24]	@ (80039d0 <vPortFree+0xc4>)
 80039b8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80039ba:	f7ff fa15 	bl	8002de8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80039be:	bf00      	nop
 80039c0:	3718      	adds	r7, #24
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bd80      	pop	{r7, pc}
 80039c6:	bf00      	nop
 80039c8:	20001054 	.word	0x20001054
 80039cc:	20001044 	.word	0x20001044
 80039d0:	20001050 	.word	0x20001050

080039d4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80039d4:	b480      	push	{r7}
 80039d6:	b085      	sub	sp, #20
 80039d8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80039da:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80039de:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80039e0:	4b27      	ldr	r3, [pc, #156]	@ (8003a80 <prvHeapInit+0xac>)
 80039e2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	f003 0307 	and.w	r3, r3, #7
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d00c      	beq.n	8003a08 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	3307      	adds	r3, #7
 80039f2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	f023 0307 	bic.w	r3, r3, #7
 80039fa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80039fc:	68ba      	ldr	r2, [r7, #8]
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	1ad3      	subs	r3, r2, r3
 8003a02:	4a1f      	ldr	r2, [pc, #124]	@ (8003a80 <prvHeapInit+0xac>)
 8003a04:	4413      	add	r3, r2
 8003a06:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003a0c:	4a1d      	ldr	r2, [pc, #116]	@ (8003a84 <prvHeapInit+0xb0>)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003a12:	4b1c      	ldr	r3, [pc, #112]	@ (8003a84 <prvHeapInit+0xb0>)
 8003a14:	2200      	movs	r2, #0
 8003a16:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	68ba      	ldr	r2, [r7, #8]
 8003a1c:	4413      	add	r3, r2
 8003a1e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8003a20:	2208      	movs	r2, #8
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	1a9b      	subs	r3, r3, r2
 8003a26:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	f023 0307 	bic.w	r3, r3, #7
 8003a2e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	4a15      	ldr	r2, [pc, #84]	@ (8003a88 <prvHeapInit+0xb4>)
 8003a34:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8003a36:	4b14      	ldr	r3, [pc, #80]	@ (8003a88 <prvHeapInit+0xb4>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8003a3e:	4b12      	ldr	r3, [pc, #72]	@ (8003a88 <prvHeapInit+0xb4>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	2200      	movs	r2, #0
 8003a44:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	68fa      	ldr	r2, [r7, #12]
 8003a4e:	1ad2      	subs	r2, r2, r3
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003a54:	4b0c      	ldr	r3, [pc, #48]	@ (8003a88 <prvHeapInit+0xb4>)
 8003a56:	681a      	ldr	r2, [r3, #0]
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	685b      	ldr	r3, [r3, #4]
 8003a60:	4a0a      	ldr	r2, [pc, #40]	@ (8003a8c <prvHeapInit+0xb8>)
 8003a62:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	685b      	ldr	r3, [r3, #4]
 8003a68:	4a09      	ldr	r2, [pc, #36]	@ (8003a90 <prvHeapInit+0xbc>)
 8003a6a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003a6c:	4b09      	ldr	r3, [pc, #36]	@ (8003a94 <prvHeapInit+0xc0>)
 8003a6e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8003a72:	601a      	str	r2, [r3, #0]
}
 8003a74:	bf00      	nop
 8003a76:	3714      	adds	r7, #20
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	bc80      	pop	{r7}
 8003a7c:	4770      	bx	lr
 8003a7e:	bf00      	nop
 8003a80:	20000438 	.word	0x20000438
 8003a84:	20001038 	.word	0x20001038
 8003a88:	20001040 	.word	0x20001040
 8003a8c:	20001048 	.word	0x20001048
 8003a90:	20001044 	.word	0x20001044
 8003a94:	20001054 	.word	0x20001054

08003a98 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003a98:	b480      	push	{r7}
 8003a9a:	b085      	sub	sp, #20
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003aa0:	4b27      	ldr	r3, [pc, #156]	@ (8003b40 <prvInsertBlockIntoFreeList+0xa8>)
 8003aa2:	60fb      	str	r3, [r7, #12]
 8003aa4:	e002      	b.n	8003aac <prvInsertBlockIntoFreeList+0x14>
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	60fb      	str	r3, [r7, #12]
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	687a      	ldr	r2, [r7, #4]
 8003ab2:	429a      	cmp	r2, r3
 8003ab4:	d8f7      	bhi.n	8003aa6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	68ba      	ldr	r2, [r7, #8]
 8003ac0:	4413      	add	r3, r2
 8003ac2:	687a      	ldr	r2, [r7, #4]
 8003ac4:	429a      	cmp	r2, r3
 8003ac6:	d108      	bne.n	8003ada <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	685a      	ldr	r2, [r3, #4]
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	685b      	ldr	r3, [r3, #4]
 8003ad0:	441a      	add	r2, r3
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	68ba      	ldr	r2, [r7, #8]
 8003ae4:	441a      	add	r2, r3
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	429a      	cmp	r2, r3
 8003aec:	d118      	bne.n	8003b20 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681a      	ldr	r2, [r3, #0]
 8003af2:	4b14      	ldr	r3, [pc, #80]	@ (8003b44 <prvInsertBlockIntoFreeList+0xac>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	429a      	cmp	r2, r3
 8003af8:	d00d      	beq.n	8003b16 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	685a      	ldr	r2, [r3, #4]
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	441a      	add	r2, r3
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	681a      	ldr	r2, [r3, #0]
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	601a      	str	r2, [r3, #0]
 8003b14:	e008      	b.n	8003b28 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003b16:	4b0b      	ldr	r3, [pc, #44]	@ (8003b44 <prvInsertBlockIntoFreeList+0xac>)
 8003b18:	681a      	ldr	r2, [r3, #0]
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	601a      	str	r2, [r3, #0]
 8003b1e:	e003      	b.n	8003b28 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681a      	ldr	r2, [r3, #0]
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003b28:	68fa      	ldr	r2, [r7, #12]
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	429a      	cmp	r2, r3
 8003b2e:	d002      	beq.n	8003b36 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	687a      	ldr	r2, [r7, #4]
 8003b34:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003b36:	bf00      	nop
 8003b38:	3714      	adds	r7, #20
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bc80      	pop	{r7}
 8003b3e:	4770      	bx	lr
 8003b40:	20001038 	.word	0x20001038
 8003b44:	20001040 	.word	0x20001040

08003b48 <memset>:
 8003b48:	4603      	mov	r3, r0
 8003b4a:	4402      	add	r2, r0
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d100      	bne.n	8003b52 <memset+0xa>
 8003b50:	4770      	bx	lr
 8003b52:	f803 1b01 	strb.w	r1, [r3], #1
 8003b56:	e7f9      	b.n	8003b4c <memset+0x4>

08003b58 <__libc_init_array>:
 8003b58:	b570      	push	{r4, r5, r6, lr}
 8003b5a:	2600      	movs	r6, #0
 8003b5c:	4d0c      	ldr	r5, [pc, #48]	@ (8003b90 <__libc_init_array+0x38>)
 8003b5e:	4c0d      	ldr	r4, [pc, #52]	@ (8003b94 <__libc_init_array+0x3c>)
 8003b60:	1b64      	subs	r4, r4, r5
 8003b62:	10a4      	asrs	r4, r4, #2
 8003b64:	42a6      	cmp	r6, r4
 8003b66:	d109      	bne.n	8003b7c <__libc_init_array+0x24>
 8003b68:	f000 f81a 	bl	8003ba0 <_init>
 8003b6c:	2600      	movs	r6, #0
 8003b6e:	4d0a      	ldr	r5, [pc, #40]	@ (8003b98 <__libc_init_array+0x40>)
 8003b70:	4c0a      	ldr	r4, [pc, #40]	@ (8003b9c <__libc_init_array+0x44>)
 8003b72:	1b64      	subs	r4, r4, r5
 8003b74:	10a4      	asrs	r4, r4, #2
 8003b76:	42a6      	cmp	r6, r4
 8003b78:	d105      	bne.n	8003b86 <__libc_init_array+0x2e>
 8003b7a:	bd70      	pop	{r4, r5, r6, pc}
 8003b7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b80:	4798      	blx	r3
 8003b82:	3601      	adds	r6, #1
 8003b84:	e7ee      	b.n	8003b64 <__libc_init_array+0xc>
 8003b86:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b8a:	4798      	blx	r3
 8003b8c:	3601      	adds	r6, #1
 8003b8e:	e7f2      	b.n	8003b76 <__libc_init_array+0x1e>
 8003b90:	08003c44 	.word	0x08003c44
 8003b94:	08003c44 	.word	0x08003c44
 8003b98:	08003c44 	.word	0x08003c44
 8003b9c:	08003c48 	.word	0x08003c48

08003ba0 <_init>:
 8003ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ba2:	bf00      	nop
 8003ba4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ba6:	bc08      	pop	{r3}
 8003ba8:	469e      	mov	lr, r3
 8003baa:	4770      	bx	lr

08003bac <_fini>:
 8003bac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bae:	bf00      	nop
 8003bb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003bb2:	bc08      	pop	{r3}
 8003bb4:	469e      	mov	lr, r3
 8003bb6:	4770      	bx	lr
